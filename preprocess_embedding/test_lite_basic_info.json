{"0":{"idx":0,"repo":"astropy\/astropy","instance_id":"astropy__astropy-12907","base_commit":"d16bfe05a744909de4b27f5875fe0d4ed41ce607","problem_statement":"Modeling's `separability_matrix` does not compute separability correctly for nested CompoundModels\nConsider the following model:\r\n\r\n```python\r\nfrom astropy.modeling import models as m\r\nfrom astropy.modeling.separable import separability_matrix\r\n\r\ncm = m.Linear1D(10) & m.Linear1D(5)\r\n```\r\n\r\nIt's separability matrix as you might expect is a diagonal:\r\n\r\n```python\r\n>>> separability_matrix(cm)\r\narray([[ True, False],\r\n       [False,  True]])\r\n```\r\n\r\nIf I make the model more complex:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True, False],\r\n       [False, False, False,  True]])\r\n```\r\n\r\nThe output matrix is again, as expected, the outputs and inputs to the linear models are separable and independent of each other.\r\n\r\nIf however, I nest these compound models:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & cm)\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True,  True],\r\n       [False, False,  True,  True]])\r\n```\r\nSuddenly the inputs and outputs are no longer separable?\r\n\r\nThis feels like a bug to me, but I might be missing something?\n","graph_file":"astropy#astropy#d16bfe05a744909de4b27f5875fe0d4ed41ce607.graph.json"},"1":{"idx":1,"repo":"astropy\/astropy","instance_id":"astropy__astropy-14182","base_commit":"a5917978be39d13cd90b517e1de4e7a539ffaa48","problem_statement":"Please support header rows in RestructuredText output\n### Description\r\n\r\nIt would be great if the following would work:\r\n\r\n```Python\r\n>>> from astropy.table import QTable\r\n>>> import astropy.units as u\r\n>>> import sys\r\n>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\")\r\n===== ========\r\n wave response\r\n===== ========\r\n350.0      0.7\r\n950.0      1.2\r\n===== ========\r\n>>> tbl.write(sys.stdout,  format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\r\n|  wave | response |\r\n|    nm |       ct |\r\n| 350.0 |      0.7 |\r\n| 950.0 |      1.2 |\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/usr\/lib\/python3\/dist-packages\/astropy\/table\/connect.py\", line 129, in __call__\r\n    self.registry.write(instance, *args, **kwargs)\r\n  File \"\/usr\/lib\/python3\/dist-packages\/astropy\/io\/registry\/core.py\", line 369, in write\r\n    return writer(data, *args, **kwargs)\r\n  File \"\/usr\/lib\/python3\/dist-packages\/astropy\/io\/ascii\/connect.py\", line 26, in io_write\r\n    return write(table, filename, **kwargs)\r\n  File \"\/usr\/lib\/python3\/dist-packages\/astropy\/io\/ascii\/ui.py\", line 856, in write\r\n    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\r\n  File \"\/usr\/lib\/python3\/dist-packages\/astropy\/io\/ascii\/ui.py\", line 800, in get_writer\r\n    writer = core._get_writer(Writer, fast_writer, **kwargs)\r\n  File \"\/usr\/lib\/python3\/dist-packages\/astropy\/io\/ascii\/core.py\", line 1719, in _get_writer\r\n    writer = Writer(**writer_kwargs)\r\nTypeError: RST.__init__() got an unexpected keyword argument 'header_rows'\r\n```\r\n\r\n\r\n### Additional context\r\n\r\nRestructuredText output is a great way to fill autogenerated documentation with content, so having this flexible makes the life easier `:-)`\r\n\r\n\n","graph_file":"astropy#astropy#a5917978be39d13cd90b517e1de4e7a539ffaa48.graph.json"},"2":{"idx":2,"repo":"astropy\/astropy","instance_id":"astropy__astropy-14365","base_commit":"7269fa3e33e8d02485a647da91a5a2a60a06af61","problem_statement":"ascii.qdp Table format assumes QDP commands are upper case\n### Description\n\nascii.qdp assumes that commands in a QDP file are upper case, for example, for errors they must be \"READ SERR 1 2\" whereas QDP itself is not case sensitive and case use \"read serr 1 2\". \r\n\r\nAs many QDP files are created by hand, the expectation that all commands be all-caps should be removed.\n\n### Expected behavior\n\nThe following qdp file should read into a `Table` with errors, rather than crashing.\r\n```\r\nread serr 1 2 \r\n1 0.5 1 0.5\r\n```\n\n### How to Reproduce\n\nCreate a QDP file:\r\n```\r\n> cat > test.qdp\r\nread serr 1 2 \r\n1 0.5 1 0.5\r\n<EOF>\r\n\r\n > python\r\nPython 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from astropy.table import Table\r\n>>> Table.read('test.qdp',format='ascii.qdp')\r\nWARNING: table_id not specified. Reading the first available table [astropy.io.ascii.qdp]\r\nTraceback (most recent call last):\r\n...\r\n    raise ValueError(f'Unrecognized QDP line: {line}')\r\nValueError: Unrecognized QDP line: read serr 1 2\r\n```\r\n\r\nRunning \"qdp test.qdp\" works just fine.\r\n\n\n### Versions\n\nPython 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)]\r\nastropy 5.1\r\nNumpy 1.24.1\r\npyerfa 2.0.0.1\r\nScipy 1.10.0\r\nMatplotlib 3.6.3\r\n\n","graph_file":"astropy#astropy#7269fa3e33e8d02485a647da91a5a2a60a06af61.graph.json"},"3":{"idx":3,"repo":"astropy\/astropy","instance_id":"astropy__astropy-14995","base_commit":"b16c7d12ccbc7b2d20364b89fb44285bcbfede54","problem_statement":"In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n### Description\n\nThis applies to v5.3. \r\n\r\nIt looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\r\n\r\nI don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n\n### Expected behavior\n\nWhen one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n### How to Reproduce\n\nThis is with v5.3.   With v5.2, there are no errors.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.nddata import NDDataRef\r\n\r\n>>> array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n>>> mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n\r\n>>> nref_nomask = NDDataRef(array)\r\n>>> nref_mask = NDDataRef(array, mask=mask)\r\n\r\n# multiply no mask by constant (no mask * no mask)\r\n>>> nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask   # returns nothing, no mask,  OK\r\n\r\n# multiply no mask by itself (no mask * no mask)\r\n>>> nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask # return nothing, no mask, OK\r\n\r\n# multiply mask by constant (mask * no mask)\r\n>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n\r\n# multiply mask by itself (mask * mask)\r\n>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\r\narray([[ 0,  1, 64],\r\n       [ 8,  0,  1],\r\n       [ 2,  1,  0]])\r\n\r\n# multiply mask by no mask (mask * no mask)\r\n>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n```\r\n\n\n### Versions\n\n>>> import sys; print(\"Python\", sys.version)\r\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\r\n>>> import astropy; print(\"astropy\", astropy.__version__)\r\nastropy 5.3\r\n>>> import numpy; print(\"Numpy\", numpy.__version__)\r\nNumpy 1.24.3\r\n>>> import erfa; print(\"pyerfa\", erfa.__version__)\r\npyerfa 2.0.0.3\r\n>>> import scipy; print(\"Scipy\", scipy.__version__)\r\nScipy 1.10.1\r\n>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\nMatplotlib 3.7.1\r\n\n","graph_file":"astropy#astropy#b16c7d12ccbc7b2d20364b89fb44285bcbfede54.graph.json"},"4":{"idx":4,"repo":"astropy\/astropy","instance_id":"astropy__astropy-6938","base_commit":"c76af9ed6bb89bfba45b9f5bc1e635188278e2fa","problem_statement":"Possible bug in io.fits related to D exponents\nI came across the following code in ``fitsrec.py``:\r\n\r\n```python\r\n        # Replace exponent separator in floating point numbers\r\n        if 'D' in format:\r\n            output_field.replace(encode_ascii('E'), encode_ascii('D'))\r\n```\r\n\r\nI think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway.\n","graph_file":"astropy#astropy#c76af9ed6bb89bfba45b9f5bc1e635188278e2fa.graph.json"},"5":{"idx":5,"repo":"astropy\/astropy","instance_id":"astropy__astropy-7746","base_commit":"d5bd3f68bb6d5ce3a61bdce9883ee750d1afade5","problem_statement":"Issue when passing empty lists\/arrays to WCS transformations\nThe following should not fail but instead should return empty lists\/arrays:\r\n\r\n```\r\nIn [1]: from astropy.wcs import WCS\r\n\r\nIn [2]: wcs = WCS('2MASS_h.fits')\r\n\r\nIn [3]: wcs.wcs_pix2world([], [], 0)\r\n---------------------------------------------------------------------------\r\nInconsistentAxisTypesError                Traceback (most recent call last)\r\n<ipython-input-3-e2cc0e97941a> in <module>()\r\n----> 1 wcs.wcs_pix2world([], [], 0)\r\n\r\n~\/Dropbox\/Code\/Astropy\/astropy\/astropy\/wcs\/wcs.py in wcs_pix2world(self, *args, **kwargs)\r\n   1352         return self._array_converter(\r\n   1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\r\n-> 1354             'output', *args, **kwargs)\r\n   1355     wcs_pix2world.__doc__ = \"\"\"\r\n   1356         Transforms pixel coordinates to world coordinates by doing\r\n\r\n~\/Dropbox\/Code\/Astropy\/astropy\/astropy\/wcs\/wcs.py in _array_converter(self, func, sky, ra_dec_order, *args)\r\n   1267                     \"a 1-D array for each axis, followed by an origin.\")\r\n   1268 \r\n-> 1269             return _return_list_of_arrays(axes, origin)\r\n   1270 \r\n   1271         raise TypeError(\r\n\r\n~\/Dropbox\/Code\/Astropy\/astropy\/astropy\/wcs\/wcs.py in _return_list_of_arrays(axes, origin)\r\n   1223             if ra_dec_order and sky == 'input':\r\n   1224                 xy = self._denormalize_sky(xy)\r\n-> 1225             output = func(xy, origin)\r\n   1226             if ra_dec_order and sky == 'output':\r\n   1227                 output = self._normalize_sky(output)\r\n\r\n~\/Dropbox\/Code\/Astropy\/astropy\/astropy\/wcs\/wcs.py in <lambda>(xy, o)\r\n   1351             raise ValueError(\"No basic WCS settings were created.\")\r\n   1352         return self._array_converter(\r\n-> 1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\r\n   1354             'output', *args, **kwargs)\r\n   1355     wcs_pix2world.__doc__ = \"\"\"\r\n\r\nInconsistentAxisTypesError: ERROR 4 in wcsp2s() at line 2646 of file cextern\/wcslib\/C\/wcs.c:\r\nncoord and\/or nelem inconsistent with the wcsprm.\r\n```\n","graph_file":"astropy#astropy#d5bd3f68bb6d5ce3a61bdce9883ee750d1afade5.graph.json"},"6":{"idx":6,"repo":"django\/django","instance_id":"django__django-10914","base_commit":"e7fd69d051eaa67cb17f172a39b57253e9cb831a","problem_statement":"Set default FILE_UPLOAD_PERMISSION to 0o644.\nDescription\n\t\nHello,\nAs far as I can see, the \u200bFile Uploads documentation page does not mention any permission issues.\nWhat I would like to see is a warning that in absence of explicitly configured FILE_UPLOAD_PERMISSIONS, the permissions for a file uploaded to FileSystemStorage might not be consistent depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used for temporary storage of the uploaded data (which, with the default FILE_UPLOAD_HANDLERS, in turn depends on the uploaded data size).\nThe tempfile.NamedTemporaryFile + os.rename sequence causes the resulting file permissions to be 0o0600 on some systems (I experience it here on CentOS 7.4.1708 and Python 3.6.5). In all probability, the implementation of Python's built-in tempfile module explicitly sets such permissions for temporary files due to security considerations.\nI found mentions of this issue \u200bon GitHub, but did not manage to find any existing bug report in Django's bug tracker.\n","graph_file":"django#django#e7fd69d051eaa67cb17f172a39b57253e9cb831a.graph.json"},"7":{"idx":7,"repo":"django\/django","instance_id":"django__django-10924","base_commit":"bceadd2788dc2dad53eba0caae172bd8522fd483","problem_statement":"Allow FilePathField path to accept a callable.\nDescription\n\t\nI have a special case where I want to create a model containing the path to some local files on the server\/dev machine. Seeing as the place where these files are stored is different on different machines I have the following:\nimport os\nfrom django.conf import settings\nfrom django.db import models\nclass LocalFiles(models.Model):\n\tname = models.CharField(max_length=255)\n\tfile = models.FilePathField(path=os.path.join(settings.LOCAL_FILE_DIR, 'example_dir'))\nNow when running manage.py makemigrations it will resolve the path based on the machine it is being run on. Eg: \/home\/<username>\/server_files\/example_dir\nI had to manually change the migration to include the os.path.join() part to not break this when running the migration on production\/other machine.\n","graph_file":"django#django#bceadd2788dc2dad53eba0caae172bd8522fd483.graph.json"},"8":{"idx":8,"repo":"django\/django","instance_id":"django__django-11001","base_commit":"ef082ebb84f00e38af4e8880d04e8365c2766d34","problem_statement":"Incorrect removal of order_by clause created as multiline RawSQL\nDescription\n\t\nHi.\nThe SQLCompiler is ripping off one of my \"order by\" clause, because he \"thinks\" the clause was already \"seen\" (in SQLCompiler.get_order_by()). I'm using expressions written as multiline RawSQLs, which are similar but not the same. \nThe bug is located in SQLCompiler.get_order_by(), somewhere around line computing part of SQL query without ordering:\nwithout_ordering = self.ordering_parts.search(sql).group(1)\nThe sql variable contains multiline sql. As a result, the self.ordering_parts regular expression is returning just a line containing ASC or DESC words. This line is added to seen set, and because my raw queries have identical last lines, only the first clasue is returing from SQLCompiler.get_order_by().\nAs a quick\/temporal fix I can suggest making sql variable clean of newline characters, like this:\nsql_oneline = ' '.join(sql.split('\\n'))\nwithout_ordering = self.ordering_parts.search(sql_oneline).group(1)\nNote: beware of unicode (Py2.x u'') and EOL dragons (\\r).\nExample of my query:\n\treturn MyModel.objects.all().order_by(\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted', 'verification')\n\t\t\t\t then 2 else 1 end''', []).desc(),\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime)\n\t\t\t\t else null end''', []).asc(),\n\t\tRawSQL('''\n\t\t\tcase when status not in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime, created_at)\n\t\t\t\t else null end''', []).desc())\nThe ordering_parts.search is returing accordingly:\n'\t\t\t\t then 2 else 1 end)'\n'\t\t\t\t else null end'\n'\t\t\t\t else null end'\nSecond RawSQL with a\t\t\t\t else null end part is removed from query.\nThe fun thing is that the issue can be solved by workaround by adding a space or any other char to the last line. \nSo in case of RawSQL I can just say, that current implementation of avoiding duplicates in order by clause works only for special\/rare cases (or does not work in all cases). \nThe bug filed here is about wrong identification of duplicates (because it compares only last line of SQL passed to order by clause).\nHope my notes will help you fixing the issue. Sorry for my english.\n","graph_file":"django#django#ef082ebb84f00e38af4e8880d04e8365c2766d34.graph.json"},"9":{"idx":9,"repo":"django\/django","instance_id":"django__django-11019","base_commit":"93e892bb645b16ebaf287beb5fe7f3ffe8d10408","problem_statement":"Merging 3 or more media objects can throw unnecessary MediaOrderConflictWarnings\nDescription\n\t\nConsider the following form definition, where text-editor-extras.js depends on text-editor.js but all other JS files are independent:\nfrom django import forms\nclass ColorPicker(forms.Widget):\n\tclass Media:\n\t\tjs = ['color-picker.js']\nclass SimpleTextWidget(forms.Widget):\n\tclass Media:\n\t\tjs = ['text-editor.js']\nclass FancyTextWidget(forms.Widget):\n\tclass Media:\n\t\tjs = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']\nclass MyForm(forms.Form):\n\tbackground_color = forms.CharField(widget=ColorPicker())\n\tintro = forms.CharField(widget=SimpleTextWidget())\n\tbody = forms.CharField(widget=FancyTextWidget())\nDjango should be able to resolve the JS files for the final form into the order text-editor.js, text-editor-extras.js, color-picker.js. However, accessing MyForm().media results in:\n\/projects\/django\/django\/forms\/widgets.py:145: MediaOrderConflictWarning: Detected duplicate Media files in an opposite order:\ntext-editor-extras.js\ntext-editor.js\n MediaOrderConflictWarning,\nMedia(css={}, js=['text-editor-extras.js', 'color-picker.js', 'text-editor.js'])\nThe MediaOrderConflictWarning is a result of the order that the additions happen in: ColorPicker().media + SimpleTextWidget().media produces Media(css={}, js=['color-picker.js', 'text-editor.js']), which (wrongly) imposes the constraint that color-picker.js must appear before text-editor.js.\nThe final result is particularly unintuitive here, as it's worse than the \"na\u00efve\" result produced by Django 1.11 before order-checking was added (color-picker.js, text-editor.js, text-editor-extras.js), and the pair of files reported in the warning message seems wrong too (aren't color-picker.js and text-editor.js the wrong-ordered ones?)\n","graph_file":"django#django#93e892bb645b16ebaf287beb5fe7f3ffe8d10408.graph.json"},"10":{"idx":10,"repo":"django\/django","instance_id":"django__django-11039","base_commit":"d5276398046ce4a102776a1e67dcac2884d80dfe","problem_statement":"sqlmigrate wraps it's outpout in BEGIN\/COMMIT even if the database doesn't support transactional DDL\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nThe migration executor only adds the outer BEGIN\/COMMIT \u200bif the migration is atomic and \u200bthe schema editor can rollback DDL but the current sqlmigrate logic only takes migration.atomic into consideration.\nThe issue can be addressed by\nChanging sqlmigrate \u200bassignment of self.output_transaction to consider connection.features.can_rollback_ddl as well.\nAdding a test in tests\/migrations\/test_commands.py based on \u200ban existing test for non-atomic migrations that mocks connection.features.can_rollback_ddl to False instead of overdidding MIGRATION_MODULES to point to a non-atomic migration.\nI marked the ticket as easy picking because I included the above guidelines but feel free to uncheck it if you deem it inappropriate.\n","graph_file":"django#django#d5276398046ce4a102776a1e67dcac2884d80dfe.graph.json"},"11":{"idx":11,"repo":"django\/django","instance_id":"django__django-11049","base_commit":"17455e924e243e7a55e8a38f45966d8cbb27c273","problem_statement":"Correct expected format in invalid DurationField error message\nDescription\n\t\nIf you enter a duration \"14:00\" into a duration field, it translates to \"00:14:00\" which is 14 minutes.\nThe current error message for invalid DurationField says that this should be the format of durations: \"[DD] [HH:[MM:]]ss[.uuuuuu]\". But according to the actual behaviour, it should be: \"[DD] [[HH:]MM:]ss[.uuuuuu]\", because seconds are mandatory, minutes are optional, and hours are optional if minutes are provided.\nThis seems to be a mistake in all Django versions that support the DurationField.\nAlso the duration fields could have a default help_text with the requested format, because the syntax is not self-explanatory.\n","graph_file":"django#django#17455e924e243e7a55e8a38f45966d8cbb27c273.graph.json"},"12":{"idx":12,"repo":"django\/django","instance_id":"django__django-11099","base_commit":"d26b2424437dabeeca94d7900b37d2df4410da0c","problem_statement":"UsernameValidator allows trailing newline in usernames\nDescription\n\t\nASCIIUsernameValidator and UnicodeUsernameValidator use the regex \nr'^[\\w.@+-]+$'\nThe intent is to only allow alphanumeric characters as well as ., @, +, and -. However, a little known quirk of Python regexes is that $ will also match a trailing newline. Therefore, the user name validators will accept usernames which end with a newline. You can avoid this behavior by instead using \\A and \\Z to terminate regexes. For example, the validator regex could be changed to\nr'\\A[\\w.@+-]+\\Z'\nin order to reject usernames that end with a newline.\nI am not sure how to officially post a patch, but the required change is trivial - using the regex above in the two validators in contrib.auth.validators.\n","graph_file":"django#django#d26b2424437dabeeca94d7900b37d2df4410da0c.graph.json"},"13":{"idx":13,"repo":"django\/django","instance_id":"django__django-11133","base_commit":"879cc3da6249e920b8d54518a0ae06de835d7373","problem_statement":"HttpResponse doesn't handle memoryview objects\nDescription\n\t\nI am trying to write a BinaryField retrieved from the database into a HttpResponse. When the database is Sqlite this works correctly, but Postgresql returns the contents of the field as a memoryview object and it seems like current Django doesn't like this combination:\nfrom django.http import HttpResponse\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n# String content\nresponse = HttpResponse(\"My Content\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nresponse.content\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n# Out: b'My Content'\n# This is correct\n# Bytes content\nresponse = HttpResponse(b\"My Content\")\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \nresponse.content\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n# Out: b'My Content'\n# This is also correct\n# memoryview content\nresponse = HttpResponse(memoryview(b\"My Content\"))\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \nresponse.content\n# Out: b'<memory at 0x7fcc47ab2648>'\n# This is not correct, I am expecting b'My Content'\n","graph_file":"django#django#879cc3da6249e920b8d54518a0ae06de835d7373.graph.json"},"14":{"idx":14,"repo":"django\/django","instance_id":"django__django-11179","base_commit":"19fc6376ce67d01ca37a91ef2f55ef769f50513a","problem_statement":"delete() on instances of models without any dependencies doesn't clear PKs.\nDescription\n\t\nDeleting any model with no dependencies not updates the PK on the model. It should be set to None after .delete() call.\nSee Django.db.models.deletion:276-281. Should update the model line 280.\n","graph_file":"django#django#19fc6376ce67d01ca37a91ef2f55ef769f50513a.graph.json"},"15":{"idx":15,"repo":"django\/django","instance_id":"django__django-11283","base_commit":"08a4ee06510ae45562c228eefbdcaac84bd38c7a","problem_statement":"Migration auth.0011_update_proxy_permissions fails for models recreated as a proxy.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nI am trying to update my project to Django 2.2. When I launch python manage.py migrate, I get this error message when migration auth.0011_update_proxy_permissions is applying (full stacktrace is available \u200bhere):\ndjango.db.utils.IntegrityError: duplicate key value violates unique constraint \"idx_18141_auth_permission_content_type_id_01ab375a_uniq\" DETAIL: Key (co.ntent_type_id, codename)=(12, add_agency) already exists.\nIt looks like the migration is trying to re-create already existing entries in the auth_permission table. At first I though it cloud because we recently renamed a model. But after digging and deleting the entries associated with the renamed model from our database in the auth_permission table, the problem still occurs with other proxy models.\nI tried to update directly from 2.0.13 and 2.1.8. The issues appeared each time. I also deleted my venv and recreated it without an effect.\nI searched for a ticket about this on the bug tracker but found nothing. I also posted this on \u200bdjango-users and was asked to report this here.\n","graph_file":"django#django#08a4ee06510ae45562c228eefbdcaac84bd38c7a.graph.json"},"16":{"idx":16,"repo":"django\/django","instance_id":"django__django-11422","base_commit":"df46b329e0900e9e4dc1d60816c1dce6dfc1094e","problem_statement":"Autoreloader with StatReloader doesn't track changes in manage.py.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nThis is a bit convoluted, but here we go.\nEnvironment (OSX 10.11):\n$ python -V\nPython 3.6.2\n$ pip -V\npip 19.1.1\n$ pip install Django==2.2.1\nSteps to reproduce:\nRun a server python manage.py runserver\nEdit the manage.py file, e.g. add print(): \ndef main():\n\tprint('sth')\n\tos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ticket_30479.settings')\n\t...\nUnder 2.1.8 (and prior), this will trigger the auto-reloading mechanism. Under 2.2.1, it won't. As far as I can tell from the django.utils.autoreload log lines, it never sees the manage.py itself.\n","graph_file":"django#django#df46b329e0900e9e4dc1d60816c1dce6dfc1094e.graph.json"},"17":{"idx":17,"repo":"django\/django","instance_id":"django__django-11564","base_commit":"580e644f24f1c5ae5b94784fb73a9953a178fd26","problem_statement":"Add support for SCRIPT_NAME in STATIC_URL and MEDIA_URL\nDescription\n\t \n\t\t(last modified by Rostyslav Bryzgunov)\n\t \nBy default, {% static '...' %} tag just appends STATIC_URL in the path. When running on sub-path, using SCRIPT_NAME WSGI param, it results in incorrect static URL - it doesn't prepend SCRIPT_NAME prefix.\nThis problem can be solved with prepending SCRIPT_NAME to STATIC_URL in settings.py but that doesn't work when SCRIPT_NAME is a dynamic value.\nThis can be easily added into default Django static tag and django.contrib.staticfiles tag as following:\ndef render(self, context):\n\turl = self.url(context)\n\t# Updating url here with request.META['SCRIPT_NAME'] \n\tif self.varname is None:\n\t\treturn url\n\tcontext[self.varname] = url\n\t\treturn ''\nOn more research I found that FileSystemStorage and StaticFilesStorage ignores SCRIPT_NAME as well. \nWe might have to do a lot of changes but I think it's worth the efforts.\n","graph_file":"django#django#580e644f24f1c5ae5b94784fb73a9953a178fd26.graph.json"},"18":{"idx":18,"repo":"django\/django","instance_id":"django__django-11583","base_commit":"60dc957a825232fdda9138e2f8878b2ca407a7c9","problem_statement":"Auto-reloading with StatReloader very intermittently throws \"ValueError: embedded null byte\".\nDescription\n\t\nRaising this mainly so that it's tracked, as I have no idea how to reproduce it, nor why it's happening. It ultimately looks like a problem with Pathlib, which wasn't used prior to 2.2.\nStacktrace:\nTraceback (most recent call last):\n File \"manage.py\" ...\n\texecute_from_command_line(sys.argv)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/__init__.py\", line 381, in execute_from_command_line\n\tutility.execute()\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/__init__.py\", line 375, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/base.py\", line 323, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/runserver.py\", line 60, in execute\n\tsuper().execute(*args, **options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/base.py\", line 364, in execute\n\toutput = self.handle(*args, **options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/runserver.py\", line 95, in handle\n\tself.run(**options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/runserver.py\", line 102, in run\n\tautoreload.run_with_reloader(self.inner_run, **options)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 577, in run_with_reloader\n\tstart_django(reloader, main_func, *args, **kwargs)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 562, in start_django\n\treloader.run(django_main_thread)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 280, in run\n\tself.run_loop()\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 286, in run_loop\n\tnext(ticker)\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 326, in tick\n\tfor filepath, mtime in self.snapshot_files():\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 342, in snapshot_files\n\tfor file in self.watched_files():\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 241, in watched_files\n\tyield from iter_all_python_module_files()\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 103, in iter_all_python_module_files\n\treturn iter_modules_and_files(modules, frozenset(_error_files))\n File \"\/Userz\/kez\/path\/to\/venv\/lib\/python3.6\/site-packages\/django\/utils\/autoreload.py\", line 132, in iter_modules_and_files\n\tresults.add(path.resolve().absolute())\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 1120, in resolve\n\ts = self._flavour.resolve(self, strict=strict)\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 346, in resolve\n\treturn _resolve(base, str(path)) or sep\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 330, in _resolve\n\ttarget = accessor.readlink(newpath)\n File \"\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/pathlib.py\", line 441, in readlink\n\treturn os.readlink(path)\nValueError: embedded null byte\nI did print(path) before os.readlink(path) in pathlib and ended up with:\n\/Users\/kez\n\/Users\/kez\/.pyenv\n\/Users\/kez\/.pyenv\/versions\n\/Users\/kez\/.pyenv\/versions\/3.6.2\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/asyncio\n\/Users\/kez\/.pyenv\/versions\/3.6.2\/lib\/python3.6\/asyncio\/selector_events.py\n\/Users\nIt always seems to be \/Users which is last\nIt may have already printed \/Users as part of another .resolve() multiple times (that is, the order is not deterministic, and it may have traversed beyond \/Users successfully many times during startup.\nI don't know where to begin looking for the rogue null byte, nor why it only exists sometimes.\nBest guess I have is that there's a mountpoint in \/Users to a samba share which may not have been connected to yet? I dunno.\nI have no idea if it's fixable without removing the use of pathlib (which tbh I think should happen anyway, because it's slow) and reverting to using os.path.join and friends. \nI have no idea if it's fixed in a later Python version, but with no easy way to reproduce ... dunno how I'd check.\nI have no idea if it's something specific to my system (pyenv, OSX 10.11, etc)\n","graph_file":"django#django#60dc957a825232fdda9138e2f8878b2ca407a7c9.graph.json"},"19":{"idx":19,"repo":"django\/django","instance_id":"django__django-11620","base_commit":"514efa3129792ec2abb2444f3e7aeb3f21a38386","problem_statement":"When DEBUG is True, raising Http404 in a path converter's to_python method does not result in a technical response\nDescription\n\t\nThis is the response I get (plain text): \nA server error occurred. Please contact the administrator.\nI understand a ValueError should be raised which tells the URL resolver \"this path does not match, try next one\" but Http404 is what came to my mind intuitively and the error message was not very helpful.\nOne could also make a point that raising a Http404 should be valid way to tell the resolver \"this is indeed the right path but the current parameter value does not match anything so stop what you are doing and let the handler return the 404 page (including a helpful error message when DEBUG is True instead of the default 'Django tried these URL patterns')\".\nThis would prove useful for example to implement a path converter that uses get_object_or_404.\n","graph_file":"django#django#514efa3129792ec2abb2444f3e7aeb3f21a38386.graph.json"},"20":{"idx":20,"repo":"django\/django","instance_id":"django__django-11630","base_commit":"65e86948b80262574058a94ccaae3a9b59c3faea","problem_statement":"Django throws error when different apps with different models have the same name table name.\nDescription\n\t\nError message:\ntable_name: (models.E028) db_table 'table_name' is used by multiple models: base.ModelName, app2.ModelName.\nWe have a Base app that points to a central database and that has its own tables. We then have multiple Apps that talk to their own databases. Some share the same table names.\nWe have used this setup for a while, but after upgrading to Django 2.2 we're getting an error saying we're not allowed 2 apps, with 2 different models to have the same table names. \nIs this correct behavior? We've had to roll back to Django 2.0 for now.\n","graph_file":"django#django#65e86948b80262574058a94ccaae3a9b59c3faea.graph.json"},"21":{"idx":21,"repo":"django\/django","instance_id":"django__django-11742","base_commit":"fee75d2aed4e58ada6567c464cfd22e89dc65f4a","problem_statement":"Add check to ensure max_length fits longest choice.\nDescription\n\t\nThere is currently no check to ensure that Field.max_length is large enough to fit the longest value in Field.choices.\nThis would be very helpful as often this mistake is not noticed until an attempt is made to save a record with those values that are too long.\n","graph_file":"django#django#fee75d2aed4e58ada6567c464cfd22e89dc65f4a.graph.json"},"22":{"idx":22,"repo":"django\/django","instance_id":"django__django-11797","base_commit":"3346b78a8a872286a245d1e77ef4718fc5e6be1a","problem_statement":"Filtering on query result overrides GROUP BY of internal query\nDescription\n\t\nfrom django.contrib.auth import models\na = models.User.objects.filter(email__isnull=True).values('email').annotate(m=Max('id')).values('m')\nprint(a.query) # good\n# SELECT MAX(\"auth_user\".\"id\") AS \"m\" FROM \"auth_user\" WHERE \"auth_user\".\"email\" IS NULL GROUP BY \"auth_user\".\"email\"\nprint(a[:1].query) # good\n# SELECT MAX(\"auth_user\".\"id\") AS \"m\" FROM \"auth_user\" WHERE \"auth_user\".\"email\" IS NULL GROUP BY \"auth_user\".\"email\" LIMIT 1\nb = models.User.objects.filter(id=a[:1])\nprint(b.query) # GROUP BY U0.\"id\" should be GROUP BY U0.\"email\"\n# SELECT ... FROM \"auth_user\" WHERE \"auth_user\".\"id\" = (SELECT U0.\"id\" FROM \"auth_user\" U0 WHERE U0.\"email\" IS NULL GROUP BY U0.\"id\" LIMIT 1)\n","graph_file":"django#django#3346b78a8a872286a245d1e77ef4718fc5e6be1a.graph.json"},"23":{"idx":23,"repo":"django\/django","instance_id":"django__django-11815","base_commit":"e02f67ef2d03d48128e7a118bf75f0418e24e8ac","problem_statement":"Migrations uses value of enum object instead of its name.\nDescription\n\t \n\t\t(last modified by oasl)\n\t \nWhen using Enum object as a default value for a CharField, the generated migration file uses the value of the Enum object instead of the its name. This causes a problem when using Django translation on the value of the Enum object. \nThe problem is that, when the Enum object value get translated to the users language, the old migration files raise an error stating that the Enum does not have the corresponding value. (because the Enum value is translated to another language)\nExample:\nLet say we have this code in models.py:\nfrom enum import Enum\nfrom django.utils.translation import gettext_lazy as _\nfrom django.db import models\nclass Status(Enum):\n\tGOOD = _('Good') # 'Good' will be translated\n\tBAD = _('Bad') # 'Bad' will be translated\n\tdef __str__(self):\n\t\treturn self.name\nclass Item(models.Model):\n\tstatus = models.CharField(default=Status.GOOD, max_length=128)\nIn the generated migration file, the code will be:\n...\n('status', models.CharField(default=Status('Good'), max_length=128))\n...\nAfter the translation, 'Good' will be translated to another word and it will not be part of the Status Enum class any more, so the migration file will raise the error on the previous line:\nValueError: 'Good' is not a valid Status\nShouldn't the code generated by the migration uses the name of the Status Enum 'GOOD', not the value of it, since it is changeable?\nIt should be:\n('status', models.CharField(default=Status['GOOD'], max_length=128))\nThis will be correct regardless of the translated word\n","graph_file":"django#django#e02f67ef2d03d48128e7a118bf75f0418e24e8ac.graph.json"},"24":{"idx":24,"repo":"django\/django","instance_id":"django__django-11848","base_commit":"f0adf3b9b7a19cdee05368ff0c0c2d087f011180","problem_statement":"django.utils.http.parse_http_date two digit year check is incorrect\nDescription\n\t \n\t\t(last modified by Ad Timmering)\n\t \nRFC 850 does not mention this, but in RFC 7231 (and there's something similar in RFC 2822), there's the following quote:\nRecipients of a timestamp value in rfc850-date format, which uses a\ntwo-digit year, MUST interpret a timestamp that appears to be more\nthan 50 years in the future as representing the most recent year in\nthe past that had the same last two digits.\nCurrent logic is hard coded to consider 0-69 to be in 2000-2069, and 70-99 to be 1970-1999, instead of comparing versus the current year.\n","graph_file":"django#django#f0adf3b9b7a19cdee05368ff0c0c2d087f011180.graph.json"},"25":{"idx":25,"repo":"django\/django","instance_id":"django__django-11905","base_commit":"2f72480fbd27896c986c45193e1603e35c0b19a7","problem_statement":"Prevent using __isnull lookup with non-boolean value.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \n__isnull should not allow for non-boolean values. Using truthy\/falsey doesn't promote INNER JOIN to an OUTER JOIN but works fine for a simple queries. Using non-boolean values is \u200bundocumented and untested. IMO we should raise an error for non-boolean values to avoid confusion and for consistency.\n","graph_file":"django#django#2f72480fbd27896c986c45193e1603e35c0b19a7.graph.json"},"26":{"idx":26,"repo":"django\/django","instance_id":"django__django-11910","base_commit":"d232fd76a85870daf345fd8f8d617fe7802ae194","problem_statement":"ForeignKey's to_field parameter gets the old field's name when renaming a PrimaryKey.\nDescription\n\t\nHaving these two models \nclass ModelA(models.Model):\n\tfield_wrong = models.CharField('field1', max_length=50, primary_key=True) # I'm a Primary key.\nclass ModelB(models.Model):\n\tfield_fk = models.ForeignKey(ModelA, blank=True, null=True, on_delete=models.CASCADE) \n... migrations applyed ...\nthe ModelA.field_wrong field has been renamed ... and Django recognizes the \"renaming\"\n# Primary key renamed\nclass ModelA(models.Model):\n\tfield_fixed = models.CharField('field1', max_length=50, primary_key=True) # I'm a Primary key.\nAttempts to to_field parameter. \nThe to_field points to the old_name (field_typo) and not to the new one (\"field_fixed\")\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t('app1', '0001_initial'),\n\t]\n\toperations = [\n\t\tmigrations.RenameField(\n\t\t\tmodel_name='modela',\n\t\t\told_name='field_wrong',\n\t\t\tnew_name='field_fixed',\n\t\t),\n\t\tmigrations.AlterField(\n\t\t\tmodel_name='modelb',\n\t\t\tname='modela',\n\t\t\tfield=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app1.ModelB', to_field='field_wrong'),\n\t\t),\n\t]\n","graph_file":"django#django#d232fd76a85870daf345fd8f8d617fe7802ae194.graph.json"},"27":{"idx":27,"repo":"django\/django","instance_id":"django__django-11964","base_commit":"fc2b1cc926e34041953738e58fa6ad3053059b22","problem_statement":"The value of a TextChoices\/IntegerChoices field has a differing type\nDescription\n\t\nIf we create an instance of a model having a CharField or IntegerField with the keyword choices pointing to IntegerChoices or TextChoices, the value returned by the getter of the field will be of the same type as the one created by enum.Enum (enum value).\nFor example, this model:\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nclass MyChoice(models.TextChoices):\n\tFIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n\tSECOND_CHOICE = \"second\", _(\"The second choice, it is\")\nclass MyObject(models.Model):\n\tmy_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\nThen this test:\nfrom django.test import TestCase\nfrom testing.pkg.models import MyObject, MyChoice\nclass EnumTest(TestCase):\n\tdef setUp(self) -> None:\n\t\tself.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n\tdef test_created_object_is_str(self):\n\t\tmy_object = self.my_object\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\n\tdef test_retrieved_object_is_str(self):\n\t\tmy_object = MyObject.objects.last()\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAnd then the results:\n(django30-venv) \u279c django30 .\/manage.py test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nF.\n======================================================================\nFAIL: test_created_object_is_str (testing.tests.EnumTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"\/Users\/mikailkocak\/Development\/django30\/testing\/tests.py\", line 14, in test_created_object_is_str\n\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAssertionError: 'MyChoice.FIRST_CHOICE' != 'first'\n- MyChoice.FIRST_CHOICE\n+ first\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\nFAILED (failures=1)\nWe notice when invoking __str__(...) we don't actually get the value property of the enum value which can lead to some unexpected issues, especially when communicating to an external API with a freshly created instance that will send MyEnum.MyValue, and the one that was retrieved would send my_value.\n","graph_file":"django#django#fc2b1cc926e34041953738e58fa6ad3053059b22.graph.json"},"28":{"idx":28,"repo":"django\/django","instance_id":"django__django-11999","base_commit":"84633905273fc916e3d17883810d9969c03f73c2","problem_statement":"Cannot override get_FOO_display() in Django 2.2+.\nDescription\n\t\nI cannot override the get_FIELD_display function on models since version 2.2. It works in version 2.1.\nExample:\nclass FooBar(models.Model):\n\tfoo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n\tdef __str__(self):\n\t\treturn self.get_foo_bar_display() # This returns 'foo' or 'bar' in 2.2, but 'something' in 2.1\n\tdef get_foo_bar_display(self):\n\t\treturn \"something\"\nWhat I expect is that I should be able to override this function.\n","graph_file":"django#django#84633905273fc916e3d17883810d9969c03f73c2.graph.json"},"29":{"idx":29,"repo":"django\/django","instance_id":"django__django-12113","base_commit":"62254c5202e80a68f4fe6572a2be46a3d953de1a","problem_statement":"admin_views.test_multidb fails with persistent test SQLite database.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nI've tried using persistent SQLite databases for the tests (to make use of\n--keepdb), but at least some test fails with:\nsqlite3.OperationalError: database is locked\nThis is not an issue when only using TEST[\"NAME\"] with \"default\" (which is good enough in terms of performance).\ndiff --git i\/tests\/test_sqlite.py w\/tests\/test_sqlite.py\nindex f1b65f7d01..9ce4e32e14 100644\n--- i\/tests\/test_sqlite.py\n+++ w\/tests\/test_sqlite.py\n@@ -15,9 +15,15 @@\n DATABASES = {\n\t 'default': {\n\t\t 'ENGINE': 'django.db.backends.sqlite3',\n+\t\t'TEST': {\n+\t\t\t'NAME': 'test_default.sqlite3'\n+\t\t},\n\t },\n\t 'other': {\n\t\t 'ENGINE': 'django.db.backends.sqlite3',\n+\t\t'TEST': {\n+\t\t\t'NAME': 'test_other.sqlite3'\n+\t\t},\n\t }\n }\n% tests\/runtests.py admin_views.test_multidb -v 3 --keepdb --parallel 1\n\u2026\nOperations to perform:\n Synchronize unmigrated apps: admin_views, auth, contenttypes, messages, sessions, staticfiles\n Apply all migrations: admin, sites\nRunning pre-migrate handlers for application contenttypes\nRunning pre-migrate handlers for application auth\nRunning pre-migrate handlers for application sites\nRunning pre-migrate handlers for application sessions\nRunning pre-migrate handlers for application admin\nRunning pre-migrate handlers for application admin_views\nSynchronizing apps without migrations:\n Creating tables...\n\tRunning deferred SQL...\nRunning migrations:\n No migrations to apply.\nRunning post-migrate handlers for application contenttypes\nRunning post-migrate handlers for application auth\nRunning post-migrate handlers for application sites\nRunning post-migrate handlers for application sessions\nRunning post-migrate handlers for application admin\nRunning post-migrate handlers for application admin_views\nSystem check identified no issues (0 silenced).\nERROR\n======================================================================\nERROR: setUpClass (admin_views.test_multidb.MultiDatabaseTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/sqlite3\/base.py\", line 391, in execute\n\treturn Database.Cursor.execute(self, query, params)\nsqlite3.OperationalError: database is locked\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"\u2026\/Vcs\/django\/django\/test\/testcases.py\", line 1137, in setUpClass\n\tcls.setUpTestData()\n File \"\u2026\/Vcs\/django\/tests\/admin_views\/test_multidb.py\", line 40, in setUpTestData\n\tusername='admin', password='something', email='test@test.org',\n File \"\u2026\/Vcs\/django\/django\/contrib\/auth\/models.py\", line 158, in create_superuser\n\treturn self._create_user(username, email, password, **extra_fields)\n File \"\u2026\/Vcs\/django\/django\/contrib\/auth\/models.py\", line 141, in _create_user\n\tuser.save(using=self._db)\n File \"\u2026\/Vcs\/django\/django\/contrib\/auth\/base_user.py\", line 66, in save\n\tsuper().save(*args, **kwargs)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 741, in save\n\tforce_update=force_update, update_fields=update_fields)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 779, in save_base\n\tforce_update, using, update_fields,\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 870, in _save_table\n\tresult = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/base.py\", line 908, in _do_insert\n\tusing=using, raw=raw)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/query.py\", line 1175, in _insert\n\treturn query.get_compiler(using=using).execute_sql(return_id)\n File \"\u2026\/Vcs\/django\/django\/db\/models\/sql\/compiler.py\", line 1321, in execute_sql\n\tcursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 76, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/utils.py\", line 89, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\u2026\/Vcs\/django\/django\/db\/backends\/sqlite3\/base.py\", line 391, in execute\n\treturn Database.Cursor.execute(self, query, params)\ndjango.db.utils.OperationalError: database is locked\n","graph_file":"django#django#62254c5202e80a68f4fe6572a2be46a3d953de1a.graph.json"},"30":{"idx":30,"repo":"django\/django","instance_id":"django__django-12125","base_commit":"89d41cba392b759732ba9f1db4ff29ed47da6a56","problem_statement":"makemigrations produces incorrect path for inner classes\nDescription\n\t\nWhen you define a subclass from django.db.models.Field as an inner class of some other class, and use this field inside a django.db.models.Model class, then when you run manage.py makemigrations, a migrations file is created which refers to the inner class as if it were a top-level class of the module it is in.\nTo reproduce, create the following as your model:\nclass Outer(object):\n\tclass Inner(models.CharField):\n\t\tpass\nclass A(models.Model):\n\tfield = Outer.Inner(max_length=20)\nAfter running manage.py makemigrations, the generated migrations file contains the following:\nmigrations.CreateModel(\n\tname='A',\n\tfields=[\n\t\t('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t('field', test1.models.Inner(max_length=20)),\n\t],\n),\nNote the test1.models.Inner, which should have been test1.models.Outer.Inner.\nThe real life case involved an EnumField from django-enumfields, defined as an inner class of a Django Model class, similar to this:\nimport enum\nfrom enumfields import Enum, EnumField\nclass Thing(models.Model):\n\t@enum.unique\n\tclass State(Enum):\n\t\ton = 'on'\n\t\toff = 'off'\n\tstate = EnumField(enum=State)\nThis results in the following migrations code:\nmigrations.CreateModel(\n\tname='Thing',\n\tfields=[\n\t\t('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t('state', enumfields.fields.EnumField(enum=test1.models.State, max_length=10)),\n\t],\n),\nThis refers to test1.models.State, instead of to test1.models.Thing.State.\n","graph_file":"django#django#89d41cba392b759732ba9f1db4ff29ed47da6a56.graph.json"},"31":{"idx":31,"repo":"django\/django","instance_id":"django__django-12184","base_commit":"5d674eac871a306405b0fbbaeb17bbeba9c68bf3","problem_statement":"Optional URL params crash some view functions.\nDescription\n\t\nMy use case, running fine with Django until 2.2:\nURLConf:\nurlpatterns += [\n\t...\n\tre_path(r'^module\/(?P<format>(html|json|xml))?\/?$', views.modules, name='modules'),\n]\nView:\ndef modules(request, format='html'):\n\t...\n\treturn render(...)\nWith Django 3.0, this is now producing an error:\nTraceback (most recent call last):\n File \"\/l10n\/venv\/lib\/python3.6\/site-packages\/django\/core\/handlers\/exception.py\", line 34, in inner\n\tresponse = get_response(request)\n File \"\/l10n\/venv\/lib\/python3.6\/site-packages\/django\/core\/handlers\/base.py\", line 115, in _get_response\n\tresponse = self.process_exception_by_middleware(e, request)\n File \"\/l10n\/venv\/lib\/python3.6\/site-packages\/django\/core\/handlers\/base.py\", line 113, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\nException Type: TypeError at \/module\/\nException Value: modules() takes from 1 to 2 positional arguments but 3 were given\n","graph_file":"django#django#5d674eac871a306405b0fbbaeb17bbeba9c68bf3.graph.json"},"32":{"idx":32,"repo":"django\/django","instance_id":"django__django-12284","base_commit":"c5e373d48cbdd923575956fed477b63d66d9603f","problem_statement":"Model.get_FOO_display() does not work correctly with inherited choices.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nGiven a base model with choices A containing 3 tuples\nChild Model inherits the base model overrides the choices A and adds 2 more tuples\nget_foo_display does not work correctly for the new tuples added\nExample:\nclass A(models.Model):\n foo_choice = [(\"A\",\"output1\"),(\"B\",\"output2\")]\n field_foo = models.CharField(max_length=254,choices=foo_choice)\n class Meta:\n\t abstract = True\nclass B(A):\n foo_choice = [(\"A\",\"output1\"),(\"B\",\"output2\"),(\"C\",\"output3\")]\n field_foo = models.CharField(max_length=254,choices=foo_choice)\nUpon invoking get_field_foo_display() on instance of B , \nFor value \"A\" and \"B\" the output works correctly i.e. returns \"output1\" \/ \"output2\"\nbut for value \"C\" the method returns \"C\" and not \"output3\" which is the expected behaviour\n","graph_file":"django#django#c5e373d48cbdd923575956fed477b63d66d9603f.graph.json"},"33":{"idx":33,"repo":"django\/django","instance_id":"django__django-12286","base_commit":"979f61abd322507aafced9627702362e541ec34e","problem_statement":"translation.E004 shouldn't be raised on sublanguages when a base language is available.\nDescription\n\t\nAccording to Django documentation:\nIf a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies de-at (Austrian German) but Django only has de available, Django uses de.\nHowever, when using Django 3.0.2, if my settings.py has\nLANGUAGE_CODE = \"de-at\"\nI get this error message:\nSystemCheckError: System check identified some issues:\nERRORS:\n?: (translation.E004) You have provided a value for the LANGUAGE_CODE setting that is not in the LANGUAGES setting.\nIf using\nLANGUAGE_CODE = \"es-ar\"\nDjango works fine (es-ar is one of the translations provided out of the box).\n","graph_file":"django#django#979f61abd322507aafced9627702362e541ec34e.graph.json"},"34":{"idx":34,"repo":"django\/django","instance_id":"django__django-12308","base_commit":"2e0f04507b17362239ba49830d26fec504d46978","problem_statement":"JSONField are not properly displayed in admin when they are readonly.\nDescription\n\t\nJSONField values are displayed as dict when readonly in the admin.\nFor example, {\"foo\": \"bar\"} would be displayed as {'foo': 'bar'}, which is not valid JSON.\nI believe the fix would be to add a special case in django.contrib.admin.utils.display_for_field to call the prepare_value of the JSONField (not calling json.dumps directly to take care of the InvalidJSONInput case).\n","graph_file":"django#django#2e0f04507b17362239ba49830d26fec504d46978.graph.json"},"35":{"idx":35,"repo":"django\/django","instance_id":"django__django-12453","base_commit":"b330b918e979ea39a21d47b61172d112caf432c3","problem_statement":"`TransactionTestCase.serialized_rollback` fails to restore objects due to ordering constraints\nDescription\n\t\nI hit this problem in a fairly complex projet and haven't had the time to write a minimal reproduction case. I think it can be understood just by inspecting the code so I'm going to describe it while I have it in mind.\nSetting serialized_rollback = True on a TransactionTestCase triggers \u200brollback emulation. In practice, for each database:\nBaseDatabaseCreation.create_test_db calls connection._test_serialized_contents = connection.creation.serialize_db_to_string()\nTransactionTestCase._fixture_setup calls connection.creation.deserialize_db_from_string(connection._test_serialized_contents)\n(The actual code isn't written that way; it's equivalent but the symmetry is less visible.)\nserialize_db_to_string orders models with serializers.sort_dependencies and serializes them. The sorting algorithm only deals with natural keys. It doesn't do anything to order models referenced by foreign keys before models containing said foreign keys. That wouldn't be possible in general because circular foreign keys are allowed.\ndeserialize_db_from_string deserializes and saves models without wrapping in a transaction. This can result in integrity errors if an instance containing a foreign key is saved before the instance it references. I'm suggesting to fix it as follows:\ndiff --git a\/django\/db\/backends\/base\/creation.py b\/django\/db\/backends\/base\/creation.py\nindex bca8376..7bed2be 100644\n--- a\/django\/db\/backends\/base\/creation.py\n+++ b\/django\/db\/backends\/base\/creation.py\n@@ -4,7 +4,7 @@ import time\n from django.apps import apps\n from django.conf import settings\n from django.core import serializers\n-from django.db import router\n+from django.db import router, transaction\n from django.utils.six import StringIO\n from django.utils.six.moves import input\n \n@@ -128,8 +128,9 @@ class BaseDatabaseCreation(object):\n\t\t the serialize_db_to_string method.\n\t\t \"\"\"\n\t\t data = StringIO(data)\n-\t\tfor obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n-\t\t\tobj.save()\n+\t\twith transaction.atomic(using=self.connection.alias):\n+\t\t\tfor obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n+\t\t\t\tobj.save()\n \n\t def _get_database_display_str(self, verbosity, database_name):\n\t\t \"\"\"\nNote that loaddata doesn't have this problem because it wraps everything in a transaction:\n\tdef handle(self, *fixture_labels, **options):\n\t\t# ...\n\t\twith transaction.atomic(using=self.using):\n\t\t\tself.loaddata(fixture_labels)\n\t\t# ...\nThis suggest that the transaction was just forgotten in the implementation of deserialize_db_from_string.\nIt should be possible to write a deterministic test for this bug because the order in which serialize_db_to_string serializes models depends on the app registry, and the app registry uses OrderedDict to store apps and models in a deterministic order.\n","graph_file":"django#django#b330b918e979ea39a21d47b61172d112caf432c3.graph.json"},"36":{"idx":36,"repo":"django\/django","instance_id":"django__django-12470","base_commit":"142ab6846ac09d6d401e26fc8b6b988a583ac0f5","problem_statement":"Inherited model doesn't correctly order by \"-pk\" when specified on Parent.Meta.ordering\nDescription\n\t\nGiven the following model definition:\nfrom django.db import models\nclass Parent(models.Model):\n\tclass Meta:\n\t\tordering = [\"-pk\"]\nclass Child(Parent):\n\tpass\nQuerying the Child class results in the following:\n>>> print(Child.objects.all().query)\nSELECT \"myapp_parent\".\"id\", \"myapp_child\".\"parent_ptr_id\" FROM \"myapp_child\" INNER JOIN \"myapp_parent\" ON (\"myapp_child\".\"parent_ptr_id\" = \"myapp_parent\".\"id\") ORDER BY \"myapp_parent\".\"id\" ASC\nThe query is ordered ASC but I expect the order to be DESC.\n","graph_file":"django#django#142ab6846ac09d6d401e26fc8b6b988a583ac0f5.graph.json"},"37":{"idx":37,"repo":"django\/django","instance_id":"django__django-12497","base_commit":"a4881f5e5d7ee38b7e83301331a0b4962845ef8a","problem_statement":"Wrong hint about recursive relationship.\nDescription\n\t \n\t\t(last modified by Matheus Cunha Motta)\n\t \nWhen there's more than 2 ForeignKeys in an intermediary model of a m2m field and no through_fields have been set, Django will show an error with the following hint:\nhint=(\n\t'If you want to create a recursive relationship, '\n\t'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\nBut 'symmetrical' and 'through' are m2m keyword arguments, not ForeignKey.\nThis was probably a small mistake where the developer thought ManyToManyField but typed ForeignKey instead. And the symmetrical=False is an outdated requirement to recursive relationships with intermediary model to self, not required since 3.0. I'll provide a PR with a proposed correction shortly after.\nEdit: fixed description.\n","graph_file":"django#django#a4881f5e5d7ee38b7e83301331a0b4962845ef8a.graph.json"},"38":{"idx":38,"repo":"django\/django","instance_id":"django__django-12589","base_commit":"895f28f9cbed817c00ab68770433170d83132d90","problem_statement":"Django 3.0: \"GROUP BY\" clauses error with tricky field annotation\nDescription\n\t\nLet's pretend that we have next model structure with next model's relations:\nclass A(models.Model):\n\tbs = models.ManyToManyField('B',\n\t\t\t\t\t\t\t\trelated_name=\"a\",\n\t\t\t\t\t\t\t\tthrough=\"AB\")\nclass B(models.Model):\n\tpass\nclass AB(models.Model):\n\ta = models.ForeignKey(A, on_delete=models.CASCADE, related_name=\"ab_a\")\n\tb = models.ForeignKey(B, on_delete=models.CASCADE, related_name=\"ab_b\")\n\tstatus = models.IntegerField()\nclass C(models.Model):\n\ta = models.ForeignKey(\n\t\tA,\n\t\tnull=True,\n\t\tblank=True,\n\t\ton_delete=models.SET_NULL,\n\t\trelated_name=\"c\",\n\t\tverbose_name=_(\"a\")\n\t)\n\tstatus = models.IntegerField()\nLet's try to evaluate next query\nab_query = AB.objects.filter(a=OuterRef(\"pk\"), b=1)\nfilter_conditions = Q(pk=1) | Q(ab_a__b=1)\nquery = A.objects.\\\n\tfilter(filter_conditions).\\\n\tannotate(\n\t\tstatus=Subquery(ab_query.values(\"status\")),\n\t\tc_count=Count(\"c\"),\n)\nanswer = query.values(\"status\").annotate(total_count=Count(\"status\"))\nprint(answer.query)\nprint(answer)\nOn Django 3.0.4 we have an error\ndjango.db.utils.ProgrammingError: column reference \"status\" is ambiguous\nand query is next:\nSELECT (SELECT U0.\"status\" FROM \"test_app_ab\" U0 WHERE (U0.\"a_id\" = \"test_app_a\".\"id\" AND U0.\"b_id\" = 1)) AS \"status\", COUNT((SELECT U0.\"status\" FROM \"test_app_ab\" U0 WHERE (U0.\"a_id\" = \"test_app_a\".\"id\" AND U0.\"b_id\" = 1))) AS \"total_count\" FROM \"test_app_a\" LEFT OUTER JOIN \"test_app_ab\" ON (\"test_app_a\".\"id\" = \"test_app_ab\".\"a_id\") LEFT OUTER JOIN \"test_app_c\" ON (\"test_app_a\".\"id\" = \"test_app_c\".\"a_id\") WHERE (\"test_app_a\".\"id\" = 1 OR \"test_app_ab\".\"b_id\" = 1) GROUP BY \"status\"\nHowever, Django 2.2.11 processed this query properly with the next query:\nSELECT (SELECT U0.\"status\" FROM \"test_app_ab\" U0 WHERE (U0.\"a_id\" = (\"test_app_a\".\"id\") AND U0.\"b_id\" = 1)) AS \"status\", COUNT((SELECT U0.\"status\" FROM \"test_app_ab\" U0 WHERE (U0.\"a_id\" = (\"test_app_a\".\"id\") AND U0.\"b_id\" = 1))) AS \"total_count\" FROM \"test_app_a\" LEFT OUTER JOIN \"test_app_ab\" ON (\"test_app_a\".\"id\" = \"test_app_ab\".\"a_id\") LEFT OUTER JOIN \"test_app_c\" ON (\"test_app_a\".\"id\" = \"test_app_c\".\"a_id\") WHERE (\"test_app_a\".\"id\" = 1 OR \"test_app_ab\".\"b_id\" = 1) GROUP BY (SELECT U0.\"status\" FROM \"test_app_ab\" U0 WHERE (U0.\"a_id\" = (\"test_app_a\".\"id\") AND U0.\"b_id\" = 1))\nso, the difference in \"GROUP BY\" clauses\n(as DB provider uses \"django.db.backends.postgresql\", postgresql 11)\n","graph_file":"django#django#895f28f9cbed817c00ab68770433170d83132d90.graph.json"},"39":{"idx":39,"repo":"django\/django","instance_id":"django__django-12700","base_commit":"d51c50d836c5cf8db5566da17963f871be554615","problem_statement":"Settings are cleaned insufficiently.\nDescription\n\t\nPosting publicly after checking with the rest of the security team.\nI just ran into a case where django.views.debug.SafeExceptionReporterFilter.get_safe_settings() would return several un-cleansed values. Looking at cleanse_setting() I realized that we \u200bonly take care of `dict`s but don't take other types of iterables into account but \u200breturn them as-is.\nExample:\nIn my settings.py I have this:\nMY_SETTING = {\n\t\"foo\": \"value\",\n\t\"secret\": \"value\",\n\t\"token\": \"value\",\n\t\"something\": [\n\t\t{\"foo\": \"value\"},\n\t\t{\"secret\": \"value\"},\n\t\t{\"token\": \"value\"},\n\t],\n\t\"else\": [\n\t\t[\n\t\t\t{\"foo\": \"value\"},\n\t\t\t{\"secret\": \"value\"},\n\t\t\t{\"token\": \"value\"},\n\t\t],\n\t\t[\n\t\t\t{\"foo\": \"value\"},\n\t\t\t{\"secret\": \"value\"},\n\t\t\t{\"token\": \"value\"},\n\t\t],\n\t]\n}\nOn Django 3.0 and below:\n>>> import pprint\n>>> from django.views.debug import get_safe_settings\n>>> pprint.pprint(get_safe_settings()[\"MY_SETTING\"])\n{'else': [[{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n\t\t [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}]],\n 'foo': 'value',\n 'secret': '********************',\n 'something': [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n 'token': '********************'}\nOn Django 3.1 and up:\n>>> from django.views.debug import SafeExceptionReporterFilter\n>>> import pprint\n>>> pprint.pprint(SafeExceptionReporterFilter().get_safe_settings()[\"MY_SETTING\"])\n{'else': [[{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n\t\t [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}]],\n 'foo': 'value',\n 'secret': '********************',\n 'something': [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n 'token': '********************'}\n","graph_file":"django#django#d51c50d836c5cf8db5566da17963f871be554615.graph.json"},"40":{"idx":40,"repo":"django\/django","instance_id":"django__django-12708","base_commit":"447980e72ac01da1594dd3373a03ba40b7ee6f80","problem_statement":"Migration crashes deleting an index_together if there is a unique_together on the same fields\nDescription\n\t\nHappens with Django 1.11.10\nSteps to reproduce:\n1) Create models with 2 fields, add 2 same fields to unique_together and to index_together\n2) Delete index_together -> Fail\nIt will fail at django\/db\/backends\/base\/schema.py, line 378, in _delete_composed_index(), ValueError: Found wrong number (2) of constraints for as this one will find two constraints, the _uniq and the _idx one. No way to get out of this...\nThe worst in my case is that happened as I wanted to refactor my code to use the \"new\" (Dj 1.11) Options.indexes feature. I am actually not deleting the index, just the way it is declared in my code.\nI think there are 2 different points here:\n1) The deletion of index_together should be possible alone or made coherent (migrations side?) with unique_together\n2) Moving the declaration of an index should not result in an index re-creation\n","graph_file":"django#django#447980e72ac01da1594dd3373a03ba40b7ee6f80.graph.json"},"41":{"idx":41,"repo":"django\/django","instance_id":"django__django-12747","base_commit":"c86201b6ed4f8256b0a0520c08aa674f623d4127","problem_statement":"QuerySet.Delete - inconsistent result when zero objects deleted\nDescription\n\t\nThe result format of the QuerySet.Delete method is a tuple: (X, Y) \nX - is the total amount of deleted objects (including foreign key deleted objects)\nY - is a dictionary specifying counters of deleted objects for each specific model (the key is the _meta.label of the model and the value is counter of deleted objects of this model).\nExample: <class 'tuple'>: (2, {'my_app.FileAccess': 1, 'my_app.File': 1})\nWhen there are zero objects to delete in total - the result is inconsistent:\nFor models with foreign keys - the result will be: <class 'tuple'>: (0, {})\nFor \"simple\" models without foreign key - the result will be: <class 'tuple'>: (0, {'my_app.BlockLibrary': 0})\nI would expect there will be no difference between the two cases: Either both will have the empty dictionary OR both will have dictionary with model-label keys and zero value.\n","graph_file":"django#django#c86201b6ed4f8256b0a0520c08aa674f623d4127.graph.json"},"42":{"idx":42,"repo":"django\/django","instance_id":"django__django-12856","base_commit":"8328811f048fed0dd22573224def8c65410c9f2e","problem_statement":"Add check for fields of UniqueConstraints.\nDescription\n\t \n\t\t(last modified by Marnanel Thurman)\n\t \nWhen a model gains a UniqueConstraint, makemigrations doesn't check that the fields named therein actually exist.\nThis is in contrast to the older unique_together syntax, which raises models.E012 if the fields don't exist.\nIn the attached demonstration, you'll need to uncomment \"with_unique_together\" in settings.py in order to show that unique_together raises E012.\n","graph_file":"django#django#8328811f048fed0dd22573224def8c65410c9f2e.graph.json"},"43":{"idx":43,"repo":"django\/django","instance_id":"django__django-12908","base_commit":"49ae7ce50a874f8a04cd910882fb9571ff3a0d7a","problem_statement":"Union queryset should raise on distinct().\nDescription\n\t \n\t\t(last modified by Sielc Technologies)\n\t \nAfter using\n.annotate() on 2 different querysets\nand then .union()\n.distinct() will not affect the queryset\n\tdef setUp(self) -> None:\n\t\tuser = self.get_or_create_admin_user()\n\t\tSample.h.create(user, name=\"Sam1\")\n\t\tSample.h.create(user, name=\"Sam2 acid\")\n\t\tSample.h.create(user, name=\"Sam3\")\n\t\tSample.h.create(user, name=\"Sam4 acid\")\n\t\tSample.h.create(user, name=\"Dub\")\n\t\tSample.h.create(user, name=\"Dub\")\n\t\tSample.h.create(user, name=\"Dub\")\n\t\tself.user = user\n\tdef test_union_annotated_diff_distinct(self):\n\t\tqs = Sample.objects.filter(user=self.user)\n\t\tqs1 = qs.filter(name='Dub').annotate(rank=Value(0, IntegerField()))\n\t\tqs2 = qs.filter(name='Sam1').annotate(rank=Value(1, IntegerField()))\n\t\tqs = qs1.union(qs2)\n\t\tqs = qs.order_by('name').distinct('name') # THIS DISTINCT DOESN'T WORK\n\t\tself.assertEqual(qs.count(), 2)\nexpected to get wrapped union\n\tSELECT DISTINCT ON (siebox_sample.name) * FROM (SELECT ... UNION SELECT ...) AS siebox_sample\n","graph_file":"django#django#49ae7ce50a874f8a04cd910882fb9571ff3a0d7a.graph.json"},"44":{"idx":44,"repo":"django\/django","instance_id":"django__django-12915","base_commit":"4652f1f0aa459a7b980441d629648707c32e36bf","problem_statement":"Add get_response_async for ASGIStaticFilesHandler\nDescription\n\t\nIt looks like the StaticFilesHandlerMixin is missing the the async response function.\nWithout this, when trying to use the ASGIStaticFilesHandler, this is the traceback:\nException inside application: 'NoneType' object is not callable\nTraceback (most recent call last):\n File \"...\/lib\/python3.7\/site-packages\/daphne\/cli.py\", line 30, in asgi\n\tawait self.app(scope, receive, send)\n File \"...\/src\/django\/django\/contrib\/staticfiles\/handlers.py\", line 86, in __call__\n\treturn await super().__call__(scope, receive, send)\n File \"...\/src\/django\/django\/core\/handlers\/asgi.py\", line 161, in __call__\n\tresponse = await self.get_response_async(request)\n File \"...\/src\/django\/django\/core\/handlers\/base.py\", line 148, in get_response_async\n\tresponse = await self._middleware_chain(request)\nTypeError: 'NoneType' object is not callable\n","graph_file":"django#django#4652f1f0aa459a7b980441d629648707c32e36bf.graph.json"},"45":{"idx":45,"repo":"django\/django","instance_id":"django__django-12983","base_commit":"3bc4240d979812bd11365ede04c028ea13fdc8c6","problem_statement":"Make django.utils.text.slugify() strip dashes and underscores\nDescription\n\t \n\t\t(last modified by Elinaldo do Nascimento Monteiro)\n\t \nBug generation slug\nExample:\nfrom django.utils import text\ntext.slugify(\"___This is a test ---\")\noutput: ___this-is-a-test-\nImprovement after correction\nfrom django.utils import text\ntext.slugify(\"___This is a test ---\")\noutput: this-is-a-test\n\u200bPR\n","graph_file":"django#django#3bc4240d979812bd11365ede04c028ea13fdc8c6.graph.json"},"46":{"idx":46,"repo":"django\/django","instance_id":"django__django-13028","base_commit":"78ad4b4b0201003792bfdbf1a7781cbc9ee03539","problem_statement":"Queryset raises NotSupportedError when RHS has filterable=False attribute.\nDescription\n\t \n\t\t(last modified by Nicolas Baccelli)\n\t \nI'm migrating my app to django 3.0.7 and I hit a strange behavior using a model class with a field labeled filterable\nclass ProductMetaDataType(models.Model):\n\tlabel = models.CharField(max_length=255, unique=True, blank=False, null=False)\n\tfilterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data type\")\n\t\tverbose_name_plural = _(\"product meta data types\")\n\tdef __str__(self):\n\t\treturn self.label\nclass ProductMetaData(models.Model):\n\tid = models.BigAutoField(primary_key=True)\n\tproduct = models.ForeignKey(\n\t\tProduit, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tvalue = models.TextField(null=False, blank=False)\n\tmarketplace = models.ForeignKey(\n\t\tPlateforme, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tdate_created = models.DateTimeField(null=True, default=timezone.now)\n\tmetadata_type = models.ForeignKey(\n\t\tProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data\")\n\t\tverbose_name_plural = _(\"product meta datas\")\nError happened when filtering ProductMetaData with a metadata_type :\nProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\nError traceback :\nTraceback (most recent call last):\n File \"\/backoffice\/backoffice\/adminpricing\/tests\/test_pw.py\", line 481, in test_checkpolicywarning_by_fields\n\tfor p in ProductMetaData.objects.filter(\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/query.py\", line 904, in filter\n\treturn self._filter_or_exclude(False, *args, **kwargs)\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/query.py\", line 923, in _filter_or_exclude\n\tclone.query.add_q(Q(*args, **kwargs))\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/sql\/query.py\", line 1351, in add_q\n\tclause, _ = self._add_q(q_object, self.used_aliases)\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/sql\/query.py\", line 1378, in _add_q\n\tchild_clause, needed_inner = self.build_filter(\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/sql\/query.py\", line 1264, in build_filter\n\tself.check_filterable(value)\n File \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/db\/models\/sql\/query.py\", line 1131, in check_filterable\n\traise NotSupportedError(\ndjango.db.utils.NotSupportedError: ProductMetaDataType is disallowed in the filter clause.\nI changed label to filterable_test and it fixed this issue\nThis should be documented or fix.\n","graph_file":"django#django#78ad4b4b0201003792bfdbf1a7781cbc9ee03539.graph.json"},"47":{"idx":47,"repo":"django\/django","instance_id":"django__django-13033","base_commit":"a59de6e89e8dc1f3e71c9a5a5bbceb373ea5247e","problem_statement":"Self referencing foreign key doesn't correctly order by a relation \"_id\" field.\nDescription\n\t\nInitially discovered on 2.2.10 but verified still happens on 3.0.6. Given the following models:\nclass OneModel(models.Model):\n\tclass Meta:\n\t\tordering = (\"-id\",)\n\tid = models.BigAutoField(primary_key=True)\n\troot = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n\toneval = models.BigIntegerField(null=True)\nclass TwoModel(models.Model):\n\tid = models.BigAutoField(primary_key=True)\n\trecord = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n\ttwoval = models.BigIntegerField(null=True)\nThe following queryset gives unexpected results and appears to be an incorrect SQL query:\nqs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\nqs = qs.order_by(\"record__root_id\")\nprint(qs.query)\nSELECT \"orion_twomodel\".\"id\", \"orion_twomodel\".\"record_id\", \"orion_twomodel\".\"twoval\" FROM \"orion_twomodel\" INNER JOIN \"orion_onemodel\" ON (\"orion_twomodel\".\"record_id\" = \"orion_onemodel\".\"id\") LEFT OUTER JOIN \"orion_onemodel\" T3 ON (\"orion_onemodel\".\"root_id\" = T3.\"id\") WHERE \"orion_onemodel\".\"oneval\" IN (1, 2, 3) ORDER BY T3.\"id\" DESC\nThe query has an unexpected DESCENDING sort. That appears to come from the default sort order on the OneModel class, but I would expect the order_by() to take prececence. The the query has two JOINS, which is unnecessary. It appears that, since OneModel.root is a foreign key to itself, that is causing it to do the unnecessary extra join. In fact, testing a model where root is a foreign key to a third model doesn't show the problem behavior.\nNote also that the queryset with order_by(\"record__root\") gives the exact same SQL.\nThis queryset gives correct results and what looks like a pretty optimal SQL:\nqs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\nqs = qs.order_by(\"record__root__id\")\nprint(qs.query)\nSELECT \"orion_twomodel\".\"id\", \"orion_twomodel\".\"record_id\", \"orion_twomodel\".\"twoval\" FROM \"orion_twomodel\" INNER JOIN \"orion_onemodel\" ON (\"orion_twomodel\".\"record_id\" = \"orion_onemodel\".\"id\") WHERE \"orion_onemodel\".\"oneval\" IN (1, 2, 3) ORDER BY \"orion_onemodel\".\"root_id\" ASC\nSo is this a potential bug or a misunderstanding on my part?\nAnother queryset that works around the issue and gives a reasonable SQL query and expected results:\nqs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\nqs = qs.annotate(root_id=F(\"record__root_id\"))\nqs = qs.order_by(\"root_id\")\nprint(qs.query)\nSELECT \"orion_twomodel\".\"id\", \"orion_twomodel\".\"record_id\", \"orion_twomodel\".\"twoval\" FROM \"orion_twomodel\" INNER JOIN \"orion_onemodel\" ON (\"orion_twomodel\".\"record_id\" = \"orion_onemodel\".\"id\") WHERE \"orion_onemodel\".\"oneval\" IN (1, 2, 3) ORDER BY \"orion_onemodel\".\"zero_id\" ASC\nASCENDING sort, and a single INNER JOIN, as I'd expect. That actually works for my use because I need that output column anyway.\nOne final oddity; with the original queryset but the inverted sort order_by():\nqs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\nqs = qs.order_by(\"-record__root_id\")\nprint(qs.query)\nSELECT \"orion_twomodel\".\"id\", \"orion_twomodel\".\"record_id\", \"orion_twomodel\".\"twoval\" FROM \"orion_twomodel\" INNER JOIN \"orion_onemodel\" ON (\"orion_twomodel\".\"record_id\" = \"orion_onemodel\".\"id\") LEFT OUTER JOIN \"orion_onemodel\" T3 ON (\"orion_onemodel\".\"root_id\" = T3.\"id\") WHERE \"orion_onemodel\".\"oneval\" IN (1, 2, 3) ORDER BY T3.\"id\" ASC\nOne gets the query with the two JOINs but an ASCENDING sort order. I was not under the impression that sort orders are somehow relative to the class level sort order, eg: does specifing order_by(\"-record__root_id\") invert the class sort order? Testing that on a simple case doesn't show that behavior at all.\nThanks for any assistance and clarification.\n","graph_file":"django#django#a59de6e89e8dc1f3e71c9a5a5bbceb373ea5247e.graph.json"},"48":{"idx":48,"repo":"django\/django","instance_id":"django__django-13158","base_commit":"7af8f4127397279d19ef7c7899e93018274e2f9b","problem_statement":"QuerySet.none() on combined queries returns all results.\nDescription\n\t\nI came across this issue on Stack Overflow. I'm not 100% sure it's a bug, but it does seem strange. With this code (excuse the bizarre example filtering):\nclass Publication(models.Model):\n\tpass\nclass Article(models.Model):\n\tpublications = models.ManyToManyField(to=Publication, blank=True, null=True)\nclass ArticleForm(forms.ModelForm):\n\tpublications = forms.ModelMultipleChoiceField(\n\t\tPublication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),\n\t\trequired=False,\n\t)\n\tclass Meta:\n\t\tmodel = Article\n\t\tfields = [\"publications\"]\nclass ArticleAdmin(admin.ModelAdmin):\n\tform = ArticleForm\nThis works well. However, changing the ModelMultipleChoiceField queryset to use union() breaks things.\npublications = forms.ModelMultipleChoiceField(\n\tPublication.objects.filter(id__lt=2).union(\n\t\tPublication.objects.filter(id__gt=5)\n\t),\n\trequired=False,\n)\nThe form correctly shows only the matching objects. However, if you submit this form while empty (i.e. you didn't select any publications), ALL objects matching the queryset will be added. Using the OR query, NO objects are added, as I'd expect.\n","graph_file":"django#django#7af8f4127397279d19ef7c7899e93018274e2f9b.graph.json"},"49":{"idx":49,"repo":"django\/django","instance_id":"django__django-13220","base_commit":"16218c20606d8cd89c5393970c83da04598a3e04","problem_statement":"Allow ValidationErrors to equal each other when created identically\nDescription\n\t \n\t\t(last modified by kamni)\n\t \nCurrently ValidationErrors (django.core.exceptions.ValidationError) that have identical messages don't equal each other, which is counter-intuitive, and can make certain kinds of testing more complicated. Please add an __eq__ method that allows two ValidationErrors to be compared. \nIdeally, this would be more than just a simple self.messages == other.messages. It would be most helpful if the comparison were independent of the order in which errors were raised in a field or in non_field_errors.\n","graph_file":"django#django#16218c20606d8cd89c5393970c83da04598a3e04.graph.json"},"50":{"idx":50,"repo":"django\/django","instance_id":"django__django-13230","base_commit":"184a6eebb0ef56d5f1b1315a8e666830e37f3f81","problem_statement":"Add support for item_comments to syndication framework\nDescription\n\t\nAdd comments argument to feed.add_item() in syndication.views so that item_comments can be defined directly without having to take the detour via item_extra_kwargs .\nAdditionally, comments is already explicitly mentioned in the feedparser, but not implemented in the view.\n","graph_file":"django#django#184a6eebb0ef56d5f1b1315a8e666830e37f3f81.graph.json"},"51":{"idx":51,"repo":"django\/django","instance_id":"django__django-13265","base_commit":"b2b0711b555fa292751763c2df4fe577c396f265","problem_statement":"AlterOrderWithRespectTo() with ForeignKey crash when _order is included in Index().\nDescription\n\t\n\tclass Meta:\n\t\tdb_table = 'look_image'\n\t\torder_with_respect_to = 'look'\n\t\tindexes = [\n\t\t\tmodels.Index(fields=['look', '_order']),\n\t\t\tmodels.Index(fields=['created_at']),\n\t\t\tmodels.Index(fields=['updated_at']),\n\t\t]\nmigrations.CreateModel(\n\t\t\tname='LookImage',\n\t\t\tfields=[\n\t\t\t\t('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t\t\t('look', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='posts.Look', verbose_name='LOOK')),\n\t\t\t\t('image_url', models.URLField(blank=True, max_length=10000, null=True)),\n\t\t\t\t('image', models.ImageField(max_length=2000, upload_to='')),\n\t\t\t\t('deleted', models.DateTimeField(editable=False, null=True)),\n\t\t\t\t('created_at', models.DateTimeField(auto_now_add=True)),\n\t\t\t\t('updated_at', models.DateTimeField(auto_now=True)),\n\t\t\t],\n\t\t),\n\t\tmigrations.AddIndex(\n\t\t\tmodel_name='lookimage',\n\t\t\tindex=models.Index(fields=['look', '_order'], name='look_image_look_id_eaff30_idx'),\n\t\t),\n\t\tmigrations.AddIndex(\n\t\t\tmodel_name='lookimage',\n\t\t\tindex=models.Index(fields=['created_at'], name='look_image_created_f746cf_idx'),\n\t\t),\n\t\tmigrations.AddIndex(\n\t\t\tmodel_name='lookimage',\n\t\t\tindex=models.Index(fields=['updated_at'], name='look_image_updated_aceaf9_idx'),\n\t\t),\n\t\tmigrations.AlterOrderWithRespectTo(\n\t\t\tname='lookimage',\n\t\t\torder_with_respect_to='look',\n\t\t),\nI added orders_with_respect_to in new model class's Meta class and also made index for '_order' field by combining with other field. And a new migration file based on the model looks like the code above.\nThe problem is operation AlterOrderWithRespectTo after AddIndex of '_order' raising error because '_order' field had not been created yet.\nIt seems to be AlterOrderWithRespectTo has to proceed before AddIndex of '_order'.\n","graph_file":"django#django#b2b0711b555fa292751763c2df4fe577c396f265.graph.json"},"52":{"idx":52,"repo":"django\/django","instance_id":"django__django-13315","base_commit":"36bc47069ce071e80c8129500de3b8664d2058a7","problem_statement":"limit_choices_to on a ForeignKey can render duplicate options in formfield\nDescription\n\t\nIf you pass a Q object as limit_choices_to on a ForeignKey field involving a join, you may end up with duplicate options in your form.\nSee regressiontest in patch for a clear view on the problem.\n","graph_file":"django#django#36bc47069ce071e80c8129500de3b8664d2058a7.graph.json"},"53":{"idx":53,"repo":"django\/django","instance_id":"django__django-13321","base_commit":"35b03788b0607c1f8d2b64e4fa9e1669b0907ea4","problem_statement":"Decoding an invalid session data crashes.\nDescription\n\t \n\t\t(last modified by Matt Hegarty)\n\t \nHi\nI recently upgraded my staging server to 3.1. I think that there was an old session which was still active.\nOn browsing to any URL, I get the crash below. It looks similar to \u200bthis issue.\nI cannot login at all with Chrome - each attempt to access the site results in a crash. Login with Firefox works fine.\nThis is only happening on my Staging site, which is running Gunicorn behind nginx proxy.\nInternal Server Error: \/overview\/\nTraceback (most recent call last):\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/base.py\", line 215, in _get_session\nreturn self._session_cache\nAttributeError: 'SessionStore' object has no attribute '_session_cache'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/base.py\", line 118, in decode\nreturn signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/core\/signing.py\", line 135, in loads\nbase64d = TimestampSigner(key, salt=salt).unsign(s, max_age=max_age).encode()\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/core\/signing.py\", line 201, in unsign\nresult = super().unsign(value)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/core\/signing.py\", line 184, in unsign\nraise BadSignature('Signature \"%s\" does not match' % sig)\ndjango.core.signing.BadSignature: Signature \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" does not match\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/core\/handlers\/exception.py\", line 47, in inner\nresponse = get_response(request)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/core\/handlers\/base.py\", line 179, in _get_response\nresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/views\/generic\/base.py\", line 73, in view\nreturn self.dispatch(request, *args, **kwargs)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/auth\/mixins.py\", line 50, in dispatch\nif not request.user.is_authenticated:\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/utils\/functional.py\", line 240, in inner\nself._setup()\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/utils\/functional.py\", line 376, in _setup\nself._wrapped = self._setupfunc()\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django_otp\/middleware.py\", line 38, in _verify_user\nuser.otp_device = None\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/utils\/functional.py\", line 270, in __setattr__\nself._setup()\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/utils\/functional.py\", line 376, in _setup\nself._wrapped = self._setupfunc()\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/auth\/middleware.py\", line 23, in <lambda>\nrequest.user = SimpleLazyObject(lambda: get_user(request))\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/auth\/middleware.py\", line 11, in get_user\nrequest._cached_user = auth.get_user(request)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/auth\/__init__.py\", line 174, in get_user\nuser_id = _get_user_session_key(request)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/auth\/__init__.py\", line 58, in _get_user_session_key\nreturn get_user_model()._meta.pk.to_python(request.session[SESSION_KEY])\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/base.py\", line 65, in __getitem__\nreturn self._session[key]\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/base.py\", line 220, in _get_session\nself._session_cache = self.load()\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/db.py\", line 44, in load\nreturn self.decode(s.session_data) if s else {}\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/base.py\", line 122, in decode\nreturn self._legacy_decode(session_data)\nFile \"\/usr\/local\/lib\/python3.8\/site-packages\/django\/contrib\/sessions\/backends\/base.py\", line 126, in _legacy_decode\nencoded_data = base64.b64decode(session_data.encode('ascii'))\nFile \"\/usr\/local\/lib\/python3.8\/base64.py\", line 87, in b64decode\nreturn binascii.a2b_base64(s)\nbinascii.Error: Incorrect padding\n","graph_file":"django#django#35b03788b0607c1f8d2b64e4fa9e1669b0907ea4.graph.json"},"54":{"idx":54,"repo":"django\/django","instance_id":"django__django-13401","base_commit":"453967477e3ddae704cd739eac2449c0e13d464c","problem_statement":"Abstract model field should not be equal across models\nDescription\n\t\nConsider the following models:\nclass A(models.Model):\n\tclass Meta:\n\t\tabstract = True\n\tmyfield = IntegerField()\nclass B(A):\n\tpass\nclass C(A):\n\tpass\nIf I pull the fields of B and C into a shared set, one will be de-duplicated away, because they compare as equal. I found this surprising, though in practice using a list was sufficient for my need. The root of the issue is that they compare equal, as fields only consider self.creation_counter when comparing for equality.\nlen({B._meta.get_field('myfield'), C._meta.get_field('myfield')}) == 1\nB._meta.get_field('myfield') == C._meta.get_field('myfield')\nWe should adjust __eq__ so that if the field.model is different, they will compare unequal. Similarly, it is probably wise to adjust __hash__ and __lt__ to match.\nWhen adjusting __lt__, it may be wise to order first by self.creation_counter so that cases not affected by this equality collision won't be re-ordered. In my experimental branch, there was one test that broke if I ordered them by model first.\nI brought this up on IRC django-dev to check my intuitions, and those conversing with me there seemed to agree that the current behavior is not intuitive.\n","graph_file":"django#django#453967477e3ddae704cd739eac2449c0e13d464c.graph.json"},"55":{"idx":55,"repo":"django\/django","instance_id":"django__django-13447","base_commit":"0456d3e42795481a186db05719300691fe2a1029","problem_statement":"Added model class to app_list context\nDescription\n\t \n\t\t(last modified by Raffaele Salmaso)\n\t \nI need to manipulate the app_list in my custom admin view, and the easiest way to get the result is to have access to the model class (currently the dictionary is a serialized model).\nIn addition I would make the _build_app_dict method public, as it is used by the two views index and app_index.\n","graph_file":"django#django#0456d3e42795481a186db05719300691fe2a1029.graph.json"},"56":{"idx":56,"repo":"django\/django","instance_id":"django__django-13448","base_commit":"7b9596b974fb0ad1868b10c8c2174e10b72be403","problem_statement":"Test runner setup_databases crashes with \"TEST\": {\"MIGRATE\": False}.\nDescription\n\t\nI'm trying to upgrade a project from Django 3.0 to Django 3.1 and wanted to try out the new \"TEST\": {\"MIGRATE\": False} database setting.\nSadly I'm running into an issue immediately when running .\/manage.py test.\nRemoving the \"TEST\": {\"MIGRATE\": False} line allows the tests to run. So this is not blocking the upgrade for us, but it would be nice if we were able to use the new feature to skip migrations during testing.\nFor reference, this project was recently upgraded from Django 1.4 all the way to 3.0 so there might be some legacy cruft somewhere that triggers this.\nHere's the trackeback. I'll try to debug this some more.\nTraceback (most recent call last):\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\npsycopg2.errors.UndefinedTable: relation \"django_admin_log\" does not exist\nLINE 1: ...n_flag\", \"django_admin_log\".\"change_message\" FROM \"django_ad...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/models\/sql\/compiler.py\", line 1156, in execute_sql\n\tcursor.execute(sql, params)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/utils.py\", line 66, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/utils.py\", line 75, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: relation \"django_admin_log\" does not exist\nLINE 1: ...n_flag\", \"django_admin_log\".\"change_message\" FROM \"django_ad...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n File \".\/manage.py\", line 15, in <module>\n\tmain()\n File \".\/manage.py\", line 11, in main\n\texecute_from_command_line(sys.argv)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/management\/__init__.py\", line 401, in execute_from_command_line\n\tutility.execute()\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/management\/__init__.py\", line 395, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/test.py\", line 23, in run_from_argv\n\tsuper().run_from_argv(argv)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/management\/base.py\", line 330, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/management\/base.py\", line 371, in execute\n\toutput = self.handle(*args, **options)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/management\/commands\/test.py\", line 53, in handle\n\tfailures = test_runner.run_tests(test_labels)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/test\/runner.py\", line 695, in run_tests\n\told_config = self.setup_databases(aliases=databases)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/test\/runner.py\", line 616, in setup_databases\n\tself.parallel, **kwargs\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/test\/utils.py\", line 174, in setup_databases\n\tserialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/base\/creation.py\", line 78, in create_test_db\n\tself.connection._test_serialized_contents = self.serialize_db_to_string()\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/base\/creation.py\", line 121, in serialize_db_to_string\n\tserializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/serializers\/__init__.py\", line 128, in serialize\n\ts.serialize(queryset, **options)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/core\/serializers\/base.py\", line 90, in serialize\n\tfor count, obj in enumerate(queryset, start=1):\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/backends\/base\/creation.py\", line 118, in get_objects\n\tyield from queryset.iterator()\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/models\/query.py\", line 360, in _iterator\n\tyield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/models\/query.py\", line 53, in __iter__\n\tresults = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n File \"\/usr\/local\/lib\/python3.6\/site-packages\/django\/db\/models\/sql\/compiler.py\", line 1159, in execute_sql\n\tcursor.close()\npsycopg2.errors.InvalidCursorName: cursor \"_django_curs_139860821038912_sync_1\" does not exist\n","graph_file":"django#django#7b9596b974fb0ad1868b10c8c2174e10b72be403.graph.json"},"57":{"idx":57,"repo":"django\/django","instance_id":"django__django-13551","base_commit":"7f9e4524d6b23424cf44fbe1bf1f4e70f6bb066e","problem_statement":"Changing user's email could invalidate password reset tokens\nDescription\n\t\nSequence:\nHave account with email address foo@\u2026\nPassword reset request for that email (unused)\nfoo@\u2026 account changes their email address\nPassword reset email is used\nThe password reset email's token should be rejected at that point, but in fact it is allowed.\nThe fix is to add the user's email address into \u200bPasswordResetTokenGenerator._make_hash_value()\nNothing forces a user to even have an email as per AbstractBaseUser. Perhaps the token generation method could be factored out onto the model, ala get_session_auth_hash().\n","graph_file":"django#django#7f9e4524d6b23424cf44fbe1bf1f4e70f6bb066e.graph.json"},"58":{"idx":58,"repo":"django\/django","instance_id":"django__django-13590","base_commit":"755dbf39fcdc491fe9b588358303e259c7750be4","problem_statement":"Upgrading 2.2>3.0 causes named tuples used as arguments to __range to error.\nDescription\n\t\nI noticed this while upgrading a project from 2.2 to 3.0.\nThis project passes named 2-tuples as arguments to range queryset filters. This works fine on 2.2. On 3.0 it causes the following error: TypeError: __new__() missing 1 required positional argument: 'far'.\nThis happens because django.db.models.sql.query.Query.resolve_lookup_value goes into the tuple elements to resolve lookups and then attempts to reconstitute the tuple with the resolved elements.\nWhen it attempts to construct the new tuple it preserves the type (the named tuple) but it passes a iterator to it's constructor.\nNamedTuples don't have the code path for copying an iterator, and so it errors on insufficient arguments.\nThe fix is to * expand the contents of the iterator into the constructor.\n","graph_file":"django#django#755dbf39fcdc491fe9b588358303e259c7750be4.graph.json"},"59":{"idx":59,"repo":"django\/django","instance_id":"django__django-13658","base_commit":"0773837e15bb632afffb6848a58c59a791008fa1","problem_statement":"ManagementUtility instantiates CommandParser without passing already-computed prog argument\nDescription\n\t\nManagementUtility \u200bgoes to the trouble to parse the program name from the argv it's passed rather than from sys.argv: \n\tdef __init__(self, argv=None):\n\t\tself.argv = argv or sys.argv[:]\n\t\tself.prog_name = os.path.basename(self.argv[0])\n\t\tif self.prog_name == '__main__.py':\n\t\t\tself.prog_name = 'python -m django'\nBut then when it needs to parse --pythonpath and --settings, it \u200buses the program name from sys.argv: \n\t\tparser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\nAbove \"%(prog)s\" \u200brefers to sys.argv[0]. Instead, it should refer to self.prog_name. This can fixed as follows:\n\t\tparser = CommandParser(\n\t\t\tprog=self.prog_name,\n\t\t\tusage='%(prog)s subcommand [options] [args]',\n\t\t\tadd_help=False,\n\t\t\tallow_abbrev=False)\nI'm aware that execute_from_command_line is a private API, but it'd be really convenient for me if it worked properly in my weird embedded environment where sys.argv[0] is \u200bincorrectly None. If passing my own argv to execute_from_command_line avoided all the ensuing exceptions, I wouldn't have to modify sys.argv[0] globally as I'm doing in the meantime.\n","graph_file":"django#django#0773837e15bb632afffb6848a58c59a791008fa1.graph.json"},"60":{"idx":60,"repo":"django\/django","instance_id":"django__django-13660","base_commit":"50c3ac6fa9b7c8a94a6d1dc87edf775e3bc4d575","problem_statement":"shell command crashes when passing (with -c) the python code with functions.\nDescription\n\t\nThe examples below use Python 3.7 and Django 2.2.16, but I checked that the code is the same on master and works the same in Python 3.8.\nHere's how \u200bpython -c works:\n$ python -c <<EOF \" \nimport django\ndef f():\n\t\tprint(django.__version__)\nf()\"\nEOF\n2.2.16\nHere's how \u200bpython -m django shell -c works (paths shortened for clarify):\n$ python -m django shell -c <<EOF \"\nimport django\ndef f():\n\t\tprint(django.__version__)\nf()\"\nEOF\nTraceback (most recent call last):\n File \"{sys.base_prefix}\/lib\/python3.7\/runpy.py\", line 193, in _run_module_as_main\n\t\"__main__\", mod_spec)\n File \"{sys.base_prefix}\/lib\/python3.7\/runpy.py\", line 85, in _run_code\n\texec(code, run_globals)\n File \"{sys.prefix}\/lib\/python3.7\/site-packages\/django\/__main__.py\", line 9, in <module>\n\tmanagement.execute_from_command_line()\n File \"{sys.prefix}\/lib\/python3.7\/site-packages\/django\/core\/management\/__init__.py\", line 381, in execute_from_command_line\n\tutility.execute()\n File \"{sys.prefix}\/lib\/python3.7\/site-packages\/django\/core\/management\/__init__.py\", line 375, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"{sys.prefix}\/lib\/python3.7\/site-packages\/django\/core\/management\/base.py\", line 323, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"{sys.prefix}\/lib\/python3.7\/site-packages\/django\/core\/management\/base.py\", line 364, in execute\n\toutput = self.handle(*args, **options)\n File \"{sys.prefix}\/lib\/python3.7\/site-packages\/django\/core\/management\/commands\/shell.py\", line 86, in handle\n\texec(options['command'])\n File \"<string>\", line 5, in <module>\n File \"<string>\", line 4, in f\nNameError: name 'django' is not defined\nThe problem is in the \u200busage of \u200bexec:\n\tdef handle(self, **options):\n\t\t# Execute the command and exit.\n\t\tif options['command']:\n\t\t\texec(options['command'])\n\t\t\treturn\n\t\t# Execute stdin if it has anything to read and exit.\n\t\t# Not supported on Windows due to select.select() limitations.\n\t\tif sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n\t\t\texec(sys.stdin.read())\n\t\t\treturn\nexec should be passed a dictionary containing a minimal set of globals. This can be done by just passing a new, empty dictionary as the second argument of exec.\n","graph_file":"django#django#50c3ac6fa9b7c8a94a6d1dc87edf775e3bc4d575.graph.json"},"61":{"idx":61,"repo":"django\/django","instance_id":"django__django-13710","base_commit":"1bd6a7a0acc11e249fca11c017505ad39f15ebf6","problem_statement":"Use Admin Inline verbose_name as default for Inline verbose_name_plural\nDescription\n\t\nDjango allows specification of a verbose_name and a verbose_name_plural for Inline classes in admin views. However, verbose_name_plural for an Inline is not currently based on a specified verbose_name. Instead, it continues to be based on the model name, or an a verbose_name specified in the model's Meta class. This was confusing to me initially (I didn't understand why I had to specify both name forms for an Inline if I wanted to overrule the default name), and seems inconsistent with the approach for a model's Meta class (which does automatically base the plural form on a specified verbose_name). I propose that verbose_name_plural for an Inline class should by default be based on the verbose_name for an Inline if that is specified.\nI have written a patch to implement this, including tests. Would be happy to submit that.\n","graph_file":"django#django#1bd6a7a0acc11e249fca11c017505ad39f15ebf6.graph.json"},"62":{"idx":62,"repo":"django\/django","instance_id":"django__django-13757","base_commit":"3f140dde51c0fe6c350acb7727bbe489a99f0632","problem_statement":"Using __isnull=True on a KeyTransform should not match JSON null on SQLite and Oracle\nDescription\n\t\nThe KeyTransformIsNull lookup borrows the logic from HasKey for isnull=False, which is correct. If isnull=True, the query should only match objects that do not have the key. The query is correct for MariaDB, MySQL, and PostgreSQL. However, on SQLite and Oracle, the query also matches objects that have the key with the value null, which is incorrect.\nTo confirm, edit tests.model_fields.test_jsonfield.TestQuerying.test_isnull_key. For the first assertion, change\n\t\tself.assertSequenceEqual(\n\t\t\tNullableJSONModel.objects.filter(value__a__isnull=True),\n\t\t\tself.objs[:3] + self.objs[5:],\n\t\t)\nto\n\t\tself.assertSequenceEqual(\n\t\t\tNullableJSONModel.objects.filter(value__j__isnull=True),\n\t\t\tself.objs[:4] + self.objs[5:],\n\t\t)\nThe test previously only checks with value__a which could not catch this behavior because the value is not JSON null.\n","graph_file":"django#django#3f140dde51c0fe6c350acb7727bbe489a99f0632.graph.json"},"63":{"idx":63,"repo":"django\/django","instance_id":"django__django-13768","base_commit":"965d2d95c630939b53eb60d9c169f5dfc77ee0c6","problem_statement":"Log exceptions handled in Signal.send_robust()\nDescription\n\t\nAs pointed out by \u200bHaki Benita on Twitter, by default Signal.send_robust() doesn't have any log messages for exceptions raised in receivers. Since Django logs exceptions in other similar situations, such as missing template variables, I think it would be worth adding a logger.exception() call in the except clause of send_robust() . Users would then see such exceptions in their error handling tools, e.g. Sentry, and be able to figure out what action to take from there. Ultimately any *expected* exception should be caught with a try in the receiver function.\n","graph_file":"django#django#965d2d95c630939b53eb60d9c169f5dfc77ee0c6.graph.json"},"64":{"idx":64,"repo":"django\/django","instance_id":"django__django-13925","base_commit":"0c42cdf0d2422f4c080e93594d5d15381d6e955e","problem_statement":"models.W042 is raised on inherited manually specified primary key.\nDescription\n\t\nI have models which inherit from other models, and they should inherit the primary key. This works fine with Django 3.1. However, if I install Django 3.2 alpha, when I run make_migrations I get the following error messages:\nSystem check identified some issues:\nWARNINGS:\naccounts.ReservedUsername: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the SpeedyCoreAccountsConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\naccounts.User: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the SpeedyCoreAccountsConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nblocks.Block: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\ncontact_by_form.Feedback: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the SpeedyCoreContactByFormConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\ncore_messages.ReadMark: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the SpeedyCoreMessagesConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nfriendship.Block: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nfriendship.Follow: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nfriendship.Friend: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nfriendship.FriendshipRequest: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nlikes.UserLike: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nuploads.Image: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n\t\tHINT: Configure the DEFAULT_AUTO_FIELD setting or the AppConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\nThese models should not use auto-created primary keys! I already defined the primary key in the ancestor of the model. For example class Entity which class User inherits from. It looks to me like a bug in Django 3.2 alpha.\n","graph_file":"django#django#0c42cdf0d2422f4c080e93594d5d15381d6e955e.graph.json"},"65":{"idx":65,"repo":"django\/django","instance_id":"django__django-13933","base_commit":"42e8cf47c7ee2db238bf91197ea398126c546741","problem_statement":"ModelChoiceField does not provide value of invalid choice when raising ValidationError\nDescription\n\t \n\t\t(last modified by Aaron Wiegel)\n\t \nCompared with ChoiceField and others, ModelChoiceField does not show the value of the invalid choice when raising a validation error. Passing in parameters with the invalid value and modifying the default error message for the code invalid_choice should fix this.\nFrom source code:\nclass ModelMultipleChoiceField(ModelChoiceField):\n\t\"\"\"A MultipleChoiceField whose choices are a model QuerySet.\"\"\"\n\twidget = SelectMultiple\n\thidden_widget = MultipleHiddenInput\n\tdefault_error_messages = {\n\t\t'invalid_list': _('Enter a list of values.'),\n\t\t'invalid_choice': _('Select a valid choice. %(value)s is not one of the'\n\t\t\t\t\t\t\t' available choices.'),\n\t\t'invalid_pk_value': _('\u201c%(pk)s\u201d is not a valid value.')\n\t}\n\t...\nclass ModelChoiceField(ChoiceField):\n\t\"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n\t# This class is a subclass of ChoiceField for purity, but it doesn't\n\t# actually use any of ChoiceField's implementation.\n\tdefault_error_messages = {\n\t\t'invalid_choice': _('Select a valid choice. That choice is not one of'\n\t\t\t\t\t\t\t' the available choices.'),\n\t}\n\t...\n","graph_file":"django#django#42e8cf47c7ee2db238bf91197ea398126c546741.graph.json"},"66":{"idx":66,"repo":"django\/django","instance_id":"django__django-13964","base_commit":"f39634ff229887bf7790c069d0c411b38494ca38","problem_statement":"Saving parent object after setting on child leads to data loss for parents with non-numeric primary key.\nDescription\n\t \n\t\t(last modified by Charlie DeTar)\n\t \nGiven a model with a foreign key relation to another model that has a non-auto CharField as its primary key:\nclass Product(models.Model):\n\tsku = models.CharField(primary_key=True, max_length=50)\nclass Order(models.Model):\n\tproduct = models.ForeignKey(Product, on_delete=models.CASCADE)\nIf the relation is initialized on the parent with an empty instance that does not yet specify its primary key, and the primary key is subsequently defined, the parent does not \"see\" the primary key's change:\nwith transaction.atomic():\n\torder = Order()\n\torder.product = Product()\n\torder.product.sku = \"foo\"\n\torder.product.save()\n\torder.save()\n\tassert Order.objects.filter(product_id=\"\").exists() # Succeeds, but shouldn't\n\tassert Order.objects.filter(product=order.product).exists() # Fails\nInstead of product_id being populated with product.sku, it is set to emptystring. The foreign key constraint which would enforce the existence of a product with sku=\"\" is deferred until the transaction commits. The transaction does correctly fail on commit with a ForeignKeyViolation due to the non-existence of a product with emptystring as its primary key.\nOn the other hand, if the related unsaved instance is initialized with its primary key before assignment to the parent, it is persisted correctly:\nwith transaction.atomic():\n\torder = Order()\n\torder.product = Product(sku=\"foo\")\n\torder.product.save()\n\torder.save()\n\tassert Order.objects.filter(product=order.product).exists() # succeeds\nCommitting the transaction also succeeds.\nThis may have something to do with how the Order.product_id field is handled at assignment, together with something about handling fetching of auto vs non-auto primary keys from the related instance.\n","graph_file":"django#django#f39634ff229887bf7790c069d0c411b38494ca38.graph.json"},"67":{"idx":67,"repo":"django\/django","instance_id":"django__django-14016","base_commit":"1710cdbe79c90665046034fe1700933d038d90ad","problem_statement":"\"TypeError: cannot pickle\" when applying | operator to a Q object\nDescription\n\t \n\t\t(last modified by Daniel Izquierdo)\n\t \nUsing a reference to a non-pickleable type of object such as dict_keys in a Q object makes the | operator fail:\n>>> from django.db.models import Q\n>>> Q(x__in={}.keys())\n<Q: (AND: ('x__in', dict_keys([])))>\n>>> Q() | Q(x__in={}.keys())\nTraceback (most recent call last):\n...\nTypeError: cannot pickle 'dict_keys' object\nEven though this particular example could be solved by doing Q() | Q(x__in={}) it still feels like using .keys() should work.\nI can work on a patch if there's agreement that this should not crash.\n","graph_file":"django#django#1710cdbe79c90665046034fe1700933d038d90ad.graph.json"},"68":{"idx":68,"repo":"django\/django","instance_id":"django__django-14017","base_commit":"466920f6d726eee90d5566e0a9948e92b33a122e","problem_statement":"Q(...) & Exists(...) raises a TypeError\nDescription\n\t\nExists(...) & Q(...) works, but Q(...) & Exists(...) raise a TypeError\nHere's a minimal example:\nIn [3]: Exists(Product.objects.all()) & Q()\nOut[3]: <Q: (AND: <django.db.models.expressions.Exists object at 0x7fc18dd0ed90>, (AND: ))>\nIn [4]: Q() & Exists(Product.objects.all())\n---------------------------------------------------------------------------\nTypeError\t\t\t\t\t\t\t\t Traceback (most recent call last)\n<ipython-input-4-21d3dea0fcb9> in <module>\n----> 1 Q() & Exists(Product.objects.all())\n~\/Code\/venv\/ecom\/lib\/python3.8\/site-packages\/django\/db\/models\/query_utils.py in __and__(self, other)\n\t 90 \n\t 91\t def __and__(self, other):\n---> 92\t\t return self._combine(other, self.AND)\n\t 93 \n\t 94\t def __invert__(self):\n~\/Code\/venv\/ecom\/lib\/python3.8\/site-packages\/django\/db\/models\/query_utils.py in _combine(self, other, conn)\n\t 71\t def _combine(self, other, conn):\n\t 72\t\t if not isinstance(other, Q):\n---> 73\t\t\t raise TypeError(other)\n\t 74 \n\t 75\t\t # If the other Q() is empty, ignore it and just use `self`.\nTypeError: <django.db.models.expressions.Exists object at 0x7fc18dd21400>\nThe & (and |) operators should be commutative on Q-Exists pairs, but it's not\nI think there's a missing definition of __rand__ somewhere.\n","graph_file":"django#django#466920f6d726eee90d5566e0a9948e92b33a122e.graph.json"},"69":{"idx":69,"repo":"django\/django","instance_id":"django__django-14155","base_commit":"2f13c476abe4ba787b6cb71131818341911f43cc","problem_statement":"ResolverMatch.__repr__() doesn't handle functools.partial() nicely.\nDescription\n\t \n\t\t(last modified by Nick Pope)\n\t \nWhen a partial function is passed as the view, the __repr__ shows the func argument as functools.partial which isn't very helpful, especially as it doesn't reveal the underlying function or arguments provided.\nBecause a partial function also has arguments provided up front, we need to handle those specially so that they are accessible in __repr__.\nISTM that we can simply unwrap functools.partial objects in ResolverMatch.__init__().\n","graph_file":"django#django#2f13c476abe4ba787b6cb71131818341911f43cc.graph.json"},"70":{"idx":70,"repo":"django\/django","instance_id":"django__django-14238","base_commit":"30e123ed351317b7527f632b3b7dc4e81e850449","problem_statement":"DEFAULT_AUTO_FIELD subclass check fails for subclasses of BigAutoField and SmallAutoField.\nDescription\n\t\nSet DEFAULT_AUTO_FIELD = \"example.core.models.MyBigAutoField\" , with contents of example.core.models:\nfrom django.db import models\nclass MyBigAutoField(models.BigAutoField):\n\tpass\nclass MyModel(models.Model):\n\tpass\nDjango then crashes with:\nTraceback (most recent call last):\n File \"\/...\/.\/manage.py\", line 21, in <module>\n\tmain()\n File \"\/...\/.\/manage.py\", line 17, in main\n\texecute_from_command_line(sys.argv)\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/core\/management\/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/core\/management\/__init__.py\", line 395, in execute\n\tdjango.setup()\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/__init__.py\", line 24, in setup\n\tapps.populate(settings.INSTALLED_APPS)\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/apps\/registry.py\", line 114, in populate\n\tapp_config.import_models()\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/apps\/config.py\", line 301, in import_models\n\tself.models_module = import_module(models_module_name)\n File \"\/Users\/chainz\/.pyenv\/versions\/3.9.1\/lib\/python3.9\/importlib\/__init__.py\", line 127, in import_module\n\treturn _bootstrap._gcd_import(name[level:], package, level)\n File \"<frozen importlib._bootstrap>\", line 1030, in _gcd_import\n File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\n File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\n File \"<frozen importlib._bootstrap>\", line 680, in _load_unlocked\n File \"<frozen importlib._bootstrap_external>\", line 790, in exec_module\n File \"<frozen importlib._bootstrap>\", line 228, in _call_with_frames_removed\n File \"\/...\/example\/core\/models.py\", line 8, in <module>\n\tclass MyModel(models.Model):\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/db\/models\/base.py\", line 320, in __new__\n\tnew_class._prepare()\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/db\/models\/base.py\", line 333, in _prepare\n\topts._prepare(cls)\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/db\/models\/options.py\", line 285, in _prepare\n\tpk_class = self._get_default_pk_class()\n File \"\/...\/venv\/lib\/python3.9\/site-packages\/django\/db\/models\/options.py\", line 246, in _get_default_pk_class\n\traise ValueError(\nValueError: Primary key 'example.core.models.MyBigAutoField' referred by DEFAULT_AUTO_FIELD must subclass AutoField.\nThis can be fixed in AutoFieldMeta.__subclasscheck__ by allowing subclasses of those classes in the _subclasses property.\n","graph_file":"django#django#30e123ed351317b7527f632b3b7dc4e81e850449.graph.json"},"71":{"idx":71,"repo":"django\/django","instance_id":"django__django-14382","base_commit":"29345aecf6e8d53ccb3577a3762bb0c263f7558d","problem_statement":"django-admin startapp with trailing slash in directory name results in error\nDescription\n\t\nBash tab-completion appends trailing slashes to directory names. django-admin startapp name directory\/ results in the error:\nCommandError: '' is not a valid app directory. Please make sure the directory is a valid identifier.\nThe error is caused by \u200bline 77 of django\/core\/management\/templates.py by calling basename() on the path with no consideration for a trailing slash:\nself.validate_name(os.path.basename(target), 'directory')\nRemoving potential trailing slashes would solve the problem:\nself.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n","graph_file":"django#django#29345aecf6e8d53ccb3577a3762bb0c263f7558d.graph.json"},"72":{"idx":72,"repo":"django\/django","instance_id":"django__django-14411","base_commit":"fa4e963ee7e6876581b5432363603571839ba00c","problem_statement":"Label for ReadOnlyPasswordHashWidget points to non-labelable element.\nDescription\n\t \n\t\t(last modified by David Sanders)\n\t \nIn the admin, the label element for the ReadOnlyPasswordHashWidget widget has a 'for' attribute which points to a non-labelable element, since the widget just renders text, not an input. There's no labelable element for the widget, so the label shouldn't have a 'for' attribute.\n","graph_file":"django#django#fa4e963ee7e6876581b5432363603571839ba00c.graph.json"},"73":{"idx":73,"repo":"django\/django","instance_id":"django__django-14534","base_commit":"910ecd1b8df7678f45c3d507dde6bcb1faafa243","problem_statement":"BoundWidget.id_for_label ignores id set by ChoiceWidget.options\nDescription\n\t\nIf you look at the implementation of BoundField.subwidgets\nclass BoundField:\n\t...\n\tdef subwidgets(self):\n\t\tid_ = self.field.widget.attrs.get('id') or self.auto_id\n\t\tattrs = {'id': id_} if id_ else {}\n\t\tattrs = self.build_widget_attrs(attrs)\n\t\treturn [\n\t\t\tBoundWidget(self.field.widget, widget, self.form.renderer)\n\t\t\tfor widget in self.field.widget.subwidgets(self.html_name, self.value(), attrs=attrs)\n\t\t]\none sees that self.field.widget.subwidgets(self.html_name, self.value(), attrs=attrs) returns a dict and assigns it to widget. Now widget['attrs']['id'] contains the \"id\" we would like to use when rendering the label of our CheckboxSelectMultiple.\nHowever BoundWidget.id_for_label() is implemented as\nclass BoundWidget:\n\t...\n\tdef id_for_label(self):\n\t\treturn 'id_%s_%s' % (self.data['name'], self.data['index'])\nignoring the id available through self.data['attrs']['id']. This re-implementation for rendering the \"id\" is confusing and presumably not intended. Nobody has probably realized that so far, because rarely the auto_id-argument is overridden when initializing a form. If however we do, one would assume that the method BoundWidget.id_for_label renders that string as specified through the auto_id format-string.\nBy changing the code from above to\nclass BoundWidget:\n\t...\n\tdef id_for_label(self):\n\t\treturn self.data['attrs']['id']\nthat function behaves as expected.\nPlease note that this error only occurs when rendering the subwidgets of a widget of type CheckboxSelectMultiple. This has nothing to do with the method BoundField.id_for_label().\n","graph_file":"django#django#910ecd1b8df7678f45c3d507dde6bcb1faafa243.graph.json"},"74":{"idx":74,"repo":"django\/django","instance_id":"django__django-14580","base_commit":"36fa071d6ebd18a61c4d7f1b5c9d17106134bd44","problem_statement":"Missing import statement in generated migration (NameError: name 'models' is not defined)\nDescription\n\t\nI found a bug in Django's latest release: 3.2.4. \nGiven the following contents of models.py:\nfrom django.db import models\nclass MyField(models.TextField):\n\tpass\nclass MyBaseModel(models.Model):\n\tclass Meta:\n\t\tabstract = True\nclass MyMixin:\n\tpass\nclass MyModel(MyMixin, MyBaseModel):\n\tname = MyField(primary_key=True)\nThe makemigrations command will generate the following migration file:\n# Generated by Django 3.2.4 on 2021-06-30 19:13\nimport app.models\nfrom django.db import migrations\nclass Migration(migrations.Migration):\n\tinitial = True\n\tdependencies = [\n\t]\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname='MyModel',\n\t\t\tfields=[\n\t\t\t\t('name', app.models.MyField(primary_key=True, serialize=False)),\n\t\t\t],\n\t\t\toptions={\n\t\t\t\t'abstract': False,\n\t\t\t},\n\t\t\tbases=(app.models.MyMixin, models.Model),\n\t\t),\n\t]\nWhich will then fail with the following error:\n File \"\/home\/jj\/django_example\/app\/migrations\/0001_initial.py\", line 7, in <module>\n\tclass Migration(migrations.Migration):\n File \"\/home\/jj\/django_example\/app\/migrations\/0001_initial.py\", line 23, in Migration\n\tbases=(app.models.MyMixin, models.Model),\nNameError: name 'models' is not defined\nExpected behavior: Django generates a migration file that is valid Python.\nActual behavior: Django generates a migration file that is missing an import statement.\nI think this is a bug of the module django.db.migrations.writer, but I'm not sure. I will be happy to assist with debugging.\nThanks for your attention,\nJaap Joris\n","graph_file":"django#django#36fa071d6ebd18a61c4d7f1b5c9d17106134bd44.graph.json"},"75":{"idx":75,"repo":"django\/django","instance_id":"django__django-14608","base_commit":"7f33c1e22dbc34a7afae7967783725b10f1f13b1","problem_statement":"Add `nonform` CSS class for non form errors in FormSets\nDescription\n\t \n\t\t(last modified by Ties Jan Hefting)\n\t \nForms add the nonfield CSS class for non field errors in ErrorList instances. This is documented in a section on \u200brendering form error messages. Similarly, in FormSets I'd expect to see the nonform CSS class added for non form errors. This would allow a custom ErrorList to make a distinction in form field errors, non field errors (forms) and non form errors (FormSets) when rendering error messages. Therefore I'd suggest to add this nonform CSS class and document it for developers to use.\n","graph_file":"django#django#7f33c1e22dbc34a7afae7967783725b10f1f13b1.graph.json"},"76":{"idx":76,"repo":"django\/django","instance_id":"django__django-14667","base_commit":"6a970a8b4600eb91be25f38caed0a52269d6303d","problem_statement":"QuerySet.defer() doesn't clear deferred field when chaining with only().\nDescription\n\t\nConsidering a simple Company model with four fields: id, name, trade_number and country. If we evaluate a queryset containing a .defer() following a .only(), the generated sql query selects unexpected fields. For example: \nCompany.objects.only(\"name\").defer(\"name\")\nloads all the fields with the following query:\nSELECT \"company\".\"id\", \"company\".\"name\", \"company\".\"trade_number\", \"company\".\"country\" FROM \"company\"\nand \nCompany.objects.only(\"name\").defer(\"name\").defer(\"country\")\nalso loads all the fields with the same query:\nSELECT \"company\".\"id\", \"company\".\"name\", \"company\".\"trade_number\", \"company\".\"country\" FROM \"company\"\nIn those two cases, i would expect the sql query to be:\nSELECT \"company\".\"id\" FROM \"company\"\nIn the following example, we get the expected behavior:\nCompany.objects.only(\"name\", \"country\").defer(\"name\")\nonly loads \"id\" and \"country\" fields with the following query:\nSELECT \"company\".\"id\", \"company\".\"country\" FROM \"company\"\n","graph_file":"django#django#6a970a8b4600eb91be25f38caed0a52269d6303d.graph.json"},"77":{"idx":77,"repo":"django\/django","instance_id":"django__django-14672","base_commit":"00ea883ef56fb5e092cbe4a6f7ff2e7470886ac4","problem_statement":"Missing call `make_hashable` on `through_fields` in `ManyToManyRel`\nDescription\n\t\nIn 3.2 identity property has been added to all ForeignObjectRel to make it possible to compare them. A hash is derived from said identity and it's possible because identity is a tuple. To make limit_choices_to hashable (one of this tuple elements), \u200bthere's a call to make_hashable.\nIt happens that through_fields can be a list. In such case, this make_hashable call is missing in \u200bManyToManyRel.\nFor some reason it only fails on checking proxy model. I think proxy models have 29 checks and normal ones 24, hence the issue, but that's just a guess.\nMinimal repro:\nclass Parent(models.Model):\n\tname = models.CharField(max_length=256)\nclass ProxyParent(Parent):\n\tclass Meta:\n\t\tproxy = True\nclass Child(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n\tmany_to_many_field = models.ManyToManyField(\n\t\tto=Parent,\n\t\tthrough=\"ManyToManyModel\",\n\t\tthrough_fields=['child', 'parent'],\n\t\trelated_name=\"something\"\n\t)\nclass ManyToManyModel(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n\tchild = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n\tsecond_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\nWhich will result in \n File \"manage.py\", line 23, in <module>\n\tmain()\n File \"manage.py\", line 19, in main\n\texecute_from_command_line(sys.argv)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/__init__.py\", line 413, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/base.py\", line 354, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/base.py\", line 393, in execute\n\tself.check()\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/base.py\", line 419, in check\n\tall_issues = checks.run_checks(\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/checks\/registry.py\", line 76, in run_checks\n\tnew_errors = check(app_configs=app_configs, databases=databases)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/checks\/model_checks.py\", line 34, in check_all_models\n\terrors.extend(model.check(**kwargs))\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/db\/models\/base.py\", line 1277, in check\n\t*cls._check_field_name_clashes(),\n File \"\/home\/tom\/PycharmProjects\/djangbroken_m2m_projectProject\/venv\/lib\/python3.8\/site-packages\/django\/db\/models\/base.py\", line 1465, in _check_field_name_clashes\n\tif f not in used_fields:\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/db\/models\/fields\/reverse_related.py\", line 140, in __hash__\n\treturn hash(self.identity)\nTypeError: unhashable type: 'list'\nSolution: Add missing make_hashable call on self.through_fields in ManyToManyRel.\nMissing call `make_hashable` on `through_fields` in `ManyToManyRel`\nDescription\n\t\nIn 3.2 identity property has been added to all ForeignObjectRel to make it possible to compare them. A hash is derived from said identity and it's possible because identity is a tuple. To make limit_choices_to hashable (one of this tuple elements), \u200bthere's a call to make_hashable.\nIt happens that through_fields can be a list. In such case, this make_hashable call is missing in \u200bManyToManyRel.\nFor some reason it only fails on checking proxy model. I think proxy models have 29 checks and normal ones 24, hence the issue, but that's just a guess.\nMinimal repro:\nclass Parent(models.Model):\n\tname = models.CharField(max_length=256)\nclass ProxyParent(Parent):\n\tclass Meta:\n\t\tproxy = True\nclass Child(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n\tmany_to_many_field = models.ManyToManyField(\n\t\tto=Parent,\n\t\tthrough=\"ManyToManyModel\",\n\t\tthrough_fields=['child', 'parent'],\n\t\trelated_name=\"something\"\n\t)\nclass ManyToManyModel(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n\tchild = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n\tsecond_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\nWhich will result in \n File \"manage.py\", line 23, in <module>\n\tmain()\n File \"manage.py\", line 19, in main\n\texecute_from_command_line(sys.argv)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/__init__.py\", line 413, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/base.py\", line 354, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/base.py\", line 393, in execute\n\tself.check()\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/management\/base.py\", line 419, in check\n\tall_issues = checks.run_checks(\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/checks\/registry.py\", line 76, in run_checks\n\tnew_errors = check(app_configs=app_configs, databases=databases)\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/core\/checks\/model_checks.py\", line 34, in check_all_models\n\terrors.extend(model.check(**kwargs))\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/db\/models\/base.py\", line 1277, in check\n\t*cls._check_field_name_clashes(),\n File \"\/home\/tom\/PycharmProjects\/djangbroken_m2m_projectProject\/venv\/lib\/python3.8\/site-packages\/django\/db\/models\/base.py\", line 1465, in _check_field_name_clashes\n\tif f not in used_fields:\n File \"\/home\/tom\/PycharmProjects\/broken_m2m_project\/venv\/lib\/python3.8\/site-packages\/django\/db\/models\/fields\/reverse_related.py\", line 140, in __hash__\n\treturn hash(self.identity)\nTypeError: unhashable type: 'list'\nSolution: Add missing make_hashable call on self.through_fields in ManyToManyRel.\n","graph_file":"django#django#00ea883ef56fb5e092cbe4a6f7ff2e7470886ac4.graph.json"},"78":{"idx":78,"repo":"django\/django","instance_id":"django__django-14730","base_commit":"4fe3774c729f3fd5105b3001fe69a70bdca95ac3","problem_statement":"Prevent developers from defining a related_name on symmetrical ManyToManyFields\nDescription\n\t\nIn ManyToManyField, if the symmetrical argument is passed, or if it's a self-referential ManyToMany relationship, the related field on the target model is not created. However, if a developer passes in the related_name not understanding this fact, they may be confused until they find the information about symmetrical relationship. Thus, it is proposed to raise an error when the user defines a ManyToManyField in this condition.\n","graph_file":"django#django#4fe3774c729f3fd5105b3001fe69a70bdca95ac3.graph.json"},"79":{"idx":79,"repo":"django\/django","instance_id":"django__django-14752","base_commit":"b64db05b9cedd96905d637a2d824cbbf428e40e7","problem_statement":"Refactor AutocompleteJsonView to support extra fields in autocomplete response\nDescription\n\t \n\t\t(last modified by mrts)\n\t \nAdding data attributes to items in ordinary non-autocomplete foreign key fields that use forms.widgets.Select-based widgets is relatively easy. This enables powerful and dynamic admin site customizations where fields from related models are updated immediately when users change the selected item.\nHowever, adding new attributes to autocomplete field results currently requires extending contrib.admin.views.autocomplete.AutocompleteJsonView and fully overriding the AutocompleteJsonView.get() method. Here's an example:\nclass MyModelAdmin(admin.ModelAdmin):\n\tdef get_urls(self):\n\t\treturn [\n\t\t\tpath('autocomplete\/', CustomAutocompleteJsonView.as_view(admin_site=self.admin_site))\n\t\t\tif url.pattern.match('autocomplete\/')\n\t\t\telse url for url in super().get_urls()\n\t\t]\nclass CustomAutocompleteJsonView(AutocompleteJsonView):\n\tdef get(self, request, *args, **kwargs):\n\t\tself.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n\t\tif not self.has_perm(request):\n\t\t\traise PermissionDenied\n\t\tself.object_list = self.get_queryset()\n\t\tcontext = self.get_context_data()\n\t\treturn JsonResponse({\n\t\t\t'results': [\n\t\t\t\t{'id': str(getattr(obj, to_field_name)), 'text': str(obj), 'notes': obj.notes} # <-- customization here\n\t\t\t\tfor obj in context['object_list']\n\t\t\t],\n\t\t\t'pagination': {'more': context['page_obj'].has_next()},\n\t\t})\nThe problem with this is that as AutocompleteJsonView.get() keeps evolving, there's quite a lot of maintenance overhead required to catch up.\nThe solutions is simple, side-effect- and risk-free: adding a result customization extension point to get() by moving the lines that construct the results inside JsonResponse constructor to a separate method. So instead of\n\t\treturn JsonResponse({\n\t\t\t'results': [\n\t\t\t\t{'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n\t\t\t\tfor obj in context['object_list']\n\t\t\t],\n\t\t\t'pagination': {'more': context['page_obj'].has_next()},\n\t\t})\nthere would be\n\t\treturn JsonResponse({\n\t\t\t'results': [\n\t\t\t\tself.serialize_result(obj, to_field_name) for obj in context['object_list']\n\t\t\t],\n\t\t\t'pagination': {'more': context['page_obj'].has_next()},\n\t\t})\nwhere serialize_result() contains the original object to dictionary conversion code that would be now easy to override:\ndef serialize_result(self, obj, to_field_name):\n\treturn {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\nThe example CustomAutocompleteJsonView from above would now become succinct and maintainable:\nclass CustomAutocompleteJsonView(AutocompleteJsonView):\n\tdef serialize_result(self, obj, to_field_name):\n\t\treturn super.serialize_result(obj, to_field_name) | {'notes': obj.notes}\nWhat do you think, is this acceptable? I'm more than happy to provide the patch.\n","graph_file":"django#django#b64db05b9cedd96905d637a2d824cbbf428e40e7.graph.json"},"80":{"idx":80,"repo":"django\/django","instance_id":"django__django-14787","base_commit":"004b4620f6f4ad87261e149898940f2dcd5757ef","problem_statement":"method_decorator() should preserve wrapper assignments\nDescription\n\t\nthe function that is passed to the decorator is a partial object and does not have any of the attributes expected from a function i.e. __name__, __module__ etc...\nconsider the following case\ndef logger(func):\n\t@wraps(func)\n\tdef inner(*args, **kwargs):\n\t\ttry:\n\t\t\tresult = func(*args, **kwargs)\n\t\texcept Exception as e:\n\t\t\tresult = str(e)\n\t\tfinally:\n\t\t\tlogger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n\treturn inner\nclass Test:\n\t@method_decorator(logger)\n\tdef hello_world(self):\n\t\treturn \"hello\"\nTest().test_method()\nThis results in the following exception\nAttributeError: 'functools.partial' object has no attribute '__name__'\n","graph_file":"django#django#004b4620f6f4ad87261e149898940f2dcd5757ef.graph.json"},"81":{"idx":81,"repo":"django\/django","instance_id":"django__django-14855","base_commit":"475cffd1d64c690cdad16ede4d5e81985738ceb4","problem_statement":"Wrong URL generated by get_admin_url for readonly field in custom Admin Site\nDescription\n\t\nWhen a model containing a ForeignKey field is viewed (or edited) in a custom Admin Site, and that ForeignKey field is listed in readonly_fields, the url generated for the link is \/admin\/... instead of \/custom-admin\/....\nThis appears to be caused by the following line in django.contrib.admin.helpers get_admin_url:\nurl = reverse(url_name, args=[quote(remote_obj.pk)])\nOther parts of the admin use the current_app keyword parameter to identify the correct current name of the Admin Site. (See django.contrib.admin.options.ModelAdmin response_add as just one example)\nI have been able to correct this specific issue by replacing the above line with:\nurl = reverse(\n\turl_name,\n\targs=[quote(remote_obj.pk)],\n\tcurrent_app=self.model_admin.admin_site.name\n)\nHowever, I don't know if there are any side effects and I have not yet run the full suite of tests on this. Mostly looking for feedback whether I'm on the right track.\n","graph_file":"django#django#475cffd1d64c690cdad16ede4d5e81985738ceb4.graph.json"},"82":{"idx":82,"repo":"django\/django","instance_id":"django__django-14915","base_commit":"903aaa35e5ceaa33bfc9b19b7f6da65ce5a91dd4","problem_statement":"ModelChoiceIteratorValue is not hashable.\nDescription\n\t\nRecently I migrated from Django 3.0 to Django 3.1. In my code, I add custom data-* attributes to the select widget options. After the upgrade some of those options broke. Error is {TypeError}unhashable type: 'ModelChoiceIteratorValue'.\nExample (this one breaks):\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in self.show_fields: # This is a dict {1: ['first_name', 'last_name']}\n\t\t\tcontext['attrs']['data-fields'] = json.dumps(self.show_fields[value])\nHowever, working with arrays is not an issue:\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in allowed_values: # This is an array [1, 2]\n\t\t\t...\n","graph_file":"django#django#903aaa35e5ceaa33bfc9b19b7f6da65ce5a91dd4.graph.json"},"83":{"idx":83,"repo":"django\/django","instance_id":"django__django-14997","base_commit":"0d4e575c96d408e0efb4dfd0cbfc864219776950","problem_statement":"Remaking table with unique constraint crashes on SQLite.\nDescription\n\t\nIn Django 4.0a1, this model:\nclass Tag(models.Model):\n\tname = models.SlugField(help_text=\"The tag key.\")\n\tvalue = models.CharField(max_length=150, help_text=\"The tag value.\")\n\tclass Meta:\n\t\tordering = [\"name\", \"value\"]\n\t\tconstraints = [\n\t\t\tmodels.UniqueConstraint(\n\t\t\t\t\"name\",\n\t\t\t\t\"value\",\n\t\t\t\tname=\"unique_name_value\",\n\t\t\t)\n\t\t]\n\tdef __str__(self):\n\t\treturn f\"{self.name}={self.value}\"\nwith these migrations, using sqlite:\nclass Migration(migrations.Migration):\n\tinitial = True\n\tdependencies = [\n\t]\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname='Tag',\n\t\t\tfields=[\n\t\t\t\t('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t\t\t('name', models.SlugField(help_text='The tag key.')),\n\t\t\t\t('value', models.CharField(help_text='The tag value.', max_length=200)),\n\t\t\t],\n\t\t\toptions={\n\t\t\t\t'ordering': ['name', 'value'],\n\t\t\t},\n\t\t),\n\t\tmigrations.AddConstraint(\n\t\t\tmodel_name='tag',\n\t\t\tconstraint=models.UniqueConstraint(django.db.models.expressions.F('name'), django.db.models.expressions.F('value'), name='unique_name_value'),\n\t\t),\n\t]\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t('myapp', '0001_initial'),\n\t]\n\toperations = [\n\t\tmigrations.AlterField(\n\t\t\tmodel_name='tag',\n\t\t\tname='value',\n\t\t\tfield=models.CharField(help_text='The tag value.', max_length=150),\n\t\t),\n\t]\nraises this error:\nmanage.py migrate\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, myapp, sessions\nRunning migrations:\n Applying myapp.0002_alter_tag_value...python-BaseException\nTraceback (most recent call last):\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py\", line 416, in execute\n\treturn Database.Cursor.execute(self, query, params)\nsqlite3.OperationalError: the \".\" operator prohibited in index expressions\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\core\\management\\base.py\", line 373, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\core\\management\\base.py\", line 417, in execute\n\toutput = self.handle(*args, **options)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\core\\management\\base.py\", line 90, in wrapped\n\tres = handle_func(*args, **kwargs)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 253, in handle\n\tpost_migrate_state = executor.migrate(\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 126, in migrate\n\tstate = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 156, in _migrate_all_forwards\n\tstate = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\migrations\\executor.py\", line 236, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\migrations\\migration.py\", line 125, in apply\n\toperation.database_forwards(self.app_label, schema_editor, old_state, project_state)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 225, in database_forwards\n\tschema_editor.alter_field(from_model, from_field, to_field)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\sqlite3\\schema.py\", line 140, in alter_field\n\tsuper().alter_field(model, old_field, new_field, strict=strict)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 618, in alter_field\n\tself._alter_field(model, old_field, new_field, old_type, new_type,\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\sqlite3\\schema.py\", line 362, in _alter_field\n\tself._remake_table(model, alter_field=(old_field, new_field))\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\sqlite3\\schema.py\", line 303, in _remake_table\n\tself.execute(sql)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 151, in execute\n\tcursor.execute(sql, params)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 98, in execute\n\treturn super().execute(sql, params)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 66, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 75, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"D:\\Projects\\Development\\sqliteerror\\.venv\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py\", line 416, in execute\n\treturn Database.Cursor.execute(self, query, params)\ndjango.db.utils.OperationalError: the \".\" operator prohibited in index expressions\n","graph_file":"django#django#0d4e575c96d408e0efb4dfd0cbfc864219776950.graph.json"},"84":{"idx":84,"repo":"django\/django","instance_id":"django__django-14999","base_commit":"a754b82dac511475b6276039471ccd17cc64aeb8","problem_statement":"RenameModel with db_table should be a noop.\nDescription\n\t\nA RenameModel operation that already has db_table defined must be a noop.\nIn Postgres, it drops and recreates foreign key constraints. In sqlite it recreates the table (as expected for a table renaming).\n","graph_file":"django#django#a754b82dac511475b6276039471ccd17cc64aeb8.graph.json"},"85":{"idx":85,"repo":"django\/django","instance_id":"django__django-15061","base_commit":"2c01ebb4be5d53cbf6450f356c10e436025d6d07","problem_statement":"Remove \"for = ...\" from MultiWidget's <label>.\nDescription\n\t\nThe instance from Raw MultiWidget class generate id_for_label like f'{id_}0'\nIt has not sense.\nFor example ChoiceWidget has self.add_id_index and I can decide it myself, how I will see label_id - with or without index.\nI think, it is better to remove completely id_for_label method from MultiWidget Class.\n","graph_file":"django#django#2c01ebb4be5d53cbf6450f356c10e436025d6d07.graph.json"},"86":{"idx":86,"repo":"django\/django","instance_id":"django__django-15202","base_commit":"4fd3044ca0135da903a70dfb66992293f529ecf1","problem_statement":"URLField throws ValueError instead of ValidationError on clean\nDescription\n\t\nforms.URLField( ).clean('\/\/\/\/]@N.AN')\nresults in:\n\tValueError: Invalid IPv6 URL\n\tTraceback (most recent call last):\n\t File \"basic_fuzzer.py\", line 22, in TestOneInput\n\t File \"fuzzers.py\", line 350, in test_forms_URLField\n\t File \"django\/forms\/fields.py\", line 151, in clean\n\t File \"django\/forms\/fields.py\", line 136, in run_validators\n\t File \"django\/core\/validators.py\", line 130, in __call__\n\t File \"urllib\/parse.py\", line 440, in urlsplit\n","graph_file":"django#django#4fd3044ca0135da903a70dfb66992293f529ecf1.graph.json"},"87":{"idx":87,"repo":"django\/django","instance_id":"django__django-15213","base_commit":"03cadb912c78b769d6bf4a943a2a35fc1d952960","problem_statement":"ExpressionWrapper for ~Q(pk__in=[]) crashes.\nDescription\n\t \n\t\t(last modified by Stefan Brand)\n\t \nProblem Description\nI'm reducing some Q objects (similar to what is described in ticket:32554. Everything is fine for the case where the result is ExpressionWrapper(Q(pk__in=[])). However, when I reduce to ExpressionWrapper(~Q(pk__in=[])) the query breaks.\nSymptoms\nWorking for ExpressionWrapper(Q(pk__in=[]))\nprint(queryset.annotate(foo=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())).values(\"foo\").query)\nSELECT 0 AS \"foo\" FROM \"table\"\nNot working for ExpressionWrapper(~Q(pk__in=[]))\nprint(queryset.annotate(foo=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())).values(\"foo\").query)\nSELECT AS \"foo\" FROM \"table\"\n","graph_file":"django#django#03cadb912c78b769d6bf4a943a2a35fc1d952960.graph.json"},"88":{"idx":88,"repo":"django\/django","instance_id":"django__django-15252","base_commit":"361bb8f786f112ee275be136795c0b1ecefff928","problem_statement":"MigrationRecorder does not obey db_router allow_migrate rules\nDescription\n\t\nHi,\nWe have a multi-db setup. We have one connection that is for the django project, and several connections that talk to other dbs for information (ie models with managed = False). Django should only create tables in the first connection, never in any of the other connections. We have a simple router that does the following: \nclass Router(object):\n\tdef allow_migrate(self, db, model):\n\t\tif db == 'default':\n\t\t\treturn True\n\t\treturn False\nCurrent Behaviour\nWe run our functional tests and the migrate command is called against each connection when the test databases are created (see django\/test\/runner.py, setup_databases, line 300-ish, which calls django\/db\/backends\/creation.py, create_test_db, line 377-ish)\nWhen this migrate runs, it tries to apply our migrations, which tries to record that a migration has been applied (see django\/db\/migrations\/executor.py, apply_migration, which has several calls to self.recorder.record_applied). \nThe first thing that record_applied does is a call to self.ensure_schema() (see django\/db\/migrations\/recorder.py, record_applied, lien 66-ish). \nensure_schema checks to see if the Migration model is in the tables in the connection. If it does not find the table then it tries to create the table. \nI believe that this is incorrect behaviour when a db_router has been provided. If using the router above, my expectation would be that the table is not created on any connection other than the 'default' connection. Looking at the other methods on the MigrationRecorder, I would expect that there will be similar issues with applied_migrations and record_unapplied.\n","graph_file":"django#django#361bb8f786f112ee275be136795c0b1ecefff928.graph.json"},"89":{"idx":89,"repo":"django\/django","instance_id":"django__django-15320","base_commit":"b55ebe32417e0884b6b8b3e1bc0379033aa221af","problem_statement":"Subquery.as_sql() generates invalid SQL.\nDescription\n\t \n\t\t(last modified by M1ha Shvn)\n\t \nSince \u200bthis commit Subquery.as_sql(...) method returns incorrect SQL removing first and last symbols instead of absent breakets. Adding Subquery().query.subquery = True attribute fixes the problem. From my point of view, it should be set in Subquery constructor.\nfrom django.db import connection\nfrom apps.models import App\nq = Subquery(App.objects.all())\nprint(str(q.query))\n# Output SQL is valid:\n# 'SELECT \"apps_app\".\"id\", \"apps_app\".\"name\" FROM \"apps_app\"'\nprint(q.as_sql(q.query.get_compiler('default'), connection))\n# Outptut SQL is invalid (no S letter at the beggining and \" symbol at the end):\n# ('(ELECT \"apps_app\".\"id\", \"apps_app\".\"name\" FROM \"apps_app)', ())\nq.query.subquery = True\nprint(q.as_sql(q.query.get_compiler('default'), connection))\n# Outputs correct result\n('(SELECT \"apps_app\".\"id\", \"apps_app\".\"name\" FROM \"apps_app\")', ())\n","graph_file":"django#django#b55ebe32417e0884b6b8b3e1bc0379033aa221af.graph.json"},"90":{"idx":90,"repo":"django\/django","instance_id":"django__django-15347","base_commit":"7c4f3965098baad2396e24501e09237425a7bd6f","problem_statement":"Messages framework incorrectly serializes\/deserializes extra_tags when it's an empty string\nDescription\n\t\nWhen a message is serialised and then deserialised with any of the built in storage backends, then extra_tags==\"\" is converted to extra_tags==None. This is because MessageEncoder checks for the truthyness of extra_tags rather than checking it is not None.\nTo replicate this bug\n>>> from django.conf import settings\n>>> settings.configure() # Just to allow the following import\n>>> from django.contrib.messages.storage.base import Message\n>>> from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n>>> original_message = Message(10, \"Here is a message\", extra_tags=\"\")\n>>> encoded_message = MessageEncoder().encode(original_message)\n>>> decoded_message = MessageDecoder().decode(encoded_message)\n>>> original_message.extra_tags == \"\"\nTrue\n>>> decoded_message.extra_tags is None\nTrue\nEffect of the bug in application behaviour\nThis error occurred in the wild with a template tag similar to the following:\n{% if x not in message.extra_tags %}\nWhen the message was displayed as part of a redirect, it had been serialised and deserialized which meant that extra_tags was None instead of the empty string. This caused an error.\nIt's important to note that this bug affects all of the standard API (messages.debug, messages.info etc. all have a default value of extra_tags equal to \"\").\n","graph_file":"django#django#7c4f3965098baad2396e24501e09237425a7bd6f.graph.json"},"91":{"idx":91,"repo":"django\/django","instance_id":"django__django-15388","base_commit":"c5cd8783825b5f6384417dac5f3889b4210b7d08","problem_statement":"Dev Server fails to restart after adding BASE_DIR to TEMPLATES[0]['DIRS'] in settings\nDescription\n\t\nRepro steps:\n$ pip install -U django\n$ django-admin startproject <name>\nOpen settings.py, copy the BASE_DIR variable from line 16 and paste it into the empty DIRS list on line 57\n$ .\/manage.py runserver\nBack in your IDE, save a file and watch the dev server *NOT* restart.\nBack in settings.py, remove BASE_DIR from the templates DIRS list. Manually CTRL-C your dev server (as it won't restart on its own when you save), restart the dev server. Now return to your settings.py file, re-save it, and notice the development server once again detects changes and restarts.\nThis bug prevents the dev server from restarting no matter where you make changes - it is not just scoped to edits to settings.py.\n","graph_file":"django#django#c5cd8783825b5f6384417dac5f3889b4210b7d08.graph.json"},"92":{"idx":92,"repo":"django\/django","instance_id":"django__django-15400","base_commit":"4c76ffc2d6c77c850b4bef8d9acc197d11c47937","problem_statement":"SimpleLazyObject doesn't implement __radd__\nDescription\n\t\nTechnically, there's a whole bunch of magic methods it doesn't implement, compared to a complete proxy implementation, like that of wrapt.ObjectProxy, but __radd__ being missing is the one that's biting me at the moment.\nAs far as I can tell, the implementation can't just be\n__radd__ = new_method_proxy(operator.radd)\nbecause that doesn't exist, which is rubbish.\n__radd__ = new_method_proxy(operator.attrgetter(\"__radd__\"))\nalso won't work because types may not have that attr, and attrgetter doesn't supress the exception (correctly)\nThe minimal implementation I've found that works for me is:\n\tdef __radd__(self, other):\n\t\tif self._wrapped is empty:\n\t\t\tself._setup()\n\t\treturn other + self._wrapped\n","graph_file":"django#django#4c76ffc2d6c77c850b4bef8d9acc197d11c47937.graph.json"},"93":{"idx":93,"repo":"django\/django","instance_id":"django__django-15498","base_commit":"d90e34c61b27fba2527834806639eebbcfab9631","problem_statement":"Fix handling empty string for If-Modified-Since header\nDescription\n\t\nEmpty string used to be ignored for If-Modified-Since header, but now raises exception since d6aff369ad3.\nFix handling empty string for If-Modified-Since header\nDescription\n\t\nEmpty string used to be ignored for If-Modified-Since header, but now raises exception since d6aff369ad3.\n","graph_file":"django#django#d90e34c61b27fba2527834806639eebbcfab9631.graph.json"},"94":{"idx":94,"repo":"django\/django","instance_id":"django__django-15695","base_commit":"647480166bfe7532e8c471fef0146e3a17e6c0c9","problem_statement":"RenameIndex() crashes when unnamed index is moving backward and forward.\nDescription\n\t\nRenameIndex() should restore the old auto-generated name when an unnamed index for unique_together is moving backward. Now re-applying RenameIndex() crashes. For example:\ntests\/migrations\/test_operations.py\ndiff --git a\/tests\/migrations\/test_operations.py b\/tests\/migrations\/test_operations.py\nindex cfd28b1b39..c0a55023bb 100644\n\t\t\t\t\t\n\t\t\t\t\t a\n\t\t\t\t \n\t\t\t\t\t\n\t\t\t\t\t b\n\t\t\t\t \n class OperationTests(OperationTestBase):\u00a0\n29882988\u00a0 \u00a0 \u00a0 \u00a0 with connection.schema_editor() as editor, self.assertNumQueries(0):\n29892989\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operation.database_backwards(app_label, editor, new_state, project_state)\n29902990\u00a0 \u00a0 \u00a0 \u00a0 self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n\u00a02991\u00a0 \u00a0 \u00a0 \u00a0 # Re-apply renaming.\n\u00a02992\u00a0 \u00a0 \u00a0 \u00a0 with connection.schema_editor() as editor:\n\u00a02993\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operation.database_forwards(app_label, editor, project_state, new_state)\n\u00a02994\u00a0 \u00a0 \u00a0 \u00a0 self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n29912995\u00a0 \u00a0 \u00a0 \u00a0 # Deconstruction.\n29922996\u00a0 \u00a0 \u00a0 \u00a0 definition = operation.deconstruct()\n29932997\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(definition[0], \"RenameIndex\")\ncrashes on PostgreSQL:\ndjango.db.utils.ProgrammingError: relation \"new_pony_test_idx\" already exists\n","graph_file":"django#django#647480166bfe7532e8c471fef0146e3a17e6c0c9.graph.json"},"95":{"idx":95,"repo":"django\/django","instance_id":"django__django-15738","base_commit":"6f73eb9d90cfec684529aab48d517e3d6449ba8c","problem_statement":"Models migration with change field foreign to many and deleting unique together.\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nI have models like\nclass Authors(models.Model):\n\tproject_data_set = models.ForeignKey(\n\t\tProjectDataSet,\n\t\ton_delete=models.PROTECT\n\t)\n\tstate = models.IntegerField()\n\tstart_date = models.DateField()\n\tclass Meta:\n\t\t unique_together = (('project_data_set', 'state', 'start_date'),)\nand\nclass DataSet(models.Model):\n\tname = models.TextField(max_length=50)\nclass Project(models.Model):\n\tdata_sets = models.ManyToManyField(\n\t\tDataSet,\n\t\tthrough='ProjectDataSet',\n\t)\n\tname = models.TextField(max_length=50)\nclass ProjectDataSet(models.Model):\n\t\"\"\"\n\tCross table of data set and project\n\t\"\"\"\n\tdata_set = models.ForeignKey(DataSet, on_delete=models.PROTECT)\n\tproject = models.ForeignKey(Project, on_delete=models.PROTECT)\n\tclass Meta:\n\t\tunique_together = (('data_set', 'project'),)\nwhen i want to change field project_data_set in Authors model from foreign key field to many to many field I must delete a unique_together, cause it can't be on many to many field.\nThen my model should be like:\nclass Authors(models.Model):\n\tproject_data_set = models.ManyToManyField(\n\t\tProjectDataSet,\n\t)\n\tstate = models.IntegerField()\n\tstart_date = models.DateField()\nBut when I want to do a migrations.\npython3 manage.py makemigrations\npython3 manage.py migrate\nI have error:\nValueError: Found wrong number (0) of constraints for app_authors(project_data_set, state, start_date)\nThe database is on production, so I can't delete previous initial migrations, and this error isn't depending on database, cause I delete it and error is still the same.\nMy solve is to first delete unique_together, then do a makemigrations and then migrate. After that change the field from foreign key to many to many field, then do a makemigrations and then migrate.\nBut in this way I have 2 migrations instead of one.\nI added attachment with this project, download it and then do makemigrations and then migrate to see this error.\n","graph_file":"django#django#6f73eb9d90cfec684529aab48d517e3d6449ba8c.graph.json"},"96":{"idx":96,"repo":"django\/django","instance_id":"django__django-15781","base_commit":"8d160f154f0240a423e83ffe0690e472f837373c","problem_statement":"Customizable management command formatters.\nDescription\n\t\nWith code like:\nclass Command(BaseCommand):\n\thelp = '''\n\tImport a contract from tzkt.\n\tExample usage:\n\t\t.\/manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n\t'''\nHelp output is:\n$ .\/manage.py help tzkt_import\nusage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n\t\t\t\t\t\t\t [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n\t\t\t\t\t\t\t [--skip-checks]\n\t\t\t\t\t\t\t blockchain target\nImport a contract from tzkt Example usage: .\/manage.py tzkt_import 'Tezos Mainnet'\nKT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\npositional arguments:\n blockchain\t\t\tName of the blockchain to import into\n target\t\t\t\tId of the contract to import\nWhen that was expected:\n$ .\/manage.py help tzkt_import\nusage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n\t\t\t\t\t\t\t [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n\t\t\t\t\t\t\t [--skip-checks]\n\t\t\t\t\t\t\t blockchain target\nImport a contract from tzkt \nExample usage: \n\t.\/manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\npositional arguments:\n blockchain\t\t\tName of the blockchain to import into\n target\t\t\t\tId of the contract to import\n","graph_file":"django#django#8d160f154f0240a423e83ffe0690e472f837373c.graph.json"},"97":{"idx":97,"repo":"django\/django","instance_id":"django__django-15789","base_commit":"d4d5427571b4bf3a21c902276c2a00215c2a37cc","problem_statement":"Add an encoder parameter to django.utils.html.json_script().\nDescription\n\t\nI have a use case where I want to customize the JSON encoding of some values to output to the template layer. It looks like django.utils.html.json_script is a good utility for that, however the JSON encoder is hardcoded to DjangoJSONEncoder. I think it would be nice to be able to pass a custom encoder class.\nBy the way, django.utils.html.json_script is not documented (only its template filter counterpart is), would it be a good thing to add to the docs?\n","graph_file":"django#django#d4d5427571b4bf3a21c902276c2a00215c2a37cc.graph.json"},"98":{"idx":98,"repo":"django\/django","instance_id":"django__django-15790","base_commit":"c627226d05dd52aef59447dcfb29cec2c2b11b8a","problem_statement":"check_for_template_tags_with_the_same_name with libraries in TEMPLATES\nDescription\n\t\nI didn't explore this thoroughly, but I think there might be an issue with the check_for_template_tags_with_the_same_name when you add a template tag library into TEMPLATES['OPTIONS']['librairies'].\nI'm getting an error like: \n(templates.E003) 'my_tags' is used for multiple template tag modules: 'someapp.templatetags.my_tags', 'someapp.templatetags.my_tags'\n","graph_file":"django#django#c627226d05dd52aef59447dcfb29cec2c2b11b8a.graph.json"},"99":{"idx":99,"repo":"django\/django","instance_id":"django__django-15814","base_commit":"5eb6a2b33d70b9889e1cafa12594ad6f80773d3a","problem_statement":"QuerySet.only() after select_related() crash on proxy models.\nDescription\n\t\nWhen I optimize a query using select_related() and only() methods from the proxy model I encounter an error:\nWindows 10; Python 3.10; Django 4.0.5\nTraceback (most recent call last):\n File \"D:\\study\\django_college\\manage.py\", line 22, in <module>\n\tmain()\n File \"D:\\study\\django_college\\manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 446, in execute_from_command_line\n\tutility.execute()\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 440, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\core\\management\\base.py\", line 414, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\core\\management\\base.py\", line 460, in execute\n\toutput = self.handle(*args, **options)\n File \"D:\\study\\django_college\\project\\users\\management\\commands\\test_proxy.py\", line 9, in handle\n\tobjs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\db\\models\\query.py\", line 302, in __len__\n\tself._fetch_all()\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\db\\models\\query.py\", line 1507, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\db\\models\\query.py\", line 71, in __iter__\n\trelated_populators = get_related_populators(klass_info, select, db)\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\db\\models\\query.py\", line 2268, in get_related_populators\n\trel_cls = RelatedPopulator(rel_klass_info, select, db)\n File \"D:\\Anaconda3\\envs\\django\\lib\\site-packages\\django\\db\\models\\query.py\", line 2243, in __init__\n\tself.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\nValueError: 'id' is not in list\nModels:\nclass CustomModel(models.Model):\n\tname = models.CharField(max_length=16)\nclass ProxyCustomModel(CustomModel):\n\tclass Meta:\n\t\tproxy = True\nclass AnotherModel(models.Model):\n\tcustom = models.ForeignKey(\n\t\tProxyCustomModel,\n\t\ton_delete=models.SET_NULL,\n\t\tnull=True,\n\t\tblank=True,\n\t)\nCommand:\nclass Command(BaseCommand):\n\tdef handle(self, *args, **options):\n\t\tlist(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\nAt django\/db\/models\/sql\/query.py in 745 line there is snippet:\nopts = cur_model._meta\nIf I replace it by \nopts = cur_model._meta.concrete_model._meta\nall works as expected.\n","graph_file":"django#django#5eb6a2b33d70b9889e1cafa12594ad6f80773d3a.graph.json"},"100":{"idx":100,"repo":"django\/django","instance_id":"django__django-15819","base_commit":"877c800f255ccaa7abde1fb944de45d1616f5cc9","problem_statement":"inspectdb should generate related_name on same relation links.\nDescription\n\t\nHi!\nAfter models generation with inspectdb command we have issue with relations to same enities\nmodule.Model.field1: (fields.E304) Reverse accessor for 'module.Model.field1' clashes with reverse accessor for 'module.Model.field2'.\nHINT: Add or change a related_name argument to the definition for 'module.Model.field1' or 'module.Model.field2'.\n*\nMaybe we can autogenerate\nrelated_name='attribute_name'\nto all fields in model if related Model was used for this table\n","graph_file":"django#django#877c800f255ccaa7abde1fb944de45d1616f5cc9.graph.json"},"101":{"idx":101,"repo":"django\/django","instance_id":"django__django-15851","base_commit":"b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07","problem_statement":"dbshell additional parameters should be passed before dbname on PostgreSQL.\nDescription\n\t\npsql expects all options to proceed the database name, if provided. So, if doing something like `.\/manage.py dbshell -- -c \"select * from some_table;\" one will get this:\n$ .\/manage.py dbshell -- -c \"select * from some_table;\"\npsql: warning: extra command-line argument \"-c\" ignored\npsql: warning: extra command-line argument \"select * from some_table;\" ignored\npsql (10.21)\nType \"help\" for help.\nsome_database=>\nIt appears the args list just need to be constructed in the proper order, leaving the database name for the end of the args list.\n","graph_file":"django#django#b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07.graph.json"},"102":{"idx":102,"repo":"django\/django","instance_id":"django__django-15902","base_commit":"44c24bf02835323d5418512ebe8e76166739ebf8","problem_statement":"\"default.html\" deprecation warning raised for ManagementForm's\nDescription\n\t\nI have a project where I never render forms with the {{ form }} expression. However, I'm still getting the new template deprecation warning because of the formset management form production, during which the template used is insignificant (only hidden inputs are produced).\nIs it worth special-casing this and avoid producing the warning for the management forms?\n","graph_file":"django#django#44c24bf02835323d5418512ebe8e76166739ebf8.graph.json"},"103":{"idx":103,"repo":"django\/django","instance_id":"django__django-15996","base_commit":"b30c0081d4d8a31ab7dc7f72a4c7099af606ef29","problem_statement":"Support for serialization of combination of Enum flags.\nDescription\n\t \n\t\t(last modified by Willem Van Onsem)\n\t \nIf we work with a field:\nregex_flags = models.IntegerField(default=re.UNICODE | re.IGNORECASE)\nThis is turned into a migration with:\ndefault=re.RegexFlag[None]\nThis is due to the fact that the EnumSerializer aims to work with the .name of the item, but if there is no single item for the given value, then there is no such name.\nIn that case, we can use enum._decompose to obtain a list of names, and create an expression to create the enum value by \"ORing\" the items together.\n","graph_file":"django#django#b30c0081d4d8a31ab7dc7f72a4c7099af606ef29.graph.json"},"104":{"idx":104,"repo":"django\/django","instance_id":"django__django-16041","base_commit":"6df9398cce063874ae4d59db126d4adacb0fa8d3","problem_statement":"Rendering empty_form crashes when empty_permitted is passed to form_kwargs\nDescription\n\t\nIssue\nWhen explicitly setting form_kwargs = {'empty_permitted':True} or form_kwargs = {'empty_permitted':False} , a KeyError occurs when rendering a template that uses a formset's empty_form.\nExpected Behavior\nempty_permitted is ignored for formset.empty_form since empty_permitted is irrelevant for empty_form, as empty_form is not meant to be used to pass data and therefore does not need to be validated.\nSteps to Reproduce\n# views.py\nfrom django.shortcuts import render\nfrom .models import MyModel\ndef test_view(request):\n\tcontext = {}\n\tff = modelformset_factory(MyModel, fields = ['a_field'])\n\tcontext['formset'] = ff(\n\t\tqueryset = MyModel.objects.none(),\n\t\tform_kwargs = {'empty_permitted':True} # or form_kwargs = {'empty_permitted':False}\n\t)\n\treturn render(request, 'my_app\/my_model_formset.html', context)\n# urls.py\nfrom django.urls import path, include\nfrom .views import test_view\nurlpatterns = [\n\tpath('test', test_view)\n]\n# my_model_formset.html\n{% extends \"my_app\/base.html\" %}\n{% block content %}\n<form id=\"my-form\" method=\"post\">\n {% csrf_token %}\n {{ formset }}\n <input type=\"submit\" value=\"Save\">\n<\/form>\n{{ formset.empty_form }}\n{% endblock %}\n","graph_file":"django#django#6df9398cce063874ae4d59db126d4adacb0fa8d3.graph.json"},"105":{"idx":105,"repo":"django\/django","instance_id":"django__django-16046","base_commit":"ec13e801b820614ff374cb0046092caab8d67249","problem_statement":"Fix numberformat.py \"string index out of range\" when null\nDescription\n\t\nWhen:\nif str_number[0] == \"-\"\nencounters a number field that's null when formatting for the admin list_display this causes an \nIndexError: string index out of range\nI can attach the proposed fix here, or open a pull request on GitHub if you like?\n","graph_file":"django#django#ec13e801b820614ff374cb0046092caab8d67249.graph.json"},"106":{"idx":106,"repo":"django\/django","instance_id":"django__django-16139","base_commit":"d559cb02da30f74debbb1fc3a46de0df134d2d80","problem_statement":"Accessing UserAdmin via to_field leads to link to PasswordResetForm being broken (404)\nDescription\n\t \n\t\t(last modified by Simon Kern)\n\t \nAccessing the UserAdmin via another model's Admin that has a reference to User (with to_field set, e.g., to_field=\"uuid\") leads to the UserAdmin being accessed via an url that looks similar to this one:\n...\/user\/22222222-3333-4444-5555-666677778888\/change\/?_to_field=uuid\nHowever the underlying form looks like this: \nCode highlighting:\nclass UserChangeForm(forms.ModelForm):\n\tpassword = ReadOnlyPasswordHashField(\n\t\tlabel=_(\"Password\"),\n\t\thelp_text=_(\n\t\t\t\"Raw passwords are not stored, so there is no way to see this \"\n\t\t\t\"user\u2019s password, but you can change the password using \"\n\t\t\t'<a href=\"{}\">this form<\/a>.'\n\t\t),\n\t)\n\t...\n\t...\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tpassword = self.fields.get(\"password\")\n\t\tif password:\n\t\t\tpassword.help_text = password.help_text.format(\"..\/password\/\")\n\t...\n\t...\nThis results in the link to the PasswordResetForm being wrong and thus ending up in a 404. If we drop the assumption that UserAdmin is always accessed via its pk, then we're good to go. It's as simple as replacing password.help_text = password.help_text.format(\"..\/password\/\") with password.help_text = password.help_text.format(f\"..\/..\/{self.instance.pk}\/password\/\")\nI've opened a pull request on GitHub for this Ticket, please see:\n\u200bPR\n","graph_file":"django#django#d559cb02da30f74debbb1fc3a46de0df134d2d80.graph.json"},"107":{"idx":107,"repo":"django\/django","instance_id":"django__django-16229","base_commit":"04b15022e8d1f49af69d8a1e6cd678f31f1280ff","problem_statement":"ModelForm fields with callable defaults don't correctly propagate default values\nDescription\n\t\nWhen creating an object via the admin, if an inline contains an ArrayField in error, the validation will be bypassed (and the inline dismissed) if we submit the form a second time (without modification).\ngo to \/admin\/my_app\/thing\/add\/\ntype anything in plop\nsubmit -> it shows an error on the inline\nsubmit again -> no errors, plop become unfilled\n# models.py\nclass Thing(models.Model):\n\tpass\nclass RelatedModel(models.Model):\n\tthing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\tplop = ArrayField(\n\t\tmodels.CharField(max_length=42),\n\t\tdefault=list,\n\t)\n# admin.py\nclass RelatedModelForm(forms.ModelForm):\n\tdef clean(self):\n\t\traise ValidationError(\"whatever\")\nclass RelatedModelInline(admin.TabularInline):\n\tform = RelatedModelForm\n\tmodel = RelatedModel\n\textra = 1\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n\tinlines = [\n\t\tRelatedModelInline\n\t]\nIt seems related to the hidden input containing the initial value:\n<input type=\"hidden\" name=\"initial-relatedmodel_set-0-plop\" value=\"test\" id=\"initial-relatedmodel_set-0-id_relatedmodel_set-0-plop\">\nI can fix the issue locally by forcing show_hidden_initial=False on the field (in the form init)\n","graph_file":"django#django#04b15022e8d1f49af69d8a1e6cd678f31f1280ff.graph.json"},"108":{"idx":108,"repo":"django\/django","instance_id":"django__django-16255","base_commit":"444b6da7cc229a58a2c476a52e45233001dc7073","problem_statement":"Sitemaps without items raise ValueError on callable lastmod.\nDescription\n\t\nWhen sitemap contains not items, but supports returning lastmod for an item, it fails with a ValueError:\nTraceback (most recent call last):\n File \"\/usr\/local\/lib\/python3.10\/site-packages\/django\/core\/handlers\/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n File \"\/usr\/local\/lib\/python3.10\/site-packages\/django\/core\/handlers\/base.py\", line 197, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"\/usr\/local\/lib\/python3.10\/site-packages\/django\/utils\/decorators.py\", line 133, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"\/usr\/local\/lib\/python3.10\/site-packages\/django\/contrib\/sitemaps\/views.py\", line 34, in inner\n\tresponse = func(request, *args, **kwargs)\n File \"\/usr\/local\/lib\/python3.10\/site-packages\/django\/contrib\/sitemaps\/views.py\", line 76, in index\n\tsite_lastmod = site.get_latest_lastmod()\n File \"\/usr\/local\/lib\/python3.10\/site-packages\/django\/contrib\/sitemaps\/__init__.py\", line 170, in get_latest_lastmod\n\treturn max([self.lastmod(item) for item in self.items()])\nException Type: ValueError at \/sitemap.xml\nException Value: max() arg is an empty sequence\nSomething like this might be a solution:\n\t def get_latest_lastmod(self):\n\t\t if not hasattr(self, \"lastmod\"):\n\t\t\t return None\n\t\t if callable(self.lastmod):\n\t\t\t try:\n\t\t\t\t return max([self.lastmod(item) for item in self.items()])\n-\t\t\texcept TypeError:\n+\t\t\texcept (TypeError, ValueError):\n\t\t\t\t return None\n\t\t else:\n\t\t\t return self.lastmod\n","graph_file":"django#django#444b6da7cc229a58a2c476a52e45233001dc7073.graph.json"},"109":{"idx":109,"repo":"django\/django","instance_id":"django__django-16379","base_commit":"1d0fa848e084cad62d0bb6bde3b51e4862558e57","problem_statement":"FileBasedCache has_key is susceptible to race conditions\nDescription\n\t \n\t\t(last modified by Marti Raudsepp)\n\t \nI received the exception from Django's cache framework:\nFileNotFoundError: [Errno 2] No such file or directory: '\/app\/var\/cache\/d729e4cf4ba88cba5a0f48e0396ec48a.djcache'\n[...]\n File \"django\/core\/cache\/backends\/base.py\", line 229, in get_or_set\n\tself.add(key, default, timeout=timeout, version=version)\n File \"django\/core\/cache\/backends\/filebased.py\", line 26, in add\n\tif self.has_key(key, version):\n File \"django\/core\/cache\/backends\/filebased.py\", line 94, in has_key\n\twith open(fname, \"rb\") as f:\nThe code is:\n\tdef has_key(self, key, version=None):\n\t\tfname = self._key_to_file(key, version)\n\t\tif os.path.exists(fname):\n\t\t\twith open(fname, \"rb\") as f:\n\t\t\t\treturn not self._is_expired(f)\n\t\treturn False\nBetween the exists() check and open(), it's possible for the file to be deleted. In fact, the _is_expired() method itself deletes the file if it finds it to be expired. So if many threads race to read an expired cache at once, it's not that unlikely to hit this window.\n","graph_file":"django#django#1d0fa848e084cad62d0bb6bde3b51e4862558e57.graph.json"},"110":{"idx":110,"repo":"django\/django","instance_id":"django__django-16400","base_commit":"0bd2c0c9015b53c41394a1c0989afbfd94dc2830","problem_statement":"migrate management command does not respect database parameter when adding Permissions.\nDescription\n\t \n\t\t(last modified by Vasanth)\n\t \nWhen invoking migrate with a database parameter, the migration runs successfully. However, there seems to be a DB read request that runs after the migration. This call does not respect the db param and invokes the db router .\nWhen naming the db as a parameter, all DB calls in the context of the migrate command are expected to use the database specified.\nI came across this as I am currently using a thread-local variable to get the active DB with a custom DB router for a multi-tenant service .\nMinimal example \nSetup the custom middleware and custom DB Router as show below. Then run any DB migration. We see that \"read {}\" is being printed before the exception message.\nIdeally none of this code must be called as the DB was specified during management command.\nfrom threading import local\nfrom django.conf import settings\nlocal_state = local()\nclass InvalidTenantException(Exception):\n\tpass\nclass TenantSubdomainMiddleware:\n\tdef __init__(self, get_response):\n\t\tself.get_response = get_response\n\tdef __call__(self, request):\n\t\t## Get Subdomain\n\t\thost = request.get_host().split(\":\")[0]\n\t\tlocal_state.subdomain = (\n\t\t\t# We assume single level of subdomain : app.service.com \n\t\t\t# HOST_IP : used to for local dev. \n\t\t\thost if host in settings.HOST_IP else host.split(\".\")[0]\n\t\t)\n\t\tresponse = self.get_response(request)\n\t\treturn response\nclass TenantDatabaseRouter:\n\tdef _default_db(self):\n\t\tsubdomain = getattr(local_state, \"subdomain\", None)\n\t\tif subdomain is not None and subdomain in settings.TENANT_MAP:\n\t\t\tdb_name = settings.TENANT_MAP[local_state.subdomain]\n\t\t\treturn db_name\n\t\telse:\n\t\t\traise InvalidTenantException()\n\tdef db_for_read(self, model, **hints):\n\t\tprint(\"read\", hints)\n\t\treturn self._default_db()\n\tdef db_for_write(self, model, **hints):\n\t\tprint(\"write\", hints)\n\t\treturn self._default_db()\n\tdef allow_relation(self, obj1, obj2, **hints):\n\t\treturn None\n\tdef allow_migrate(self, db, app_label, model_name=None, **hints):\n\t\treturn None\n## settings.py\nMIDDLEWARE = [\n\t\"utils.tenant_db_router.TenantSubdomainMiddleware\",\n\t\"django.middleware.security.SecurityMiddleware\",\n\t...\n]\nTENANT_MAP = {\"localhost\":\"default\", \"tenant_1\":\"default\"}\nDATABASE_ROUTERS = [\"utils.tenant_db_router.TenantDatabaseRouter\"]\n","graph_file":"django#django#0bd2c0c9015b53c41394a1c0989afbfd94dc2830.graph.json"},"111":{"idx":111,"repo":"django\/django","instance_id":"django__django-16408","base_commit":"ef85b6bf0bc5a8b194f0724cf5bbedbcee402b96","problem_statement":"Multi-level FilteredRelation with select_related() may set wrong related object.\nDescription\n\t\ntest case:\n# add to known_related_objects.tests.ExistingRelatedInstancesTests\n\tdef test_wrong_select_related(self):\n\t\twith self.assertNumQueries(3):\n\t\t\tp = list(PoolStyle.objects.annotate(\n\t\t\t\ttournament_pool=FilteredRelation('pool__tournament__pool'),\n\t\t\t\t).select_related('tournament_pool'))\n\t\t\tself.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\nresult:\n======================================================================\nFAIL: test_wrong_select_related (known_related_objects.tests.ExistingRelatedInstancesTests.test_wrong_select_related)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"D:\\Work\\django\\tests\\known_related_objects\\tests.py\", line 171, in test_wrong_select_related\n\tself.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\nAssertionError: <Tournament: Tournament object (1)> != <PoolStyle: PoolStyle object (1)>\n----------------------------------------------------------------------\n","graph_file":"django#django#ef85b6bf0bc5a8b194f0724cf5bbedbcee402b96.graph.json"},"112":{"idx":112,"repo":"django\/django","instance_id":"django__django-16527","base_commit":"bd366ca2aeffa869b7dbc0b0aa01caea75e6dc31","problem_statement":"\"show_save_as_new\" in admin can add without this permission\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nAt \"django\/contrib\/admin\/templatetags\/admin_modify.py\" file, line 102, I think you must put one more verification for this tag: \"and has_add_permission\", because \"save_as_new\" is a add modification.\nI rewrite this for my project:\n\t\t\t\"show_save_as_new\": not is_popup\n\t\t\tand has_add_permission # This line that I put!!!\n\t\t\tand has_change_permission\n\t\t\tand change\n\t\t\tand save_as,\n","graph_file":"django#django#bd366ca2aeffa869b7dbc0b0aa01caea75e6dc31.graph.json"},"113":{"idx":113,"repo":"django\/django","instance_id":"django__django-16595","base_commit":"f9fe062de5fc0896d6bbbf3f260b5c44473b3c77","problem_statement":"Migration optimizer does not reduce multiple AlterField\nDescription\n\t\nLet's consider the following operations: \noperations = [\n\tmigrations.AddField(\n\t\tmodel_name=\"book\",\n\t\tname=\"title\",\n\t\tfield=models.CharField(max_length=256, null=True),\n\t),\n\tmigrations.AlterField(\n\t\tmodel_name=\"book\",\n\t\tname=\"title\",\n\t\tfield=models.CharField(max_length=128, null=True),\n\t),\n\tmigrations.AlterField(\n\t\tmodel_name=\"book\",\n\t\tname=\"title\",\n\t\tfield=models.CharField(max_length=128, null=True, help_text=\"help\"),\n\t),\n\tmigrations.AlterField(\n\t\tmodel_name=\"book\",\n\t\tname=\"title\",\n\t\tfield=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n\t),\n]\nIf I run the optimizer, I get only the AddField, as we could expect. However, if the AddField model is separated from the AlterField (e.g. because of a non-elidable migration, or inside a non-squashed migration), none of the AlterField are reduced:\noptimizer.optimize(operations[1:], \"books\") \n[<AlterField model_name='book', name='title', field=<django.db.models.fields.CharField>>,\n <AlterField model_name='book', name='title', field=<django.db.models.fields.CharField>>,\n <AlterField model_name='book', name='title', field=<django.db.models.fields.CharField>>]\nIndeed, the AlterField.reduce does not consider the the case where operation is also an AlterField. \nIs this behaviour intended? If so, could it be documented? \nOtherwise, would it make sense to add something like\n\t\tif isinstance(operation, AlterField) and self.is_same_field_operation(\n\t\t\toperation\n\t\t):\n\t\t\treturn [operation]\n","graph_file":"django#django#f9fe062de5fc0896d6bbbf3f260b5c44473b3c77.graph.json"},"114":{"idx":114,"repo":"django\/django","instance_id":"django__django-16816","base_commit":"191f6a9a4586b5e5f79f4f42f190e7ad4bbacc84","problem_statement":"Error E108 does not cover some cases\nDescription\n\t \n\t\t(last modified by Baha Sdtbekov)\n\t \nI have two models, Question and Choice. And if I write list_display = [\"choice\"] in QuestionAdmin, I get no errors.\nBut when I visit \/admin\/polls\/question\/, the following trace is returned:\nInternal Server Error: \/admin\/polls\/question\/\nTraceback (most recent call last):\n File \"\/some\/path\/django\/contrib\/admin\/utils.py\", line 334, in label_for_field\n\tfield = _get_non_gfk_field(model._meta, name)\n File \"\/some\/path\/django\/contrib\/admin\/utils.py\", line 310, in _get_non_gfk_field\n\traise FieldDoesNotExist()\ndjango.core.exceptions.FieldDoesNotExist\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n File \"\/some\/path\/django\/core\/handlers\/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n File \"\/some\/path\/django\/core\/handlers\/base.py\", line 220, in _get_response\n\tresponse = response.render()\n File \"\/some\/path\/django\/template\/response.py\", line 111, in render\n\tself.content = self.rendered_content\n File \"\/some\/path\/django\/template\/response.py\", line 89, in rendered_content\n\treturn template.render(context, self._request)\n File \"\/some\/path\/django\/template\/backends\/django.py\", line 61, in render\n\treturn self.template.render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 175, in render\n\treturn self._render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 167, in _render\n\treturn self.nodelist.render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 966, in render_annotated\n\treturn self.render(context)\n File \"\/some\/path\/django\/template\/loader_tags.py\", line 157, in render\n\treturn compiled_parent._render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 167, in _render\n\treturn self.nodelist.render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 966, in render_annotated\n\treturn self.render(context)\n File \"\/some\/path\/django\/template\/loader_tags.py\", line 157, in render\n\treturn compiled_parent._render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 167, in _render\n\treturn self.nodelist.render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 966, in render_annotated\n\treturn self.render(context)\n File \"\/some\/path\/django\/template\/loader_tags.py\", line 63, in render\n\tresult = block.nodelist.render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 966, in render_annotated\n\treturn self.render(context)\n File \"\/some\/path\/django\/template\/loader_tags.py\", line 63, in render\n\tresult = block.nodelist.render(context)\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 1005, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n File \"\/some\/path\/django\/template\/base.py\", line 966, in render_annotated\n\treturn self.render(context)\n File \"\/some\/path\/django\/contrib\/admin\/templatetags\/base.py\", line 45, in render\n\treturn super().render(context)\n File \"\/some\/path\/django\/template\/library.py\", line 258, in render\n\t_dict = self.func(*resolved_args, **resolved_kwargs)\n File \"\/some\/path\/django\/contrib\/admin\/templatetags\/admin_list.py\", line 326, in result_list\n\theaders = list(result_headers(cl))\n File \"\/some\/path\/django\/contrib\/admin\/templatetags\/admin_list.py\", line 90, in result_headers\n\ttext, attr = label_for_field(\n File \"\/some\/path\/django\/contrib\/admin\/utils.py\", line 362, in label_for_field\n\traise AttributeError(message)\nAttributeError: Unable to lookup 'choice' on Question or QuestionAdmin\n[24\/Apr\/2023 15:43:32] \"GET \/admin\/polls\/question\/ HTTP\/1.1\" 500 349913\nI suggest that error E108 be updated to cover this case as well\nFor reproduce see \u200bgithub\n","graph_file":"django#django#191f6a9a4586b5e5f79f4f42f190e7ad4bbacc84.graph.json"},"115":{"idx":115,"repo":"django\/django","instance_id":"django__django-16820","base_commit":"c61219a7ae051d2baab53f041e00592011fc550c","problem_statement":"Squashing migrations with Meta.index_together -> indexes transition should remove deprecation warnings.\nDescription\n\t\nSquashing migrations with Meta.index_together -> Meta.indexes transition should remove deprecation warnings. As far as I'm aware, it's a 4.2 release blocker because you cannot get rid of the index_together deprecation warnings without rewriting migrations, see comment.\n","graph_file":"django#django#c61219a7ae051d2baab53f041e00592011fc550c.graph.json"},"116":{"idx":116,"repo":"django\/django","instance_id":"django__django-16873","base_commit":"fce90950bef348803fa7cc3e6bc65f4bce429b82","problem_statement":"Template filter `join` should not escape the joining string if `autoescape` is `off`\nDescription\n\t\nConsider the following template code snippet:\n{% autoescape off %}\n{{ some_list|join:some_var }}\n{% endautoescape %}\nin this case, the items inside some_list will not be escaped (matching the expected behavior) but some_var will forcibly be escaped. From the docs for autoescape or join I don't think this is expected behavior.\nThe following testcase illustrates what I think is a bug in the join filter (run inside the template_tests\/filter_tests folder):\nfrom django.template.defaultfilters import escape\nfrom django.test import SimpleTestCase\nfrom ..utils import setup\nclass RegressionTests(SimpleTestCase):\n\t@setup({\"join01\": '{{ some_list|join:some_var }}'})\n\tdef test_join01(self):\n\t\tsome_list = [\"<p>Hello World!<\/p>\", \"beta & me\", \"<script>Hi!<\/script>\"]\n\t\tsome_var = \"<br\/>\"\n\t\toutput = self.engine.render_to_string(\"join01\", {\"some_list\": some_list, \"some_var\": some_var})\n\t\tself.assertEqual(output, escape(some_var.join(some_list)))\n\t@setup({\"join02\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n\tdef test_join02(self):\n\t\tsome_list = [\"<p>Hello World!<\/p>\", \"beta & me\", \"<script>Hi!<\/script>\"]\n\t\tsome_var = \"<br\/>\"\n\t\toutput = self.engine.render_to_string(\"join02\", {\"some_list\": some_list, \"some_var\": some_var})\n\t\tself.assertEqual(output, some_var.join(some_list))\nResult of this run in current main is:\n.F\n======================================================================\nFAIL: test_join02 (template_tests.filter_tests.test_regression.RegressionTests.test_join02)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"\/home\/nessita\/fellowship\/django\/django\/test\/utils.py\", line 443, in inner\n\treturn func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^\n File \"\/home\/nessita\/fellowship\/django\/tests\/template_tests\/utils.py\", line 58, in inner\n\tfunc(self)\n File \"\/home\/nessita\/fellowship\/django\/tests\/template_tests\/filter_tests\/test_regression.py\", line 21, in test_join02\n\tself.assertEqual(output, some_var.join(some_list))\nAssertionError: '<p>Hello World!<\/p>&lt;br\/&gt;beta & me&lt;br\/&gt;<script>Hi!<\/script>' != '<p>Hello World!<\/p><br\/>beta & me<br\/><script>Hi!<\/script>'\n----------------------------------------------------------------------\nRan 2 tests in 0.007s\n","graph_file":"django#django#fce90950bef348803fa7cc3e6bc65f4bce429b82.graph.json"},"117":{"idx":117,"repo":"django\/django","instance_id":"django__django-16910","base_commit":"4142739af1cda53581af4169dbe16d6cd5e26948","problem_statement":"QuerySet.only() doesn't work with select_related() on a reverse OneToOneField relation.\nDescription\n\t\nOn Django 4.2 calling only() with select_related() on a query using the reverse lookup for a OneToOne relation does not generate the correct query.\nAll the fields from the related model are still included in the generated SQL.\nSample models:\nclass Main(models.Model):\n\tmain_field_1 = models.CharField(blank=True, max_length=45)\n\tmain_field_2 = models.CharField(blank=True, max_length=45)\n\tmain_field_3 = models.CharField(blank=True, max_length=45)\nclass Secondary(models.Model):\n\tmain = models.OneToOneField(Main, primary_key=True, related_name='secondary', on_delete=models.CASCADE)\n\tsecondary_field_1 = models.CharField(blank=True, max_length=45)\n\tsecondary_field_2 = models.CharField(blank=True, max_length=45)\n\tsecondary_field_3 = models.CharField(blank=True, max_length=45)\nSample code:\nMain.objects.select_related('secondary').only('main_field_1', 'secondary__secondary_field_1')\nGenerated query on Django 4.2.1:\nSELECT \"bugtest_main\".\"id\", \"bugtest_main\".\"main_field_1\", \"bugtest_secondary\".\"main_id\", \"bugtest_secondary\".\"secondary_field_1\", \"bugtest_secondary\".\"secondary_field_2\", \"bugtest_secondary\".\"secondary_field_3\" FROM \"bugtest_main\" LEFT OUTER JOIN \"bugtest_secondary\" ON (\"bugtest_main\".\"id\" = \"bugtest_secondary\".\"main_id\")\nGenerated query on Django 4.1.9:\nSELECT \"bugtest_main\".\"id\", \"bugtest_main\".\"main_field_1\", \"bugtest_secondary\".\"main_id\", \"bugtest_secondary\".\"secondary_field_1\" FROM \"bugtest_main\" LEFT OUTER JOIN \"bugtest_secondary\" ON (\"bugtest_main\".\"id\" = \"bugtest_secondary\".\"main_id\")\n","graph_file":"django#django#4142739af1cda53581af4169dbe16d6cd5e26948.graph.json"},"118":{"idx":118,"repo":"django\/django","instance_id":"django__django-17051","base_commit":"b7a17b0ea0a2061bae752a3a2292007d41825814","problem_statement":"Allow returning IDs in QuerySet.bulk_create() when updating conflicts.\nDescription\n\t\nCurrently, when using bulk_create with a conflict handling flag turned on (e.g. ignore_conflicts or update_conflicts), the primary keys are not set in the returned queryset, as documented in bulk_create.\nWhile I understand using ignore_conflicts can lead to PostgreSQL not returning the IDs when a row is ignored (see \u200bthis SO thread), I don't understand why we don't return the IDs in the case of update_conflicts.\nFor instance:\nMyModel.objects.bulk_create([MyModel(...)], update_conflicts=True, update_fields=[...], unique_fields=[...])\ngenerates a query without a RETURNING my_model.id part:\nINSERT INTO \"my_model\" (...)\nVALUES (...)\n\tON CONFLICT(...) DO UPDATE ...\nIf I append the RETURNING my_model.id clause, the query is indeed valid and the ID is returned (checked with PostgreSQL).\nI investigated a bit and \u200bthis in Django source is where the returning_fields gets removed.\nI believe we could discriminate the cases differently so as to keep those returning_fields in the case of update_conflicts.\nThis would be highly helpful when using bulk_create as a bulk upsert feature.\n","graph_file":"django#django#b7a17b0ea0a2061bae752a3a2292007d41825814.graph.json"},"119":{"idx":119,"repo":"django\/django","instance_id":"django__django-17087","base_commit":"4a72da71001f154ea60906a2f74898d32b7322a7","problem_statement":"Class methods from nested classes cannot be used as Field.default.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nGiven the following model:\n \nclass Profile(models.Model):\n\tclass Capability(models.TextChoices):\n\t\tBASIC = (\"BASIC\", \"Basic\")\n\t\tPROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n\t\t\n\t\t@classmethod\n\t\tdef default(cls) -> list[str]:\n\t\t\treturn [cls.BASIC]\n\tcapabilities = ArrayField(\n\t\tmodels.CharField(choices=Capability.choices, max_length=30, blank=True),\n\t\tnull=True,\n\t\tdefault=Capability.default\n\t)\nThe resulting migration contained the following:\n # ...\n\t migrations.AddField(\n\t\t model_name='profile',\n\t\t name='capabilities',\n\t\t field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')], max_length=30), default=appname.models.Capability.default, null=True, size=None),\n\t ),\n # ...\nAs you can see, migrations.AddField is passed as argument \"default\" a wrong value \"appname.models.Capability.default\", which leads to an error when trying to migrate. The right value should be \"appname.models.Profile.Capability.default\".\n","graph_file":"django#django#4a72da71001f154ea60906a2f74898d32b7322a7.graph.json"},"120":{"idx":120,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-18869","base_commit":"b7d05919865fc0c37a0164cf467d5d5513bd0ede","problem_statement":"Add easily comparable version info to toplevel\n<!--\r\nWelcome! Thanks for thinking of a way to improve Matplotlib.\r\n\r\n\r\nBefore creating a new feature request please search the issues for relevant feature requests.\r\n-->\r\n\r\n### Problem\r\n\r\nCurrently matplotlib only exposes `__version__`.  For quick version checks, exposing either a `version_info` tuple (which can be compared with other tuples) or a `LooseVersion` instance (which can be properly compared with other strings) would be a small usability improvement.\r\n\r\n(In practice I guess boring string comparisons will work just fine until we hit mpl 3.10 or 4.10 which is unlikely to happen soon, but that feels quite dirty :))\r\n<!--\r\nProvide a clear and concise description of the problem this feature will solve. \r\n\r\nFor example:\r\n* I'm always frustrated when [...] because [...]\r\n* I would like it if [...] happened when I [...] because [...]\r\n* Here is a sample image of what I am asking for [...]\r\n-->\r\n\r\n### Proposed Solution\r\n\r\nI guess I slightly prefer `LooseVersion`, but exposing just a `version_info` tuple is much more common in other packages (and perhaps simpler to understand).  The hardest(?) part is probably just bikeshedding this point :-)\r\n<!-- Provide a clear and concise description of a way to accomplish what you want. For example:\r\n\r\n* Add an option so that when [...]  [...] will happen\r\n -->\r\n\r\n### Additional context and prior art\r\n\r\n`version_info` is a pretty common thing (citation needed).\r\n<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:\r\n\r\n* Another project [...] solved this by [...]\r\n-->\r\n\n","graph_file":"matplotlib#matplotlib#b7d05919865fc0c37a0164cf467d5d5513bd0ede.graph.json"},"121":{"idx":121,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-22711","base_commit":"f670fe78795b18eb1118707721852209cd77ad51","problem_statement":"[Bug]: cannot give init value for RangeSlider widget\n### Bug summary\r\n\r\nI think `xy[4] = .25, val[0]` should be commented in \/matplotlib\/widgets. py\", line 915, in set_val\r\nas it prevents to initialized value for RangeSlider\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import RangeSlider\r\n\r\n# generate a fake image\r\nnp.random.seed(19680801)\r\nN = 128\r\nimg = np.random.randn(N, N)\r\n\r\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\r\nfig.subplots_adjust(bottom=0.25)\r\n\r\nim = axs[0].imshow(img)\r\naxs[1].hist(img.flatten(), bins='auto')\r\naxs[1].set_title('Histogram of pixel intensities')\r\n\r\n# Create the RangeSlider\r\nslider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])\r\nslider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n# Create the Vertical lines on the histogram\r\nlower_limit_line = axs[1].axvline(slider.val[0], color='k')\r\nupper_limit_line = axs[1].axvline(slider.val[1], color='k')\r\n\r\n\r\ndef update(val):\r\n    # The val passed to a callback by the RangeSlider will\r\n    # be a tuple of (min, max)\r\n\r\n    # Update the image's colormap\r\n    im.norm.vmin = val[0]\r\n    im.norm.vmax = val[1]\r\n\r\n    # Update the position of the vertical lines\r\n    lower_limit_line.set_xdata([val[0], val[0]])\r\n    upper_limit_line.set_xdata([val[1], val[1]])\r\n\r\n    # Redraw the figure to ensure it updates\r\n    fig.canvas.draw_idle()\r\n\r\n\r\nslider.on_changed(update)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```python\r\n  File \"<ipython-input-52-b704c53e18d4>\", line 19, in <module>\r\n    slider = RangeSlider(slider_ax, \"Threshold\", img.min(), img.max(),valinit=[0.0,0.0])\r\n\r\n  File \"\/Users\/Vincent\/opt\/anaconda3\/envs\/py38\/lib\/python3.8\/site-packages\/matplotlib\/widgets.py\", line 778, in __init__\r\n    self.set_val(valinit)\r\n\r\n  File \"\/Users\/Vincent\/opt\/anaconda3\/envs\/py38\/lib\/python3.8\/site-packages\/matplotlib\/widgets.py\", line 915, in set_val\r\n    xy[4] = val[0], .25\r\n\r\nIndexError: index 4 is out of bounds for axis 0 with size 4\r\n```\r\n\r\n### Expected outcome\r\n\r\nrange slider with user initial values\r\n\r\n### Additional information\r\n\r\nerror can be removed by commenting this line\r\n```python\r\n\r\n    def set_val(self, val):\r\n        \"\"\"\r\n        Set slider value to *val*.\r\n\r\n        Parameters\r\n        ----------\r\n        val : tuple or array-like of float\r\n        \"\"\"\r\n        val = np.sort(np.asanyarray(val))\r\n        if val.shape != (2,):\r\n            raise ValueError(\r\n                f\"val must have shape (2,) but has shape {val.shape}\"\r\n            )\r\n        val[0] = self._min_in_bounds(val[0])\r\n        val[1] = self._max_in_bounds(val[1])\r\n        xy = self.poly.xy\r\n        if self.orientation == \"vertical\":\r\n            xy[0] = .25, val[0]\r\n            xy[1] = .25, val[1]\r\n            xy[2] = .75, val[1]\r\n            xy[3] = .75, val[0]\r\n            # xy[4] = .25, val[0]\r\n        else:\r\n            xy[0] = val[0], .25\r\n            xy[1] = val[0], .75\r\n            xy[2] = val[1], .75\r\n            xy[3] = val[1], .25\r\n            # xy[4] = val[0], .25\r\n        self.poly.xy = xy\r\n        self.valtext.set_text(self._format(val))\r\n        if self.drawon:\r\n            self.ax.figure.canvas.draw_idle()\r\n        self.val = val\r\n        if self.eventson:\r\n            self._observers.process(\"changed\", val)\r\n\r\n```\r\n\r\n### Operating system\r\n\r\nOSX\r\n\r\n### Matplotlib Version\r\n\r\n3.5.1\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.8\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n","graph_file":"matplotlib#matplotlib#f670fe78795b18eb1118707721852209cd77ad51.graph.json"},"122":{"idx":122,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-22835","base_commit":"c33557d120eefe3148ebfcf2e758ff2357966000","problem_statement":"[Bug]: scalar mappable format_cursor_data crashes on BoundarNorm\n### Bug summary\r\n\r\nIn 3.5.0 if you do:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib as mpl\r\n\r\nfig, ax = plt.subplots()\r\nnorm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\r\nX = np.random.randn(10, 10)\r\npc = ax.imshow(X, cmap='RdBu_r', norm=norm)\r\n```\r\n\r\nand mouse over the image, it crashes with\r\n\r\n```\r\nFile \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/artist.py\", line 1282, in format_cursor_data\r\n    neighbors = self.norm.inverse(\r\n  File \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/colors.py\", line 1829, in inverse\r\n    raise ValueError(\"BoundaryNorm is not invertible\")\r\nValueError: BoundaryNorm is not invertible\r\n```\r\n\r\nand interaction stops.  \r\n\r\nNot sure if we should have a special check here, a try-except, or actually just make BoundaryNorm approximately invertible.  \r\n\r\n\r\n### Matplotlib Version\r\n\r\nmain 3.5.0\r\n\r\n\n[Bug]: scalar mappable format_cursor_data crashes on BoundarNorm\n### Bug summary\r\n\r\nIn 3.5.0 if you do:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib as mpl\r\n\r\nfig, ax = plt.subplots()\r\nnorm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\r\nX = np.random.randn(10, 10)\r\npc = ax.imshow(X, cmap='RdBu_r', norm=norm)\r\n```\r\n\r\nand mouse over the image, it crashes with\r\n\r\n```\r\nFile \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/artist.py\", line 1282, in format_cursor_data\r\n    neighbors = self.norm.inverse(\r\n  File \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/colors.py\", line 1829, in inverse\r\n    raise ValueError(\"BoundaryNorm is not invertible\")\r\nValueError: BoundaryNorm is not invertible\r\n```\r\n\r\nand interaction stops.  \r\n\r\nNot sure if we should have a special check here, a try-except, or actually just make BoundaryNorm approximately invertible.  \r\n\r\n\r\n### Matplotlib Version\r\n\r\nmain 3.5.0\r\n\r\n\n","graph_file":"matplotlib#matplotlib#c33557d120eefe3148ebfcf2e758ff2357966000.graph.json"},"123":{"idx":123,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23299","base_commit":"3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39","problem_statement":"[Bug]: get_backend() clears figures from Gcf.figs if they were created under rc_context\n### Bug summary\r\n\r\ncalling `matplotlib.get_backend()` removes all figures from `Gcf` if the *first* figure in `Gcf.figs` was created in an `rc_context`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import get_backend, rc_context\r\n\r\n# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK\r\n# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK\r\nwith rc_context():\r\n    fig2 = plt.figure()\r\nbefore = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\r\nget_backend()\r\nafter = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\r\n\r\nassert before == after, '\\n' + before + '\\n' + after\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-1-fa4d099aa289> in <cell line: 11>()\r\n      9 after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\r\n     10 \r\n---> 11 assert before == after, '\\n' + before + '\\n' + after\r\n     12 \r\n\r\nAssertionError: \r\n94453354309744 OrderedDict([(1, <matplotlib.backends.backend_qt.FigureManagerQT object at 0x7fb33e26c220>)])\r\n94453354309744 OrderedDict()\r\n```\r\n\r\n### Expected outcome\r\n\r\nThe figure should not be missing from `Gcf`.  Consequences of this are, e.g, `plt.close(fig2)` doesn't work because `Gcf.destroy_fig()` can't find it.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nXubuntu\r\n\r\n### Matplotlib Version\r\n\r\n3.5.2\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\nPython 3.10.4\r\n\r\n### Jupyter version\r\n\r\nn\/a\r\n\r\n### Installation\r\n\r\nconda\n","graph_file":"matplotlib#matplotlib#3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39.graph.json"},"124":{"idx":124,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23314","base_commit":"97fc1154992f64cfb2f86321155a7404efeb2d8a","problem_statement":"[Bug]: set_visible() not working for 3d projection \n### Bug summary\r\n\r\nin the subplot projection=\"3d\" the set_visible function doesn't work even if the value is set to False\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.gridspec import GridSpec\r\n\r\nfig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})\r\nax1.scatter(1,1,1)\r\nax2.scatter(1,1,1, c='r')\r\nax1.set_visible(False)\r\n\r\nplt.show()\r\n# Thanks Tim for your help! \r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nthe subplot remains visible which should not happen if the value is set to False\r\n\r\n### Expected outcome\r\n\r\nthe subplot is not visible if the value is set to False\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.4.2\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\n3.8.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\n_No response_\n","graph_file":"matplotlib#matplotlib#97fc1154992f64cfb2f86321155a7404efeb2d8a.graph.json"},"125":{"idx":125,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23476","base_commit":"33a0599711d26dc2b79f851c6daed4947df7c167","problem_statement":"[Bug]: DPI of a figure is doubled after unpickling on M1 Mac\n### Bug summary\r\n\r\nWhen a figure is unpickled, it's dpi is doubled. This behaviour happens every time and if done in a loop it can cause an `OverflowError`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\nimport platform\r\n\r\nprint(matplotlib.get_backend())\r\nprint('Matplotlib ver:', matplotlib.__version__)\r\nprint('Platform:', platform.platform())\r\nprint('System:', platform.system())\r\nprint('Release:', platform.release())\r\nprint('Python ver:', platform.python_version())\r\n\r\n\r\ndef dump_load_get_dpi(fig):\r\n    with open('sinus.pickle','wb') as file:\r\n        pickle.dump(fig, file)\r\n\r\n    with open('sinus.pickle', 'rb') as blob:\r\n        fig2 = pickle.load(blob)\r\n    return fig2, fig2.dpi\r\n\r\n\r\ndef run():\r\n    fig = plt.figure()\r\n    x = np.linspace(0,2*np.pi)\r\n    y = np.sin(x)\r\n\r\n    for i in range(32):\r\n        print(f'{i}: {fig.dpi}')\r\n        fig, dpi = dump_load_get_dpi(fig)\r\n\r\n\r\nif __name__ == '__main__':\r\n    run()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nMacOSX\r\nMatplotlib ver: 3.5.2\r\nPlatform: macOS-12.4-arm64-arm-64bit\r\nSystem: Darwin\r\nRelease: 21.5.0\r\nPython ver: 3.9.12\r\n0: 200.0\r\n1: 400.0\r\n2: 800.0\r\n3: 1600.0\r\n4: 3200.0\r\n5: 6400.0\r\n6: 12800.0\r\n7: 25600.0\r\n8: 51200.0\r\n9: 102400.0\r\n10: 204800.0\r\n11: 409600.0\r\n12: 819200.0\r\n13: 1638400.0\r\n14: 3276800.0\r\n15: 6553600.0\r\n16: 13107200.0\r\n17: 26214400.0\r\n18: 52428800.0\r\n19: 104857600.0\r\n20: 209715200.0\r\n21: 419430400.0\r\nTraceback (most recent call last):\r\n  File \"\/Users\/wsykala\/projects\/matplotlib\/example.py\", line 34, in <module>\r\n    run()\r\n  File \"\/Users\/wsykala\/projects\/matplotlib\/example.py\", line 30, in run\r\n    fig, dpi = dump_load_get_dpi(fig)\r\n  File \"\/Users\/wsykala\/projects\/matplotlib\/example.py\", line 20, in dump_load_get_dpi\r\n    fig2 = pickle.load(blob)\r\n  File \"\/Users\/wsykala\/miniconda3\/envs\/playground\/lib\/python3.9\/site-packages\/matplotlib\/figure.py\", line 2911, in __setstate__\r\n    mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\r\n  File \"\/Users\/wsykala\/miniconda3\/envs\/playground\/lib\/python3.9\/site-packages\/matplotlib\/backend_bases.py\", line 3499, in new_figure_manager_given_figure\r\n    canvas = cls.FigureCanvas(figure)\r\n  File \"\/Users\/wsykala\/miniconda3\/envs\/playground\/lib\/python3.9\/site-packages\/matplotlib\/backends\/backend_macosx.py\", line 32, in __init__\r\n    _macosx.FigureCanvas.__init__(self, width, height)\r\nOverflowError: signed integer is greater than maximum\r\n```\r\n\r\n### Expected outcome\r\n\r\n```\r\nMacOSX\r\nMatplotlib ver: 3.5.2\r\nPlatform: macOS-12.4-arm64-arm-64bit\r\nSystem: Darwin\r\nRelease: 21.5.0\r\nPython ver: 3.9.12\r\n0: 200.0\r\n1: 200.0\r\n2: 200.0\r\n3: 200.0\r\n4: 200.0\r\n5: 200.0\r\n6: 200.0\r\n7: 200.0\r\n8: 200.0\r\n9: 200.0\r\n10: 200.0\r\n11: 200.0\r\n12: 200.0\r\n13: 200.0\r\n14: 200.0\r\n15: 200.0\r\n16: 200.0\r\n17: 200.0\r\n18: 200.0\r\n19: 200.0\r\n20: 200.0\r\n21: 200.0\r\n22: 200.0\r\n```\r\n\r\n### Additional information\r\n\r\nThis seems to happen only on M1 MacBooks and the version of python doesn't matter.\r\n\r\n### Operating system\r\n\r\nOS\/X\r\n\r\n### Matplotlib Version\r\n\r\n3.5.2\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\n3.9.12\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n","graph_file":"matplotlib#matplotlib#33a0599711d26dc2b79f851c6daed4947df7c167.graph.json"},"126":{"idx":126,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23562","base_commit":"29a86636a9c45ab5ac4d80ac76eaee497f460dce","problem_statement":"'Poly3DCollection' object has no attribute '_facecolors2d'\nThe following minimal example demonstrates the issue:\n\n```\nimport numpy as np\nimport matplotlib.tri as mtri\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ny,x = np.ogrid[1:10:100j, 1:10:100j]\nz2 = np.cos(x)**3 - np.sin(y)**2\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nr = ax.plot_surface(x,y,z2, cmap='hot')\nr.get_facecolors()\n```\n\nIt fails on the last line with the following traceback:\n\n```\nAttributeError                            Traceback (most recent call last)\n<ipython-input-13-de0f41d662cd> in <module>()\n----> 1 r.get_facecolors()\n\n\/home\/oliver\/.virtualenvs\/mpl\/local\/lib\/python2.7\/site-packages\/mpl_toolkits\/mplot3d\/art3d.pyc in get_facecolors(self)\n    634\n    635     def get_facecolors(self):\n--> 636         return self._facecolors2d\n    637     get_facecolor = get_facecolors\n    638\n\nAttributeError: 'Poly3DCollection' object has no attribute '_facecolors2d'\n```\n\nTested with mpl versions 1.3.1 and 1.4.2.\n\nSent here by Benjamin, from the mpl users mailing list (mail with the same title). Sorry for dumping this without more assistance, I'm not yet at a python level where I can help in debugging, I think (well, it seems daunting).\n\n","graph_file":"matplotlib#matplotlib#29a86636a9c45ab5ac4d80ac76eaee497f460dce.graph.json"},"127":{"idx":127,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23563","base_commit":"149a0398b391cfc4eddb5e659f50b3c66f32ea65","problem_statement":"[Bug]: 'Line3D' object has no attribute '_verts3d'\n### Bug summary\n\nI use matplotlib 3D to visualize some lines in 3D. When I first run the following code, the code can run right. But, if I give `x_s_0[n]` a numpy array, it will report the error 'input operand has more dimensions than allowed by the axis remapping'. The point is when next I give  `x_s_0[n]` and other variables an int number, the AttributeError: 'Line3D' object has no attribute '_verts3d' will appear and can not be fixed whatever I change the variables or delete them. The error can be only fixed when I restart the kernel of ipython console. I don't know why it happens, so I come here for help.\n\n### Code for reproduction\n\n```python\nx_s_0 = np.array(['my int number list'])\r\nx_e_0 = np.array(['my int number list'])\r\ny_s_0 = np.array(['my int number list'])\r\ny_e_0 = np.array(['my int number list'])\r\nz_s_0 = np.array(['my int number list'])\r\nz_e_0 = np.array(['my int number list'])\r\n\r\nfig = plt.figure()\r\n        ax = fig.gca(projection='3d')\r\n        ax.view_init(elev=90, azim=0)\r\n        ax.set_zlim3d(-10, 10)\r\n        clr_list = 'r-'\r\n\r\n        for n in range(np.size(z_s_0, axis=0)):\r\n            ax.plot([int(x_s_0[n]), int(x_e_0[n])],\r\n                    [int(y_s_0[n]), int(y_e_0[n])],\r\n                    [int(z_s_0[n]), int(z_e_0[n])], clr_list)\r\n\r\n        plt.xlabel('x')\r\n        plt.ylabel('y')\r\n        # ax.zlabel('z')\r\n        plt.title('90-0')\r\n        plt.show()\n```\n\n\n### Actual outcome\n\nTraceback (most recent call last):\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/IPython\/core\/interactiveshell.py\", line 3444, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-80-e04907066a16>\", line 20, in <module>\r\n    plt.show()\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/pyplot.py\", line 368, in show\r\n    return _backend_mod.show(*args, **kwargs)\r\n  File \"\/home\/hanyaning\/.pycharm_helpers\/pycharm_matplotlib_backend\/backend_interagg.py\", line 29, in __call__\r\n    manager.show(**kwargs)\r\n  File \"\/home\/hanyaning\/.pycharm_helpers\/pycharm_matplotlib_backend\/backend_interagg.py\", line 112, in show\r\n    self.canvas.show()\r\n  File \"\/home\/hanyaning\/.pycharm_helpers\/pycharm_matplotlib_backend\/backend_interagg.py\", line 68, in show\r\n    FigureCanvasAgg.draw(self)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/backends\/backend_agg.py\", line 436, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/artist.py\", line 73, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/figure.py\", line 2803, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/mpl_toolkits\/mplot3d\/axes3d.py\", line 469, in draw\r\n    super().draw(renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/axes\/_base.py\", line 3082, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/matplotlib\/artist.py\", line 50, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/hanyaning\/anaconda3\/envs\/SBeA\/lib\/python3.8\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py\", line 215, in draw\r\n    xs3d, ys3d, zs3d = self._verts3d\r\nAttributeError: 'Line3D' object has no attribute '_verts3d'\n\n### Expected outcome\n\nSome 3D lines\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nLocal: windows + pycharm, Remote: Ubuntu 20.04\n\n### Matplotlib Version\n\n3.5.0\n\n### Matplotlib Backend\n\nmodule:\/\/backend_interagg\n\n### Python version\n\n3.8.12\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n","graph_file":"matplotlib#matplotlib#149a0398b391cfc4eddb5e659f50b3c66f32ea65.graph.json"},"128":{"idx":128,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23913","base_commit":"5c4595267ccd3daf78f5fd05693b7ecbcd575c1e","problem_statement":"legend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n","graph_file":"matplotlib#matplotlib#5c4595267ccd3daf78f5fd05693b7ecbcd575c1e.graph.json"},"129":{"idx":129,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23964","base_commit":"269c0b94b4fcf8b1135011c1556eac29dc09de15","problem_statement":"[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ .\/venv\/Scripts\/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n","graph_file":"matplotlib#matplotlib#269c0b94b4fcf8b1135011c1556eac29dc09de15.graph.json"},"130":{"idx":130,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-23987","base_commit":"e98d8d085e8f53ec0467422b326f7738a2dd695e","problem_statement":"[Bug]: Constrained layout UserWarning even when False\n### Bug summary\r\n\r\nWhen using layout settings such as `plt.subplots_adjust` or `bbox_inches='tight`, a UserWarning is produced due to incompatibility with constrained_layout, even if constrained_layout = False. This was not the case in previous versions.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\na = np.linspace(0,2*np.pi,100)\r\nb = np.sin(a)\r\nc = np.cos(a)\r\nfig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\r\nax[0].plot(a,b)\r\nax[1].plot(a,c)\r\nplt.subplots_adjust(wspace=0)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nThe plot works fine but the warning is generated\r\n\r\n`\/var\/folders\/ss\/pfgdfm2x7_s4cyw2v0b_t7q80000gn\/T\/ipykernel_76923\/4170965423.py:7: UserWarning: This figure was using a layout engine that is incompatible with subplots_adjust and\/or tight_layout; not calling subplots_adjust.\r\n  plt.subplots_adjust(wspace=0)`\r\n\r\n### Expected outcome\r\n\r\nno warning\r\n\r\n### Additional information\r\n\r\nWarning disappears when constrained_layout=False is removed\r\n\r\n### Operating system\r\n\r\nOS\/X\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n","graph_file":"matplotlib#matplotlib#e98d8d085e8f53ec0467422b326f7738a2dd695e.graph.json"},"131":{"idx":131,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-24149","base_commit":"af39f1edffcd828f05cfdd04f2e59506bb4a27bc","problem_statement":"[Bug]: ax.bar raises for all-nan data on matplotlib 3.6.1 \n### Bug summary\n\n`ax.bar` raises an exception in 3.6.1 when passed only nan data. This irrevocably breaks seaborn's histogram function (which draws and then removes a \"phantom\" bar to trip the color cycle).\n\n### Code for reproduction\n\n```python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nf, ax = plt.subplots()\r\nax.bar([np.nan], [np.nan])\n```\n\n\n### Actual outcome\n\n```python-traceback\r\n---------------------------------------------------------------------------\r\nStopIteration                             Traceback (most recent call last)\r\nCell In [1], line 4\r\n      2 import matplotlib.pyplot as plt\r\n      3 f, ax = plt.subplots()\r\n----> 4 ax.bar([np.nan], [np.nan])[0].get_x()\r\n\r\nFile ~\/miniconda\/envs\/py310\/lib\/python3.10\/site-packages\/matplotlib\/__init__.py:1423, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\r\n   1420 @functools.wraps(func)\r\n   1421 def inner(ax, *args, data=None, **kwargs):\r\n   1422     if data is None:\r\n-> 1423         return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   1425     bound = new_sig.bind(ax, *args, **kwargs)\r\n   1426     auto_label = (bound.arguments.get(label_namer)\r\n   1427                   or bound.kwargs.get(label_namer))\r\n\r\nFile ~\/miniconda\/envs\/py310\/lib\/python3.10\/site-packages\/matplotlib\/axes\/_axes.py:2373, in Axes.bar(self, x, height, width, bottom, align, **kwargs)\r\n   2371 x0 = x\r\n   2372 x = np.asarray(self.convert_xunits(x))\r\n-> 2373 width = self._convert_dx(width, x0, x, self.convert_xunits)\r\n   2374 if xerr is not None:\r\n   2375     xerr = self._convert_dx(xerr, x0, x, self.convert_xunits)\r\n\r\nFile ~\/miniconda\/envs\/py310\/lib\/python3.10\/site-packages\/matplotlib\/axes\/_axes.py:2182, in Axes._convert_dx(dx, x0, xconv, convert)\r\n   2170 try:\r\n   2171     # attempt to add the width to x0; this works for\r\n   2172     # datetime+timedelta, for instance\r\n   (...)\r\n   2179     # removes the units from unit packages like `pint` that\r\n   2180     # wrap numpy arrays.\r\n   2181     try:\r\n-> 2182         x0 = cbook._safe_first_finite(x0)\r\n   2183     except (TypeError, IndexError, KeyError):\r\n   2184         pass\r\n\r\nFile ~\/miniconda\/envs\/py310\/lib\/python3.10\/site-packages\/matplotlib\/cbook\/__init__.py:1749, in _safe_first_finite(obj, skip_nonfinite)\r\n   1746     raise RuntimeError(\"matplotlib does not \"\r\n   1747                        \"support generators as input\")\r\n   1748 else:\r\n-> 1749     return next(val for val in obj if safe_isfinite(val))\r\n\r\nStopIteration: \r\n```\n\n### Expected outcome\n\nOn 3.6.0 this returns a `BarCollection` with one Rectangle, having `nan` for `x` and `height`.\n\n### Additional information\n\nI assume it's related to this bullet in the release notes:\r\n\r\n- Fix barplot being empty when first element is NaN\r\n\r\nBut I don't know the context for it to investigate further (could these link to PRs?)\r\n\r\nFurther debugging:\r\n\r\n```python\r\nax.bar([np.nan], [0])  # Raises\r\nax.bar([0], [np.nan])  # Works\r\n```\r\n\r\nSo it's about the x position specifically.\n\n### Operating system\n\nMacos\n\n### Matplotlib Version\n\n3.6.1\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n","graph_file":"matplotlib#matplotlib#af39f1edffcd828f05cfdd04f2e59506bb4a27bc.graph.json"},"132":{"idx":132,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-24265","base_commit":"e148998d9bed9d1b53a91587ad48f9bb43c7737f","problem_statement":"[Bug]: Setting matplotlib.pyplot.style.library['seaborn-colorblind'] result in key error on matplotlib v3.6.1\n### Bug summary\n\nI have code that executes:\r\n```\r\nimport matplotlib.pyplot as plt\r\nthe_rc = plt.style.library[\"seaborn-colorblind\"]\r\n```\r\n\r\nUsing version 3.4.3 of matplotlib, this works fine. I recently installed my code on a machine with matplotlib version 3.6.1 and upon importing my code, this generated a key error for line `the_rc = plt.style.library[\"seaborn-colorblind\"]` saying \"seaborn-colorblind\" was a bad key.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nthe_rc = plt.style.library[\"seaborn-colorblind\"]\n```\n\n\n### Actual outcome\n\nTraceback (most recent call last):\r\nKeyError: 'seaborn-colorblind'\n\n### Expected outcome\n\nseaborn-colorblind should be set as the matplotlib library style and I should be able to continue plotting with that style.\n\n### Additional information\n\n- Bug occurs with matplotlib version 3.6.1\r\n- Bug does not occur with matplotlib version 3.4.3\r\n- Tested on MacOSX and Ubuntu (same behavior on both)\n\n### Operating system\n\nOS\/X\n\n### Matplotlib Version\n\n3.6.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\n3.9.7\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n","graph_file":"matplotlib#matplotlib#e148998d9bed9d1b53a91587ad48f9bb43c7737f.graph.json"},"133":{"idx":133,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-24334","base_commit":"332937997d03e0c173be6d9fc1841e9186e857df","problem_statement":"[ENH]: Axes.set_xticks\/Axis.set_ticks only validates kwargs if ticklabels are set, but they should\n### Problem\n\nPer the doc of `Axis.set_ticks`:\r\n```\r\n        **kwargs\r\n            `.Text` properties for the labels. These take effect only if you\r\n            pass *labels*. In other cases, please use `~.Axes.tick_params`.\r\n```\r\nThis means that in e.g. `ax.set_xticks([0, 1], xticklabels=[\"a\", \"b\"])`, the incorrect `xticklabels` silently do nothing; they are not even validated (because `labels` has not been passed).\n\n### Proposed solution\n\nWe should at least check that `kwargs` are valid Text properties in all cases; we could even consider making any kwargs an error if `labels` is not set.\n","graph_file":"matplotlib#matplotlib#332937997d03e0c173be6d9fc1841e9186e857df.graph.json"},"134":{"idx":134,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-24970","base_commit":"a3011dfd1aaa2487cce8aa7369475533133ef777","problem_statement":"[Bug]: NumPy 1.24 deprecation warnings\n### Bug summary\r\n\r\nStarting NumPy 1.24 I observe several deprecation warnings.\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nplt.get_cmap()(np.empty((0, ), dtype=np.uint8))\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\n\/usr\/lib\/python3.10\/site-packages\/matplotlib\/colors.py:730: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 257 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)`\r\nwill give the desired result (the cast overflows).\r\n  xa[xa > self.N - 1] = self._i_over\r\n\/usr\/lib\/python3.10\/site-packages\/matplotlib\/colors.py:731: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 256 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)`\r\nwill give the desired result (the cast overflows).\r\n  xa[xa < 0] = self._i_under\r\n\/usr\/lib\/python3.10\/site-packages\/matplotlib\/colors.py:732: DeprecationWarning: NumPy will stop allowing conversion of out-of-bound Python integers to integer arrays.  The conversion of 258 to uint8 will fail in the future.\r\nFor the old behavior, usually:\r\n    np.array(value).astype(dtype)`\r\nwill give the desired result (the cast overflows).\r\n  xa[mask_bad] = self._i_bad\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo warnings.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nArchLinux\r\n\r\n### Matplotlib Version\r\n\r\n3.6.2\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\nPython 3.10.9\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nLinux package manager\n","graph_file":"matplotlib#matplotlib#a3011dfd1aaa2487cce8aa7369475533133ef777.graph.json"},"135":{"idx":135,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25079","base_commit":"66f7956984cbfc3647e867c6e5fde889a89c64ef","problem_statement":"[Bug]: Setting norm with existing colorbar fails with 3.6.3\n### Bug summary\r\n\r\nSetting the norm to a `LogNorm` after the colorbar has been created (e.g. in interactive code) fails with an `Invalid vmin` value in matplotlib 3.6.3.\r\n\r\nThe same code worked in previous matplotlib versions.\r\n\r\nNot that vmin and vmax are explicitly set to values valid for `LogNorm` and no negative values (or values == 0) exist in the input data.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import LogNorm\r\nimport numpy as np\r\n\r\n# create some random data to fill a 2d plot\r\nrng = np.random.default_rng(0)\r\nimg = rng.uniform(1, 5, (25, 25))\r\n\r\n# plot it\r\nfig, ax = plt.subplots(layout=\"constrained\")\r\nplot = ax.pcolormesh(img)\r\ncbar = fig.colorbar(plot, ax=ax)\r\n\r\nvmin = 1\r\nvmax = 5\r\n\r\nplt.ion()\r\nfig.show()\r\nplt.pause(0.5)\r\n\r\nplot.norm = LogNorm(vmin, vmax)\r\nplot.autoscale()\r\nplt.pause(0.5)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/backends\/backend_qt.py\", line 454, in _draw_idle\r\n    self.draw()\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/backends\/backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/figure.py\", line 3082, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/axes\/_base.py\", line 3100, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/collections.py\", line 2148, in draw\r\n    self.update_scalarmappable()\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/collections.py\", line 891, in update_scalarmappable\r\n    self._mapped_colors = self.to_rgba(self._A, self._alpha)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/cm.py\", line 511, in to_rgba\r\n    x = self.norm(x)\r\n  File \"\/home\/mnoethe\/.local\/conda\/envs\/cta-dev\/lib\/python3.9\/site-packages\/matplotlib\/colors.py\", line 1694, in __call__\r\n    raise ValueError(\"Invalid vmin or vmax\")\r\nValueError: Invalid vmin or vmax\r\n```\r\n\r\n### Expected outcome\r\n\r\nWorks, colorbar and mappable are updated with new norm.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nLinux\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3 (works with 3.6.2)\r\n\r\n### Matplotlib Backend\r\n\r\nMultpiple backends tested, same error in all (Qt5Agg, TkAgg, agg, ...)\r\n\r\n### Python version\r\n\r\n3.9.15\r\n\r\n### Jupyter version\r\n\r\nnot in jupyter\r\n\r\n### Installation\r\n\r\nconda\n","graph_file":"matplotlib#matplotlib#66f7956984cbfc3647e867c6e5fde889a89c64ef.graph.json"},"136":{"idx":136,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25311","base_commit":"430fb1db88843300fb4baae3edc499bbfe073b0c","problem_statement":"[Bug]: Unable to pickle figure with draggable legend\n### Bug summary\r\n\r\nI am unable to pickle figure with draggable legend. Same error comes for draggable annotations.\r\n\r\n\r\n\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(111)\r\n\r\ntime=[0,1,2,3,4]\r\nspeed=[40,43,45,47,48]\r\n\r\nax.plot(time,speed,label=\"speed\")\r\n\r\nleg=ax.legend()\r\nleg.set_draggable(True) #pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n`TypeError: cannot pickle 'FigureCanvasQTAgg' object`\r\n\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n","graph_file":"matplotlib#matplotlib#430fb1db88843300fb4baae3edc499bbfe073b0c.graph.json"},"137":{"idx":137,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25332","base_commit":"66ba515e671638971bd11a34cff12c107a437e0b","problem_statement":"[Bug]: Unable to pickle figure with aligned labels\n### Bug summary\r\n\r\n Unable to pickle figure after calling `align_labels()`\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(211)\r\nax2 = fig.add_subplot(212)\r\ntime=[0,1,2,3,4]\r\nspeed=[40000,4300,4500,4700,4800]\r\nacc=[10,11,12,13,14]\r\nax1.plot(time,speed)\r\nax1.set_ylabel('speed')\r\nax2.plot(time,acc)\r\nax2.set_ylabel('acc')\r\n\r\nfig.align_labels() ##pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\nalign.py\", line 16\r\npickle.dumps(fig)\r\nTypeError: cannot pickle 'weakref.ReferenceType' object\r\n```\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n","graph_file":"matplotlib#matplotlib#66ba515e671638971bd11a34cff12c107a437e0b.graph.json"},"138":{"idx":138,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25433","base_commit":"7eafdd8af3c523c1c77b027d378fb337dd489f18","problem_statement":"[Bug]: using clf and pyplot.draw in range slider on_changed callback blocks input to widgets\n### Bug summary\n\nWhen using clear figure, adding new widgets and then redrawing the current figure in the on_changed callback of a range slider the inputs to all the widgets in the figure are blocked. When doing the same in the button callback on_clicked, everything works fine.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as pyplot\r\nimport matplotlib.widgets as widgets\r\n\r\ndef onchanged(values):\r\n    print(\"on changed\")\r\n    print(values)\r\n    pyplot.clf()\r\n    addElements()\r\n    pyplot.draw()\r\n\r\ndef onclick(e):\r\n    print(\"on click\")\r\n    pyplot.clf()\r\n    addElements()\r\n    pyplot.draw()\r\n\r\ndef addElements():\r\n    ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])\r\n    global slider\r\n    slider = widgets.RangeSlider(ax, \"Test\", valmin=1, valmax=10, valinit=(1, 10))\r\n    slider.on_changed(onchanged)\r\n    ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])\r\n    global button\r\n    button = widgets.Button(ax, \"Test\")\r\n    button.on_clicked(onclick)\r\n\r\naddElements()\r\n\r\npyplot.show()\n```\n\n\n### Actual outcome\n\nThe widgets can't receive any input from a mouse click, when redrawing in the on_changed callback of a range Slider. \r\nWhen using a button, there is no problem.\n\n### Expected outcome\n\nThe range slider callback on_changed behaves the same as the button callback on_clicked.\n\n### Additional information\n\nThe problem also occurred on Manjaro with:\r\n- Python version: 3.10.9\r\n- Matplotlib version: 3.6.2\r\n- Matplotlib backend: QtAgg\r\n- Installation of matplotlib via Linux package manager\r\n\n\n### Operating system\n\nWindows 10\n\n### Matplotlib Version\n\n3.6.2\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\n3.11.0\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n","graph_file":"matplotlib#matplotlib#7eafdd8af3c523c1c77b027d378fb337dd489f18.graph.json"},"139":{"idx":139,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25442","base_commit":"73394f2b11321e03a5df199ec0196f27a728b0b0","problem_statement":"[Bug]: Attribute Error combining matplotlib 3.7.1 and mplcursor on data selection\n### Bug summary\r\n\r\nIf you combine mplcursor and matplotlib 3.7.1, you'll get an `AttributeError: 'NoneType' object has no attribute 'canvas'` after clicking a few data points. Henceforth, selecting a new data point will trigger the same traceback. Otherwise, it works fine. \r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport mplcursors as mpl\r\n\r\nx = np.arange(1, 11)    \r\ny1 = x\r\n\r\nplt.scatter(x,y1)\r\n\r\nmpl.cursor()\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\cbook\\__init__.py\", line 304, in process\r\n    func(*args, **kwargs)\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1550, in on_release\r\n    if self._check_still_parented() and self.got_artist:\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1560, in _check_still_parented\r\n    self.disconnect()\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1568, in disconnect\r\n    self.canvas.mpl_disconnect(cid)\r\n  File \"C:\\Users\\MrAni\\Python\\miniconda3\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 1517, in <lambda>\r\n    canvas = property(lambda self: self.ref_artist.figure.canvas)\r\nAttributeError: 'NoneType' object has no attribute 'canvas'\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo terminal output\r\n\r\n### Additional information\r\n\r\nUsing matplotlib 3.7.0 or lower works fine. Using a conda install or pip install doesn't affect the output. \r\n\r\n### Operating system\r\n\r\nWindows 11 and Windwos 10 \r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.9.16\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n","graph_file":"matplotlib#matplotlib#73394f2b11321e03a5df199ec0196f27a728b0b0.graph.json"},"140":{"idx":140,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-25498","base_commit":"78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b","problem_statement":"Update colorbar after changing mappable.norm\nHow can I update a colorbar, after I changed the norm instance of the colorbar?\n\n`colorbar.update_normal(mappable)` has now effect and `colorbar.update_bruteforce(mappable)` throws a `ZeroDivsionError`-Exception.\n\nConsider this example:\n\n``` python\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\nimport numpy as np\n\nimg = 10**np.random.normal(1, 1, size=(50, 50))\n\nfig, ax = plt.subplots(1, 1)\nplot = ax.imshow(img, cmap='gray')\ncb = fig.colorbar(plot, ax=ax)\nplot.norm = LogNorm()\ncb.update_normal(plot)  # no effect\ncb.update_bruteforce(plot)  # throws ZeroDivisionError\nplt.show()\n```\n\nOutput for `cb.update_bruteforce(plot)`:\n\n```\nTraceback (most recent call last):\n  File \"test_norm.py\", line 12, in <module>\n    cb.update_bruteforce(plot)\n  File \"\/home\/maxnoe\/.local\/anaconda3\/lib\/python3.4\/site-packages\/matplotlib\/colorbar.py\", line 967, in update_bruteforce\n    self.draw_all()\n  File \"\/home\/maxnoe\/.local\/anaconda3\/lib\/python3.4\/site-packages\/matplotlib\/colorbar.py\", line 342, in draw_all\n    self._process_values()\n  File \"\/home\/maxnoe\/.local\/anaconda3\/lib\/python3.4\/site-packages\/matplotlib\/colorbar.py\", line 664, in _process_values\n    b = self.norm.inverse(self._uniform_y(self.cmap.N + 1))\n  File \"\/home\/maxnoe\/.local\/anaconda3\/lib\/python3.4\/site-packages\/matplotlib\/colors.py\", line 1011, in inverse\n    return vmin * ma.power((vmax \/ vmin), val)\nZeroDivisionError: division by zero\n```\n\n","graph_file":"matplotlib#matplotlib#78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b.graph.json"},"141":{"idx":141,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-26011","base_commit":"00afcc0c6d4d2e4390338127f05b8f4fdb4e7087","problem_statement":"xlim_changed not emitted on shared axis\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen an axis is shared with another its registered \"xlim_changed\" callbacks does not get called when the change is induced by a shared axis (via sharex=). \r\n\r\nIn _base.py the set_xlim for sibling axis are called with emit=False:\r\n\r\n```\r\nmatplotlib\/lib\/matplotlib\/axes\/_base.py:\r\n\r\n\/...\/\r\ndef set_xlim(...)\r\n\/...\/\r\n        if emit:\r\n            self.callbacks.process('xlim_changed', self)\r\n            # Call all of the other x-axes that are shared with this one\r\n            for other in self._shared_x_axes.get_siblings(self):\r\n                if other is not self:\r\n                    other.set_xlim(self.viewLim.intervalx,\r\n                                   emit=False, auto=auto)\r\n```\r\n\r\nI'm very new to matplotlib, so perhaps there is a good reason for this? emit=False seems to disable both continued \"inheritance\" of axis (why?) and triggering of change callbacks (looking at the code above).\r\n\r\nIt seems like one would at least want to trigger the xlim_changed callbacks as they would be intended to react to any change in axis limits.\r\n\r\nEdit: Setting emit=True seems to introduce a recursion issue (not sure why but as inheritance seems to be passed along anyway it doesn't really matter). Moving the callback call to outside of the \"if emit:\"-statement seems to solve the issue as far as I can see when trying it out. Any reason to keep it inside the if-statement? \r\n\n","graph_file":"matplotlib#matplotlib#00afcc0c6d4d2e4390338127f05b8f4fdb4e7087.graph.json"},"142":{"idx":142,"repo":"matplotlib\/matplotlib","instance_id":"matplotlib__matplotlib-26020","base_commit":"f6a781f77f5ddf1204c60ca7c544809407d4a807","problem_statement":"Error creating AxisGrid with non-default axis class\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nCreating `AxesGrid` using cartopy `GeoAxes` as `axis_class` raises `TypeError: 'method' object is not subscriptable`. Seems to be due to different behaviour of `axis` attr. for `mpl_toolkits.axes_grid1.mpl_axes.Axes` and other axes instances (like `GeoAxes`) where `axis` is only a callable. The error is raised in method `mpl_toolkits.axes_grid1.axes_grid._tick_only` when trying to access keys from `axis` attr.\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug.\r\nPlease make sure to minimize the number of dependencies required, and provide\r\nany necessary plotted data.\r\nAvoid using threads, as Matplotlib is (explicitly) not thread-safe.-->\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom cartopy.crs import PlateCarree\r\nfrom cartopy.mpl.geoaxes import GeoAxes\r\nfrom mpl_toolkits.axes_grid1 import AxesGrid\r\n\r\nfig = plt.figure()\r\naxes_class = (GeoAxes, dict(map_projection=PlateCarree()))\r\ngr = AxesGrid(fig, 111, nrows_ncols=(1,1),\r\n              axes_class=axes_class)\r\n```\r\n\r\n**Actual outcome**\r\n\r\n<!--The output produced by the above code, which may be a screenshot, console output, etc.-->\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"\/home\/jonasg\/stuff\/bugreport_mpl_toolkits_AxesGrid.py\", line 16, in <module>\r\n    axes_class=axes_class)\r\n\r\n  File \"\/home\/jonasg\/miniconda3\/envs\/pya\/lib\/python3.7\/site-packages\/mpl_toolkits\/axes_grid1\/axes_grid.py\", line 618, in __init__\r\n    self.set_label_mode(label_mode)\r\n\r\n  File \"\/home\/jonasg\/miniconda3\/envs\/pya\/lib\/python3.7\/site-packages\/mpl_toolkits\/axes_grid1\/axes_grid.py\", line 389, in set_label_mode\r\n    _tick_only(ax, bottom_on=False, left_on=False)\r\n\r\n  File \"\/home\/jonasg\/miniconda3\/envs\/pya\/lib\/python3.7\/site-packages\/mpl_toolkits\/axes_grid1\/axes_grid.py\", line 27, in _tick_only\r\n    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\r\n\r\nTypeError: 'method' object is not subscriptable\r\n```\r\n\r\n**Expected outcome**\r\n\r\n<!--A description of the expected outcome from the code snippet-->\r\n<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: Ubuntu 18.04.4 LTS\r\n  * Matplotlib version: 3.1.2 (conda-forge)\r\n  * Matplotlib backend: Qt5Agg \r\n  * Python version: 3.7.6\r\n  * Jupyter version (if applicable):\r\n  * Other libraries: \r\n\r\n```\r\n# Name                    Version                   Build  Channel\r\n_libgcc_mutex             0.1                 conda_forge    conda-forge\r\n_openmp_mutex             4.5                       0_gnu    conda-forge\r\nalabaster                 0.7.12                   py37_0  \r\nantlr-python-runtime      4.7.2                 py37_1001    conda-forge\r\nargh                      0.26.2                   py37_0  \r\nastroid                   2.3.3                    py37_0  \r\natomicwrites              1.3.0                    py37_1  \r\nattrs                     19.3.0                     py_0    conda-forge\r\nautopep8                  1.4.4                      py_0  \r\nbabel                     2.8.0                      py_0  \r\nbackcall                  0.1.0                    py37_0  \r\nbasemap                   1.2.1            py37hd759880_1    conda-forge\r\nbleach                    3.1.0                    py37_0  \r\nbokeh                     1.4.0                    py37_0    conda-forge\r\nbzip2                     1.0.8                h516909a_2    conda-forge\r\nca-certificates           2019.11.28           hecc5488_0    conda-forge\r\ncartopy                   0.17.0          py37hd759880_1006    conda-forge\r\ncertifi                   2019.11.28               py37_0    conda-forge\r\ncf-units                  2.1.3            py37hc1659b7_0    conda-forge\r\ncf_units                  2.0.1           py37h3010b51_1002    conda-forge\r\ncffi                      1.13.2           py37h8022711_0    conda-forge\r\ncftime                    1.0.4.2          py37hc1659b7_0    conda-forge\r\nchardet                   3.0.4                 py37_1003    conda-forge\r\nclick                     7.0                        py_0    conda-forge\r\ncloudpickle               1.2.2                      py_1    conda-forge\r\ncryptography              2.8              py37h72c5cf5_1    conda-forge\r\ncurl                      7.65.3               hf8cf82a_0    conda-forge\r\ncycler                    0.10.0                     py_2    conda-forge\r\ncytoolz                   0.10.1           py37h516909a_0    conda-forge\r\ndask                      2.9.2                      py_0    conda-forge\r\ndask-core                 2.9.2                      py_0    conda-forge\r\ndbus                      1.13.6               he372182_0    conda-forge\r\ndecorator                 4.4.1                      py_0  \r\ndefusedxml                0.6.0                      py_0  \r\ndiff-match-patch          20181111                   py_0  \r\ndistributed               2.9.3                      py_0    conda-forge\r\ndocutils                  0.16                     py37_0  \r\nentrypoints               0.3                      py37_0  \r\nexpat                     2.2.5             he1b5a44_1004    conda-forge\r\nflake8                    3.7.9                    py37_0  \r\nfontconfig                2.13.1            h86ecdb6_1001    conda-forge\r\nfreetype                  2.10.0               he983fc9_1    conda-forge\r\nfsspec                    0.6.2                      py_0    conda-forge\r\nfuture                    0.18.2                   py37_0  \r\ngeonum                    1.4.4                      py_0    conda-forge\r\ngeos                      3.7.2                he1b5a44_2    conda-forge\r\ngettext                   0.19.8.1          hc5be6a0_1002    conda-forge\r\nglib                      2.58.3          py37h6f030ca_1002    conda-forge\r\ngmp                       6.1.2                h6c8ec71_1  \r\ngpxpy                     1.4.0                      py_0    conda-forge\r\ngst-plugins-base          1.14.5               h0935bb2_0    conda-forge\r\ngstreamer                 1.14.5               h36ae1b5_0    conda-forge\r\nhdf4                      4.2.13            hf30be14_1003    conda-forge\r\nhdf5                      1.10.5          nompi_h3c11f04_1104    conda-forge\r\nheapdict                  1.0.1                      py_0    conda-forge\r\nicu                       64.2                 he1b5a44_1    conda-forge\r\nidna                      2.8                   py37_1000    conda-forge\r\nimagesize                 1.2.0                      py_0  \r\nimportlib_metadata        1.4.0                    py37_0    conda-forge\r\nintervaltree              3.0.2                      py_0  \r\nipykernel                 5.1.4            py37h39e3cac_0  \r\nipython                   7.11.1           py37h39e3cac_0  \r\nipython_genutils          0.2.0                    py37_0  \r\niris                      2.2.0                 py37_1003    conda-forge\r\nisort                     4.3.21                   py37_0  \r\njedi                      0.14.1                   py37_0  \r\njeepney                   0.4.2                      py_0  \r\njinja2                    2.10.3                     py_0    conda-forge\r\njpeg                      9c                h14c3975_1001    conda-forge\r\njson5                     0.8.5                      py_0  \r\njsonschema                3.2.0                    py37_0  \r\njupyter_client            5.3.4                    py37_0  \r\njupyter_core              4.6.1                    py37_0  \r\njupyterlab                1.2.5              pyhf63ae98_0  \r\njupyterlab_server         1.0.6                      py_0  \r\nkeyring                   21.1.0                   py37_0  \r\nkiwisolver                1.1.0            py37hc9558a2_0    conda-forge\r\nkrb5                      1.16.4               h2fd8d38_0    conda-forge\r\nlatlon23                  1.0.7                      py_0    conda-forge\r\nlazy-object-proxy         1.4.3            py37h7b6447c_0  \r\nld_impl_linux-64          2.33.1               h53a641e_7    conda-forge\r\nlibblas                   3.8.0               14_openblas    conda-forge\r\nlibcblas                  3.8.0               14_openblas    conda-forge\r\nlibclang                  9.0.1           default_hde54327_0    conda-forge\r\nlibcurl                   7.65.3               hda55be3_0    conda-forge\r\nlibedit                   3.1.20170329      hf8c457e_1001    conda-forge\r\nlibffi                    3.2.1             he1b5a44_1006    conda-forge\r\nlibgcc-ng                 9.2.0                h24d8f2e_2    conda-forge\r\nlibgfortran-ng            7.3.0                hdf63c60_4    conda-forge\r\nlibgomp                   9.2.0                h24d8f2e_2    conda-forge\r\nlibiconv                  1.15              h516909a_1005    conda-forge\r\nliblapack                 3.8.0               14_openblas    conda-forge\r\nlibllvm9                  9.0.1                hc9558a2_0    conda-forge\r\nlibnetcdf                 4.7.3           nompi_h94020b1_100    conda-forge\r\nlibopenblas               0.3.7                h5ec1e0e_6    conda-forge\r\nlibpng                    1.6.37               hed695b0_0    conda-forge\r\nlibsodium                 1.0.16               h1bed415_0  \r\nlibspatialindex           1.9.3                he6710b0_0  \r\nlibssh2                   1.8.2                h22169c7_2    conda-forge\r\nlibstdcxx-ng              9.2.0                hdf63c60_2    conda-forge\r\nlibtiff                   4.1.0                hc3755c2_3    conda-forge\r\nlibuuid                   2.32.1            h14c3975_1000    conda-forge\r\nlibxcb                    1.13              h14c3975_1002    conda-forge\r\nlibxkbcommon              0.9.1                hebb1f50_0    conda-forge\r\nlibxml2                   2.9.10               hee79883_0    conda-forge\r\nlocket                    0.2.0                      py_2    conda-forge\r\nlz4-c                     1.8.3             he1b5a44_1001    conda-forge\r\nmarkupsafe                1.1.1            py37h516909a_0    conda-forge\r\nmatplotlib                3.1.2                    py37_1    conda-forge\r\nmatplotlib-base           3.1.2            py37h250f245_1    conda-forge\r\nmccabe                    0.6.1                    py37_1  \r\nmistune                   0.8.4            py37h7b6447c_0  \r\nmore-itertools            8.1.0                      py_0    conda-forge\r\nmsgpack-python            0.6.2            py37hc9558a2_0    conda-forge\r\nnbconvert                 5.6.1                    py37_0  \r\nnbformat                  5.0.4                      py_0  \r\nnbsphinx                  0.5.1                      py_0    conda-forge\r\nncurses                   6.1               hf484d3e_1002    conda-forge\r\nnetcdf4                   1.5.3           nompi_py37hd35fb8e_102    conda-forge\r\nnotebook                  6.0.3                    py37_0  \r\nnspr                      4.24                 he1b5a44_0    conda-forge\r\nnss                       3.47                 he751ad9_0    conda-forge\r\nnumpy                     1.17.5           py37h95a1406_0    conda-forge\r\nnumpydoc                  0.9.2                      py_0  \r\nolefile                   0.46                       py_0    conda-forge\r\nopenssl                   1.1.1d               h516909a_0    conda-forge\r\nowslib                    0.19.0                     py_2    conda-forge\r\npackaging                 20.0                       py_0    conda-forge\r\npandas                    0.25.3           py37hb3f55d8_0    conda-forge\r\npandoc                    2.2.3.2                       0  \r\npandocfilters             1.4.2                    py37_1  \r\nparso                     0.6.0                      py_0  \r\npartd                     1.1.0                      py_0    conda-forge\r\npathtools                 0.1.2                      py_1  \r\npatsy                     0.5.1                      py_0    conda-forge\r\npcre                      8.43                 he1b5a44_0    conda-forge\r\npexpect                   4.8.0                    py37_0  \r\npickleshare               0.7.5                    py37_0  \r\npillow                    7.0.0            py37hefe7db6_0    conda-forge\r\npip                       20.0.1                   py37_0    conda-forge\r\npluggy                    0.13.0                   py37_0    conda-forge\r\nproj4                     5.2.0             he1b5a44_1006    conda-forge\r\nprometheus_client         0.7.1                      py_0  \r\nprompt_toolkit            3.0.3                      py_0  \r\npsutil                    5.6.7            py37h516909a_0    conda-forge\r\npthread-stubs             0.4               h14c3975_1001    conda-forge\r\nptyprocess                0.6.0                    py37_0  \r\npy                        1.8.1                      py_0    conda-forge\r\npyaerocom                 0.9.0.dev5                dev_0    <develop>\r\npycodestyle               2.5.0                    py37_0  \r\npycparser                 2.19                     py37_1    conda-forge\r\npydocstyle                4.0.1                      py_0  \r\npyepsg                    0.4.0                      py_0    conda-forge\r\npyflakes                  2.1.1                    py37_0  \r\npygments                  2.5.2                      py_0  \r\npyinstrument              3.1.2                    pypi_0    pypi\r\npyinstrument-cext         0.2.2                    pypi_0    pypi\r\npykdtree                  1.3.1           py37hc1659b7_1002    conda-forge\r\npyke                      1.1.1                 py37_1001    conda-forge\r\npylint                    2.4.4                    py37_0  \r\npyopenssl                 19.1.0                   py37_0    conda-forge\r\npyparsing                 2.4.6                      py_0    conda-forge\r\npyproj                    1.9.6           py37h516909a_1002    conda-forge\r\npyqt                      5.12.3           py37hcca6a23_1    conda-forge\r\npyqt5-sip                 4.19.18                  pypi_0    pypi\r\npyqtwebengine             5.12.1                   pypi_0    pypi\r\npyrsistent                0.15.7           py37h7b6447c_0  \r\npyshp                     2.1.0                      py_0    conda-forge\r\npysocks                   1.7.1                    py37_0    conda-forge\r\npytest                    5.3.4                    py37_0    conda-forge\r\npython                    3.7.6                h357f687_2    conda-forge\r\npython-dateutil           2.8.1                      py_0    conda-forge\r\npython-jsonrpc-server     0.3.4                      py_0  \r\npython-language-server    0.31.7                   py37_0  \r\npytz                      2019.3                     py_0    conda-forge\r\npyxdg                     0.26                       py_0  \r\npyyaml                    5.3              py37h516909a_0    conda-forge\r\npyzmq                     18.1.0           py37he6710b0_0  \r\nqdarkstyle                2.8                        py_0  \r\nqt                        5.12.5               hd8c4c69_1    conda-forge\r\nqtawesome                 0.6.1                      py_0  \r\nqtconsole                 4.6.0                      py_1  \r\nqtpy                      1.9.0                      py_0  \r\nreadline                  8.0                  hf8c457e_0    conda-forge\r\nrequests                  2.22.0                   py37_1    conda-forge\r\nrope                      0.16.0                     py_0  \r\nrtree                     0.9.3                    py37_0  \r\nscipy                     1.4.1            py37h921218d_0    conda-forge\r\nseaborn                   0.9.0                      py_2    conda-forge\r\nsecretstorage             3.1.2                    py37_0  \r\nsend2trash                1.5.0                    py37_0  \r\nsetuptools                45.1.0                   py37_0    conda-forge\r\nshapely                   1.6.4           py37hec07ddf_1006    conda-forge\r\nsimplejson                3.17.0           py37h516909a_0    conda-forge\r\nsix                       1.14.0                   py37_0    conda-forge\r\nsnowballstemmer           2.0.0                      py_0  \r\nsortedcontainers          2.1.0                      py_0    conda-forge\r\nsphinx                    2.3.1                      py_0  \r\nsphinx-rtd-theme          0.4.3                    pypi_0    pypi\r\nsphinxcontrib-applehelp   1.0.1                      py_0  \r\nsphinxcontrib-devhelp     1.0.1                      py_0  \r\nsphinxcontrib-htmlhelp    1.0.2                      py_0  \r\nsphinxcontrib-jsmath      1.0.1                      py_0  \r\nsphinxcontrib-qthelp      1.0.2                      py_0  \r\nsphinxcontrib-serializinghtml 1.1.3                      py_0  \r\nspyder                    4.0.1                    py37_0  \r\nspyder-kernels            1.8.1                    py37_0  \r\nsqlite                    3.30.1               hcee41ef_0    conda-forge\r\nsrtm.py                   0.3.4                      py_0    conda-forge\r\nstatsmodels               0.11.0           py37h516909a_0    conda-forge\r\ntblib                     1.6.0                      py_0    conda-forge\r\nterminado                 0.8.3                    py37_0  \r\ntestpath                  0.4.4                      py_0  \r\ntk                        8.6.10               hed695b0_0    conda-forge\r\ntoolz                     0.10.0                     py_0    conda-forge\r\ntornado                   6.0.3            py37h516909a_0    conda-forge\r\ntqdm                      4.43.0                   pypi_0    pypi\r\ntraitlets                 4.3.3                    py37_0  \r\nudunits2                  2.2.27.6          h4e0c4b3_1001    conda-forge\r\nujson                     1.35             py37h14c3975_0  \r\nurllib3                   1.25.7                   py37_0    conda-forge\r\nwatchdog                  0.9.0                    py37_1  \r\nwcwidth                   0.1.8                      py_0    conda-forge\r\nwebencodings              0.5.1                    py37_1  \r\nwheel                     0.33.6                   py37_0    conda-forge\r\nwrapt                     1.11.2           py37h7b6447c_0  \r\nwurlitzer                 2.0.0                    py37_0  \r\nxarray                    0.14.1                     py_1    conda-forge\r\nxorg-libxau               1.0.9                h14c3975_0    conda-forge\r\nxorg-libxdmcp             1.1.3                h516909a_0    conda-forge\r\nxz                        5.2.4             h14c3975_1001    conda-forge\r\nyaml                      0.2.2                h516909a_1    conda-forge\r\nyapf                      0.28.0                     py_0  \r\nzeromq                    4.3.1                he6710b0_3  \r\nzict                      1.0.0                      py_0    conda-forge\r\nzipp                      2.0.0                      py_2    conda-forge\r\nzlib                      1.2.11            h516909a_1006    conda-forge\r\nzstd                      1.4.4                h3b9ef0a_1    conda-forge\r\n```\r\n\n","graph_file":"matplotlib#matplotlib#f6a781f77f5ddf1204c60ca7c544809407d4a807.graph.json"},"143":{"idx":143,"repo":"mwaskom\/seaborn","instance_id":"mwaskom__seaborn-2848","base_commit":"94621cef29f80282436d73e8d2c0aa76dab81273","problem_statement":"PairGrid errors with `hue` assigned in `map`\nIn seaborn version 0.9.0 I was able to use the following Code to plot scatterplots across a PairGrid with categorical hue. The reason I am not using the \"hue\" keyword in creating the PairGrid is, that I want one regression line (with regplot) and not one regression per hue-category.\r\n```python\r\nimport seaborn as sns\r\niris = sns.load_dataset(\"iris\")\r\ng = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\r\ng.map(sns.scatterplot, hue=iris[\"species\"])\r\ng.map(sns.regplot, scatter=False)\r\n```\r\n\r\nHowever, since I updated to searbon 0.11.1 the following Error message occurs:\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/_core.py in _lookup_single(self, key)\r\n    143             # Use a value that's in the original data vector\r\n--> 144             value = self.lookup_table[key]\r\n    145         except KeyError:\r\n\r\nKeyError: 'setosa'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/_core.py in _lookup_single(self, key)\r\n    148             try:\r\n--> 149                 normed = self.norm(key)\r\n    150             except TypeError as err:\r\n\r\nTypeError: 'NoneType' object is not callable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-46dd21e9c95a> in <module>\r\n      2 iris = sns.load_dataset(\"iris\")\r\n      3 g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"species\"])\r\n----> 4 g.map(sns.scatterplot, hue=iris[\"species\"])\r\n      5 \r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/axisgrid.py in map(self, func, **kwargs)\r\n   1263         row_indices, col_indices = np.indices(self.axes.shape)\r\n   1264         indices = zip(row_indices.flat, col_indices.flat)\r\n-> 1265         self._map_bivariate(func, indices, **kwargs)\r\n   1266 \r\n   1267         return self\r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/axisgrid.py in _map_bivariate(self, func, indices, **kwargs)\r\n   1463             if ax is None:  # i.e. we are in corner mode\r\n   1464                 continue\r\n-> 1465             self._plot_bivariate(x_var, y_var, ax, func, **kws)\r\n   1466         self._add_axis_labels()\r\n   1467 \r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/axisgrid.py in _plot_bivariate(self, x_var, y_var, ax, func, **kwargs)\r\n   1503         kwargs.setdefault(\"hue_order\", self._hue_order)\r\n   1504         kwargs.setdefault(\"palette\", self._orig_palette)\r\n-> 1505         func(x=x, y=y, **kwargs)\r\n   1506 \r\n   1507         self._update_legend_data(ax)\r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/_decorators.py in inner_f(*args, **kwargs)\r\n     44             )\r\n     45         kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})\r\n---> 46         return f(**kwargs)\r\n     47     return inner_f\r\n     48 \r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/relational.py in scatterplot(x, y, hue, style, size, data, palette, hue_order, hue_norm, sizes, size_order, size_norm, markers, style_order, x_bins, y_bins, units, estimator, ci, n_boot, alpha, x_jitter, y_jitter, legend, ax, **kwargs)\r\n    818     p._attach(ax)\r\n    819 \r\n--> 820     p.plot(ax, kwargs)\r\n    821 \r\n    822     return ax\r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/relational.py in plot(self, ax, kws)\r\n    626         # Apply the mapping from semantic variables to artist attributes\r\n    627         if \"hue\" in self.variables:\r\n--> 628             c = self._hue_map(data[\"hue\"])\r\n    629 \r\n    630         if \"size\" in self.variables:\r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/_core.py in __call__(self, key, *args, **kwargs)\r\n     61         \"\"\"Get the attribute(s) values for the data key.\"\"\"\r\n     62         if isinstance(key, (list, np.ndarray, pd.Series)):\r\n---> 63             return [self._lookup_single(k, *args, **kwargs) for k in key]\r\n     64         else:\r\n     65             return self._lookup_single(key, *args, **kwargs)\r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/_core.py in <listcomp>(.0)\r\n     61         \"\"\"Get the attribute(s) values for the data key.\"\"\"\r\n     62         if isinstance(key, (list, np.ndarray, pd.Series)):\r\n---> 63             return [self._lookup_single(k, *args, **kwargs) for k in key]\r\n     64         else:\r\n     65             return self._lookup_single(key, *args, **kwargs)\r\n\r\n~\/.Software\/miniforge3\/envs\/py3.9\/lib\/python3.8\/site-packages\/seaborn\/_core.py in _lookup_single(self, key)\r\n    149                 normed = self.norm(key)\r\n    150             except TypeError as err:\r\n--> 151                 if np.isnan(key):\r\n    152                     value = (0, 0, 0, 0)\r\n    153                 else:\r\n\r\nTypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n\r\nMy further observations are:\r\n- the error does not occur when using the \"hue\" keyword when creating PairGrid\r\n- the error does not occur for numerical values for hue\r\n- changing the dtype to \"categorical\" does not help\r\n\r\nEdit:\r\nI tried all versions between 0.9.0 and the current release (0.11.1) and the error only occurs in the current release. If I use 0.11.0, the plot seems to work.\n","graph_file":"mwaskom#seaborn#94621cef29f80282436d73e8d2c0aa76dab81273.graph.json"},"144":{"idx":144,"repo":"mwaskom\/seaborn","instance_id":"mwaskom__seaborn-3010","base_commit":"0f5a013e2cf43562deec3b879458e59a73853813","problem_statement":"PolyFit is not robust to missing data\n```python\r\nso.Plot([1, 2, 3, None, 4], [1, 2, 3, 4, 5]).add(so.Line(), so.PolyFit())\r\n```\r\n\r\n<details><summary>Traceback<\/summary>\r\n\r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nLinAlgError                               Traceback (most recent call last)\r\nFile ~\/miniconda3\/envs\/seaborn-py39-latest\/lib\/python3.9\/site-packages\/IPython\/core\/formatters.py:343, in BaseFormatter.__call__(self, obj)\r\n    341     method = get_real_method(obj, self.print_method)\r\n    342     if method is not None:\r\n--> 343         return method()\r\n    344     return None\r\n    345 else:\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/plot.py:265, in Plot._repr_png_(self)\r\n    263 def _repr_png_(self) -> tuple[bytes, dict[str, float]]:\r\n--> 265     return self.plot()._repr_png_()\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/plot.py:804, in Plot.plot(self, pyplot)\r\n    800 \"\"\"\r\n    801 Compile the plot spec and return the Plotter object.\r\n    802 \"\"\"\r\n    803 with theme_context(self._theme_with_defaults()):\r\n--> 804     return self._plot(pyplot)\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/plot.py:822, in Plot._plot(self, pyplot)\r\n    819 plotter._setup_scales(self, common, layers, coord_vars)\r\n    821 # Apply statistical transform(s)\r\n--> 822 plotter._compute_stats(self, layers)\r\n    824 # Process scale spec for semantic variables and coordinates computed by stat\r\n    825 plotter._setup_scales(self, common, layers)\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/plot.py:1110, in Plotter._compute_stats(self, spec, layers)\r\n   1108     grouper = grouping_vars\r\n   1109 groupby = GroupBy(grouper)\r\n-> 1110 res = stat(df, groupby, orient, scales)\r\n   1112 if pair_vars:\r\n   1113     data.frames[coord_vars] = res\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_stats\/regression.py:41, in PolyFit.__call__(self, data, groupby, orient, scales)\r\n     39 def __call__(self, data, groupby, orient, scales):\r\n---> 41     return groupby.apply(data, self._fit_predict)\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/groupby.py:109, in GroupBy.apply(self, data, func, *args, **kwargs)\r\n    106 grouper, groups = self._get_groups(data)\r\n    108 if not grouper:\r\n--> 109     return self._reorder_columns(func(data, *args, **kwargs), data)\r\n    111 parts = {}\r\n    112 for key, part_df in data.groupby(grouper, sort=False):\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_stats\/regression.py:30, in PolyFit._fit_predict(self, data)\r\n     28     xx = yy = []\r\n     29 else:\r\n---> 30     p = np.polyfit(x, y, self.order)\r\n     31     xx = np.linspace(x.min(), x.max(), self.gridsize)\r\n     32     yy = np.polyval(p, xx)\r\n\r\nFile <__array_function__ internals>:180, in polyfit(*args, **kwargs)\r\n\r\nFile ~\/miniconda3\/envs\/seaborn-py39-latest\/lib\/python3.9\/site-packages\/numpy\/lib\/polynomial.py:668, in polyfit(x, y, deg, rcond, full, w, cov)\r\n    666 scale = NX.sqrt((lhs*lhs).sum(axis=0))\r\n    667 lhs \/= scale\r\n--> 668 c, resids, rank, s = lstsq(lhs, rhs, rcond)\r\n    669 c = (c.T\/scale).T  # broadcast scale coefficients\r\n    671 # warn on rank reduction, which indicates an ill conditioned matrix\r\n\r\nFile <__array_function__ internals>:180, in lstsq(*args, **kwargs)\r\n\r\nFile ~\/miniconda3\/envs\/seaborn-py39-latest\/lib\/python3.9\/site-packages\/numpy\/linalg\/linalg.py:2300, in lstsq(a, b, rcond)\r\n   2297 if n_rhs == 0:\r\n   2298     # lapack can't handle n_rhs = 0 - so allocate the array one larger in that axis\r\n   2299     b = zeros(b.shape[:-2] + (m, n_rhs + 1), dtype=b.dtype)\r\n-> 2300 x, resids, rank, s = gufunc(a, b, rcond, signature=signature, extobj=extobj)\r\n   2301 if m == 0:\r\n   2302     x[...] = 0\r\n\r\nFile ~\/miniconda3\/envs\/seaborn-py39-latest\/lib\/python3.9\/site-packages\/numpy\/linalg\/linalg.py:101, in _raise_linalgerror_lstsq(err, flag)\r\n    100 def _raise_linalgerror_lstsq(err, flag):\r\n--> 101     raise LinAlgError(\"SVD did not converge in Linear Least Squares\")\r\n\r\nLinAlgError: SVD did not converge in Linear Least Squares\r\n\r\n```\r\n\r\n<\/details>\n","graph_file":"mwaskom#seaborn#0f5a013e2cf43562deec3b879458e59a73853813.graph.json"},"145":{"idx":145,"repo":"mwaskom\/seaborn","instance_id":"mwaskom__seaborn-3190","base_commit":"4a9e54962a29c12a8b103d75f838e0e795a6974d","problem_statement":"Color mapping fails with boolean data\n```python\r\nso.Plot([\"a\", \"b\"], [1, 2], color=[True, False]).add(so.Bar())\r\n```\r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n...\r\nFile ~\/code\/seaborn\/seaborn\/_core\/plot.py:841, in Plot._plot(self, pyplot)\r\n    838 plotter._compute_stats(self, layers)\r\n    840 # Process scale spec for semantic variables and coordinates computed by stat\r\n--> 841 plotter._setup_scales(self, common, layers)\r\n    843 # TODO Remove these after updating other methods\r\n    844 # ---- Maybe have debug= param that attaches these when True?\r\n    845 plotter._data = common\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/plot.py:1252, in Plotter._setup_scales(self, p, common, layers, variables)\r\n   1250     self._scales[var] = Scale._identity()\r\n   1251 else:\r\n-> 1252     self._scales[var] = scale._setup(var_df[var], prop)\r\n   1254 # Everything below here applies only to coordinate variables\r\n   1255 # We additionally skip it when we're working with a value\r\n   1256 # that is derived from a coordinate we've already processed.\r\n   1257 # e.g., the Stat consumed y and added ymin\/ymax. In that case,\r\n   1258 # we've already setup the y scale and ymin\/max are in scale space.\r\n   1259 if axis is None or (var != coord and coord in p._variables):\r\n\r\nFile ~\/code\/seaborn\/seaborn\/_core\/scales.py:351, in ContinuousBase._setup(self, data, prop, axis)\r\n    349 vmin, vmax = axis.convert_units((vmin, vmax))\r\n    350 a = forward(vmin)\r\n--> 351 b = forward(vmax) - forward(vmin)\r\n    353 def normalize(x):\r\n    354     return (x - a) \/ b\r\n\r\nTypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\r\n```\n","graph_file":"mwaskom#seaborn#4a9e54962a29c12a8b103d75f838e0e795a6974d.graph.json"},"146":{"idx":146,"repo":"mwaskom\/seaborn","instance_id":"mwaskom__seaborn-3407","base_commit":"515286e02be3e4c0ff2ef4addb34a53c4a676ee4","problem_statement":"pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:\/\/\/C:\/Users\/KLuu\/anaconda3\/lib\/site-packages\/seaborn\/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:\/\/\/C:\/Users\/KLuu\/anaconda3\/lib\/site-packages\/seaborn\/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:\/\/\/C:\/Users\/KLuu\/anaconda3\/lib\/site-packages\/pandas\/core\/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:\/\/\/C:\/Users\/KLuu\/anaconda3\/lib\/site-packages\/pandas\/core\/indexes\/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:\/\/\/C:\/Users\/KLuu\/anaconda3\/lib\/site-packages\/pandas\/core\/indexes\/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n","graph_file":"mwaskom#seaborn#515286e02be3e4c0ff2ef4addb34a53c4a676ee4.graph.json"},"147":{"idx":147,"repo":"pallets\/flask","instance_id":"pallets__flask-4045","base_commit":"d8c37f43724cd9fb0870f77877b7c4c7e38a19e0","problem_statement":"Raise error when blueprint name contains a dot\nThis is required since every dot is now significant since blueprints can be nested. An error was already added for endpoint names in 1.0, but should have been added for this as well.\n","graph_file":"pallets#flask#d8c37f43724cd9fb0870f77877b7c4c7e38a19e0.graph.json"},"148":{"idx":148,"repo":"pallets\/flask","instance_id":"pallets__flask-4992","base_commit":"4c288bc97ea371817199908d0d9b12de9dae327e","problem_statement":"Add a file mode parameter to flask.Config.from_file()\nPython 3.11 introduced native TOML support with the `tomllib` package. This could work nicely with the `flask.Config.from_file()` method as an easy way to load TOML config files:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load)\r\n```\r\n\r\nHowever, `tomllib.load()` takes an object readable in binary mode, while `flask.Config.from_file()` opens a file in text mode, resulting in this error:\r\n\r\n```\r\nTypeError: File must be opened in binary mode, e.g. use `open('foo.toml', 'rb')`\r\n```\r\n\r\nWe can get around this with a more verbose expression, like loading from a file opened with the built-in `open()` function and passing the `dict` to `app.Config.from_mapping()`:\r\n\r\n```python\r\n# We have to repeat the path joining that from_file() does\r\nwith open(os.path.join(app.config.root_path, \"config.toml\"), \"rb\") as file:\r\n    app.config.from_mapping(tomllib.load(file))\r\n```\r\n\r\nBut adding a file mode parameter to `flask.Config.from_file()` would enable the use of a simpler expression. E.g.:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load, mode=\"b\")\r\n```\r\n\n","graph_file":"pallets#flask#4c288bc97ea371817199908d0d9b12de9dae327e.graph.json"},"149":{"idx":149,"repo":"pallets\/flask","instance_id":"pallets__flask-5063","base_commit":"182ce3dd15dfa3537391c3efaf9c3ff407d134d4","problem_statement":"Flask routes to return domain\/sub-domains information\nCurrently when checking **flask routes** it provides all routes but **it is no way to see which routes are assigned to which subdomain**.\r\n\r\n**Default server name:**\r\nSERVER_NAME: 'test.local'\r\n\r\n**Domains (sub-domains):**\r\ntest.test.local\r\nadmin.test.local\r\ntest.local\r\n\r\n**Adding blueprints:**\r\napp.register_blueprint(admin_blueprint,url_prefix='',subdomain='admin')\r\napp.register_blueprint(test_subdomain_blueprint,url_prefix='',subdomain='test')\r\n\r\n\r\n```\r\n$ flask routes\r\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\r\nEndpoint                                                 Methods    Rule\r\n-------------------------------------------------------  ---------  ------------------------------------------------\r\nadmin_blueprint.home                                      GET        \/home\r\ntest_subdomain_blueprint.home                             GET        \/home\r\nstatic                                                    GET        \/static\/<path:filename>\r\n...\r\n```\r\n\r\n\r\n**Feature request**\r\nIt will be good to see something like below (that will make more clear which route for which subdomain, because now need to go and check configuration).\r\n**If it is not possible to fix routes**, can you add or tell which method(s) should be used to get below information from flask? \r\n\r\n```\r\n$ flask routes\r\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\r\nDomain                Endpoint                                             Methods    Rule\r\n-----------------   ----------------------------------------------------  ----------  ------------------------------------------------\r\nadmin.test.local     admin_blueprint.home                                  GET        \/home\r\ntest.test.local      test_subdomain_blueprint.home                         GET        \/home\r\ntest.local           static                                                GET        \/static\/<path:filename>\r\n...\r\n```\r\n\n","graph_file":"pallets#flask#182ce3dd15dfa3537391c3efaf9c3ff407d134d4.graph.json"},"150":{"idx":150,"repo":"psf\/requests","instance_id":"psf__requests-1963","base_commit":"110048f9837f8441ea536804115e80b69f400277","problem_statement":"`Session.resolve_redirects` copies the original request for all subsequent requests, can cause incorrect method selection\nConsider the following redirection chain:\n\n```\nPOST \/do_something HTTP\/1.1\nHost: server.example.com\n...\n\nHTTP\/1.1 303 See Other\nLocation: \/new_thing_1513\n\nGET \/new_thing_1513\nHost: server.example.com\n...\n\nHTTP\/1.1 307 Temporary Redirect\nLocation: \/\/failover.example.com\/new_thing_1513\n```\n\nThe intermediate 303 See Other has caused the POST to be converted to\na GET.  The subsequent 307 should preserve the GET.  However, because\n`Session.resolve_redirects` starts each iteration by copying the _original_\nrequest object, Requests will issue a POST!\n\n","graph_file":"psf#requests#110048f9837f8441ea536804115e80b69f400277.graph.json"},"151":{"idx":151,"repo":"psf\/requests","instance_id":"psf__requests-2148","base_commit":"fe693c492242ae532211e0c173324f09ca8cf227","problem_statement":"socket.error exception not caught\/wrapped in a requests exception (ConnectionError perhaps?)\nI just noticed a case where I had a socket reset on me, and was raised to me as a raw socket error as opposed to something like a requests.exceptions.ConnectionError:\n\n```\n  File \"\/home\/rtdean\/***\/***\/***\/***\/***\/***.py\", line 67, in dir_parse\n    root = ElementTree.fromstring(response.text)\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/site-packages\/requests-2.3.0-py2.7.egg\/requests\/models.py\", line 721, in text\n    if not self.content:\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/site-packages\/requests-2.3.0-py2.7.egg\/requests\/models.py\", line 694, in content\n    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/site-packages\/requests-2.3.0-py2.7.egg\/requests\/models.py\", line 627, in generate\n    for chunk in self.raw.stream(chunk_size, decode_content=True):\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/site-packages\/requests-2.3.0-py2.7.egg\/requests\/packages\/urllib3\/response.py\", line 240, in stream\n    data = self.read(amt=amt, decode_content=decode_content)\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/site-packages\/requests-2.3.0-py2.7.egg\/requests\/packages\/urllib3\/response.py\", line 187, in read\n    data = self._fp.read(amt)\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/httplib.py\", line 543, in read\n    return self._read_chunked(amt)\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/httplib.py\", line 612, in _read_chunked\n    value.append(self._safe_read(chunk_left))\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/httplib.py\", line 658, in _safe_read\n    chunk = self.fp.read(min(amt, MAXAMOUNT))\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/socket.py\", line 380, in read\n    data = self._sock.recv(left)\n  File \"\/home\/rtdean\/.pyenv\/versions\/2.7.6\/lib\/python2.7\/site-packages\/gevent-1.0.1-py2.7-linux-x86_64.egg\/gevent\/socket.py\", line 385, in recv\n    return sock.recv(*args)\nsocket.error: [Errno 104] Connection reset by peer\n```\n\nNot sure if this is by accident or design... in general, I guess I'd expect a requests exception when using requests, but I can start looking for socket errors and the like as well.\n\n","graph_file":"psf#requests#fe693c492242ae532211e0c173324f09ca8cf227.graph.json"},"152":{"idx":152,"repo":"psf\/requests","instance_id":"psf__requests-2317","base_commit":"091991be0da19de9108dbe5e3752917fea3d7fdc","problem_statement":"method = builtin_str(method) problem\nIn requests\/sessions.py is a command:\n\nmethod = builtin_str(method)\nConverts method from\nb\u2019GET\u2019\nto\n\"b'GET\u2019\"\n\nWhich is the literal string, no longer a binary string.  When requests tries to use the method \"b'GET\u2019\u201d, it gets a 404 Not Found response.\n\nI am using python3.4 and python-neutronclient (2.3.9) with requests (2.4.3).  neutronclient is broken because it uses this \"args = utils.safe_encode_list(args)\" command which converts all the values to binary string, including method.\n\nI'm not sure if this is a bug with neutronclient or a bug with requests, but I'm starting here.  Seems if requests handled the method value being a binary string, we wouldn't have any problem.\n\nAlso, I tried in python2.6 and this bug doesn't exist there. Some difference between 2.6 and 3.4 makes this not work right.\n\n","graph_file":"psf#requests#091991be0da19de9108dbe5e3752917fea3d7fdc.graph.json"},"153":{"idx":153,"repo":"psf\/requests","instance_id":"psf__requests-2674","base_commit":"0be38a0c37c59c4b66ce908731da15b401655113","problem_statement":"urllib3 exceptions passing through requests API\nI don't know if it's a design goal of requests to hide urllib3's exceptions and wrap them around requests.exceptions types.\n\n(If it's not IMHO it should be, but that's another discussion)\n\nIf it is, I have at least two of them passing through that I have to catch in addition to requests' exceptions. They are requests.packages.urllib3.exceptions.DecodeError and requests.packages.urllib3.exceptions.TimeoutError (this one I get when a proxy timeouts)\n\nThanks!\n\n","graph_file":"psf#requests#0be38a0c37c59c4b66ce908731da15b401655113.graph.json"},"154":{"idx":154,"repo":"psf\/requests","instance_id":"psf__requests-3362","base_commit":"36453b95b13079296776d11b09cab2567ea3e703","problem_statement":"Uncertain about content\/text vs iter_content(decode_unicode=True\/False)\nWhen requesting an application\/json document, I'm seeing `next(r.iter_content(16*1024, decode_unicode=True))` returning bytes, whereas `r.text` returns unicode. My understanding was that both should return a unicode object. In essence, I thought \"iter_content\" was equivalent to \"iter_text\" when decode_unicode was True. Have I misunderstood something? I can provide an example if needed.\n\nFor reference, I'm using python 3.5.1 and requests 2.10.0.\n\nThanks!\n\n","graph_file":"psf#requests#36453b95b13079296776d11b09cab2567ea3e703.graph.json"},"155":{"idx":155,"repo":"psf\/requests","instance_id":"psf__requests-863","base_commit":"a0df2cbb10419037d11d04352b3175405ab52941","problem_statement":"Allow lists in the dict values of the hooks argument\nCurrently the Request class has a .register_hook() method but it parses the dictionary it expects from it's hooks argument weirdly: the argument can only specify one hook function per hook.  If you pass in a list of hook functions per hook the code in Request.**init**() will wrap the list in a list which then fails when the hooks are consumed (since a list is not callable).  This is especially annoying since you can not use multiple hooks from a session.  The only way to get multiple hooks now is to create the request object without sending it, then call .register_hook() multiple times and then finally call .send().\n\nThis would all be much easier if Request.**init**() parsed the hooks parameter in a way that it accepts lists as it's values.\n\n","graph_file":"psf#requests#a0df2cbb10419037d11d04352b3175405ab52941.graph.json"},"156":{"idx":156,"repo":"pydata\/xarray","instance_id":"pydata__xarray-3364","base_commit":"863e49066ca4d61c9adfe62aca3bf21b90e1af8c","problem_statement":"Ignore missing variables when concatenating datasets?\nSeveral users (@raj-kesavan, @richardotis, now myself) have wondered about how to concatenate xray Datasets with different variables.\n\nWith the current `xray.concat`, you need to awkwardly create dummy variables filled with `NaN` in datasets that don't have them (or drop mismatched variables entirely). Neither of these are great options -- `concat` should have an option (the default?) to take care of this for the user.\n\nThis would also be more consistent with `pd.concat`, which takes a more relaxed approach to matching dataframes with different variables (it does an outer join).\n\n","graph_file":"pydata#xarray#863e49066ca4d61c9adfe62aca3bf21b90e1af8c.graph.json"},"157":{"idx":157,"repo":"pydata\/xarray","instance_id":"pydata__xarray-4094","base_commit":"a64cf2d5476e7bbda099b34c40b7be1880dbd39a","problem_statement":"to_unstacked_dataset broken for single-dim variables\n<!-- A short summary of the issue, if appropriate -->\r\n\r\n\r\n#### MCVE Code Sample\r\n\r\n```python\r\narr = xr.DataArray(\r\n     np.arange(3),\r\n     coords=[(\"x\", [0, 1, 2])],\r\n )\r\ndata = xr.Dataset({\"a\": arr, \"b\": arr})\r\nstacked = data.to_stacked_array('y', sample_dims=['x'])\r\nunstacked = stacked.to_unstacked_dataset('y')\r\n# MergeError: conflicting values for variable 'y' on objects to be combined. You can skip this check by specifying compat='override'.\r\n```\r\n\r\n#### Expected Output\r\nA working roundtrip.\r\n\r\n#### Problem Description\r\nI need to stack a bunch of variables and later unstack them again, however this doesn't work if the variables only have a single dimension.\r\n\r\n#### Versions\r\n\r\n<details><summary>Output of <tt>xr.show_versions()<\/tt><\/summary>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.7.3 (default, Mar 27 2019, 22:11:17) \r\n[GCC 7.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.15.0-96-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_GB.UTF-8\r\nLOCALE: en_GB.UTF-8\r\nlibhdf5: 1.10.4\r\nlibnetcdf: 4.6.2\r\n\r\nxarray: 0.15.1\r\npandas: 1.0.3\r\nnumpy: 1.17.3\r\nscipy: 1.3.1\r\nnetCDF4: 1.4.2\r\npydap: None\r\nh5netcdf: None\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: 1.0.4.2\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2.10.1\r\ndistributed: 2.10.0\r\nmatplotlib: 3.1.1\r\ncartopy: None\r\nseaborn: 0.10.0\r\nnumbagg: None\r\nsetuptools: 41.0.0\r\npip: 19.0.3\r\nconda: 4.8.3\r\npytest: 5.3.5\r\nIPython: 7.9.0\r\nsphinx: None\r\n\r\n\r\n<\/details>\r\n\n","graph_file":"pydata#xarray#a64cf2d5476e7bbda099b34c40b7be1880dbd39a.graph.json"},"158":{"idx":158,"repo":"pydata\/xarray","instance_id":"pydata__xarray-4248","base_commit":"98dc1f4ea18738492e074e9e51ddfed5cd30ab94","problem_statement":"Feature request: show units in dataset overview\nHere's a hypothetical dataset:\r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x         (x) float64 ...\r\n  * y         (y) float64 ...\r\n  * time      (time) datetime64[ns] ...\r\nData variables:\r\n    rainfall  (time, y, x) float32 ...\r\n    max_temp  (time, y, x) float32 ...\r\n```\r\n\r\nIt would be really nice if the units of the coordinates and of the data variables were shown in the `Dataset` repr, for example as:\r\n\r\n```\r\n<xarray.Dataset>\r\nDimensions:  (time: 3, x: 988, y: 822)\r\nCoordinates:\r\n  * x, in metres         (x)            float64 ...\r\n  * y, in metres         (y)            float64 ...\r\n  * time                 (time)         datetime64[ns] ...\r\nData variables:\r\n    rainfall, in mm      (time, y, x)   float32 ...\r\n    max_temp, in deg C   (time, y, x)   float32 ...\r\n```\n","graph_file":"pydata#xarray#98dc1f4ea18738492e074e9e51ddfed5cd30ab94.graph.json"},"159":{"idx":159,"repo":"pydata\/xarray","instance_id":"pydata__xarray-4493","base_commit":"a5f53e203c52a7605d5db799864046471115d04f","problem_statement":"DataSet.update causes chunked dask DataArray to evalute its values eagerly \n**What happened**:\r\nUsed `DataSet.update` to update a chunked dask DataArray, but the DataArray is no longer chunked after the update.\r\n\r\n**What you expected to happen**:\r\nThe chunked DataArray should still be chunked after the update\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nfoo = xr.DataArray(np.random.randn(3, 3), dims=(\"x\", \"y\")).chunk()  # foo is chunked\r\nds = xr.Dataset({\"foo\": foo, \"bar\": (\"x\", [1, 2, 3])})  # foo is still chunked here\r\nds  # you can verify that foo is chunked\r\n```\r\n```python\r\nupdate_dict = {\"foo\": ((\"x\", \"y\"), ds.foo[1:, :]), \"bar\": (\"x\", ds.bar[1:])}\r\nupdate_dict[\"foo\"][1]  # foo is still chunked\r\n```\r\n```python\r\nds.update(update_dict)\r\nds  # now foo is no longer chunked\r\n```\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()<\/tt><\/summary>\r\n\r\n```\r\ncommit: None\r\npython: 3.8.3 (default, Jul  2 2020, 11:26:31) \r\n[Clang 10.0.0 ]\r\npython-bits: 64\r\nOS: Darwin\r\nOS-release: 19.6.0\r\nmachine: x86_64\r\nprocessor: i386\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.6\r\nlibnetcdf: None\r\n\r\nxarray: 0.16.0\r\npandas: 1.0.5\r\nnumpy: 1.18.5\r\nscipy: 1.5.0\r\nnetCDF4: None\r\npydap: None\r\nh5netcdf: None\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: None\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2.20.0\r\ndistributed: 2.20.0\r\nmatplotlib: 3.2.2\r\ncartopy: None\r\nseaborn: None\r\nnumbagg: None\r\npint: None\r\nsetuptools: 49.2.0.post20200714\r\npip: 20.1.1\r\nconda: None\r\npytest: 5.4.3\r\nIPython: 7.16.1\r\nsphinx: None\r\n```\r\n\r\n<\/details>\nDataset constructor with DataArray triggers computation\nIs it intentional that creating a Dataset with a DataArray and dimension names for a single variable causes computation of that variable?  In other words, why does ```xr.Dataset(dict(a=('d0', xr.DataArray(da.random.random(10)))))``` cause the dask array to compute?\r\n\r\nA longer example:\r\n\r\n```python\r\nimport dask.array as da\r\nimport xarray as xr\r\nx = da.random.randint(1, 10, size=(100, 25))\r\nds = xr.Dataset(dict(a=xr.DataArray(x, dims=('x', 'y'))))\r\ntype(ds.a.data)\r\ndask.array.core.Array\r\n\r\n# Recreate the dataset with the same array, but also redefine the dimensions\r\nds2 = xr.Dataset(dict(a=(('x', 'y'), ds.a))\r\ntype(ds2.a.data)\r\nnumpy.ndarray\r\n```\r\n\r\n\n","graph_file":"pydata#xarray#a5f53e203c52a7605d5db799864046471115d04f.graph.json"},"160":{"idx":160,"repo":"pydata\/xarray","instance_id":"pydata__xarray-5131","base_commit":"e56905889c836c736152b11a7e6117a229715975","problem_statement":"Trailing whitespace in DatasetGroupBy text representation\nWhen displaying a DatasetGroupBy in an interactive Python session, the first line of output contains a trailing whitespace. The first example in the documentation demonstrate this:\r\n\r\n```pycon\r\n>>> import xarray as xr, numpy as np\r\n>>> ds = xr.Dataset(\r\n...     {\"foo\": ((\"x\", \"y\"), np.random.rand(4, 3))},\r\n...     coords={\"x\": [10, 20, 30, 40], \"letters\": (\"x\", list(\"abba\"))},\r\n... )\r\n>>> ds.groupby(\"letters\")\r\nDatasetGroupBy, grouped over 'letters' \r\n2 groups with labels 'a', 'b'.\r\n```\r\n\r\nThere is a trailing whitespace in the first line of output which is \"DatasetGroupBy, grouped over 'letters' \". This can be seen more clearly by converting the object to a string (note the whitespace before `\\n`):\r\n\r\n```pycon\r\n>>> str(ds.groupby(\"letters\"))\r\n\"DatasetGroupBy, grouped over 'letters' \\n2 groups with labels 'a', 'b'.\"\r\n```\r\n\r\n\r\nWhile this isn't a problem in itself, it causes an issue for us because we use flake8 in continuous integration to verify that our code is correctly formatted and we also have doctests that rely on DatasetGroupBy textual representation. Flake8 reports a violation on the trailing whitespaces in our docstrings. If we remove the trailing whitespaces, our doctests fail because the expected output doesn't match the actual output. So we have conflicting constraints coming from our tools which both seem reasonable. Trailing whitespaces are forbidden by flake8 because, among other reasons, they lead to noisy git diffs. Doctest want the expected output to be exactly the same as the actual output and considers a trailing whitespace to be a significant difference. We could configure flake8 to ignore this particular violation for the files in which we have these doctests, but this may cause other trailing whitespaces to creep in our code, which we don't want. Unfortunately it's not possible to just add `# NoQA` comments to get flake8 to ignore the violation only for specific lines because that creates a difference between expected and actual output from doctest point of view. Flake8 doesn't allow to disable checks for blocks of code either.\r\n\r\nIs there a reason for having this trailing whitespace in DatasetGroupBy representation? Whould it be OK to remove it? If so please let me know and I can make a pull request.\n","graph_file":"pydata#xarray#e56905889c836c736152b11a7e6117a229715975.graph.json"},"161":{"idx":161,"repo":"pylint-dev\/pylint","instance_id":"pylint-dev__pylint-5859","base_commit":"182cc539b8154c0710fcea7e522267e42eba8899","problem_statement":"\"--notes\" option ignores note tags that are entirely punctuation\n### Bug description\n\nIf a note tag specified with the `--notes` option is entirely punctuation, pylint won't report a fixme warning (W0511).\r\n\r\n```python\r\n# YES: yes\r\n# ???: no\r\n```\r\n\r\n`pylint test.py --notes=\"YES,???\"` will return a fixme warning (W0511) for the first line, but not the second.\n\n### Configuration\n\n```ini\nDefault\n```\n\n\n### Command used\n\n```shell\npylint test.py --notes=\"YES,???\"\n```\n\n\n### Pylint output\n\n```shell\n************* Module test\r\ntest.py:1:1: W0511: YES: yes (fixme)\n```\n\n\n### Expected behavior\n\n```\r\n************* Module test\r\ntest.py:1:1: W0511: YES: yes (fixme)\r\ntest.py:2:1: W0511: ???: no (fixme)\r\n```\n\n### Pylint version\n\n```shell\npylint 2.12.2\r\nastroid 2.9.0\r\nPython 3.10.2 (main, Feb  2 2022, 05:51:25) [Clang 13.0.0 (clang-1300.0.29.3)]\n```\n\n\n### OS \/ Environment\n\nmacOS 11.6.1\n\n### Additional dependencies\n\n_No response_\n","graph_file":"pylint-dev#pylint#182cc539b8154c0710fcea7e522267e42eba8899.graph.json"},"162":{"idx":162,"repo":"pylint-dev\/pylint","instance_id":"pylint-dev__pylint-6506","base_commit":"0a4204fd7555cfedd43f43017c94d24ef48244a5","problem_statement":"Traceback printed for unrecognized option\n### Bug description\n\nA traceback is printed when an unrecognized option is passed to pylint.\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint -Q\n```\n\n\n### Pylint output\n\n```shell\n************* Module Command line\r\nCommand line:1:0: E0015: Unrecognized option found: Q (unrecognized-option)\r\nTraceback (most recent call last):\r\n  File \"\/Users\/markbyrne\/venv310\/bin\/pylint\", line 33, in <module>\r\n    sys.exit(load_entry_point('pylint', 'console_scripts', 'pylint')())\r\n  File \"\/Users\/markbyrne\/programming\/pylint\/pylint\/__init__.py\", line 24, in run_pylint\r\n    PylintRun(argv or sys.argv[1:])\r\n  File \"\/Users\/markbyrne\/programming\/pylint\/pylint\/lint\/run.py\", line 135, in __init__\r\n    args = _config_initialization(\r\n  File \"\/Users\/markbyrne\/programming\/pylint\/pylint\/config\/config_initialization.py\", line 85, in _config_initialization\r\n    raise _UnrecognizedOptionError(options=unrecognized_options)\r\npylint.config.exceptions._UnrecognizedOptionError\n```\n\n\n### Expected behavior\n\nThe top part of the current output is handy:\r\n`Command line:1:0: E0015: Unrecognized option found: Q (unrecognized-option)`\r\n\r\nThe traceback I don't think is expected & not user-friendly.\r\nA usage tip, for example:\r\n```python\r\nmypy -Q\r\nusage: mypy [-h] [-v] [-V] [more options; see below]\r\n            [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...]\r\nmypy: error: unrecognized arguments: -Q\r\n```\n\n### Pylint version\n\n```shell\npylint 2.14.0-dev0\r\nastroid 2.11.3\r\nPython 3.10.0b2 (v3.10.0b2:317314165a, May 31 2021, 10:02:22) [Clang 12.0.5 (clang-1205.0.22.9)]\n```\n\n\n### OS \/ Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n","graph_file":"pylint-dev#pylint#0a4204fd7555cfedd43f43017c94d24ef48244a5.graph.json"},"163":{"idx":163,"repo":"pylint-dev\/pylint","instance_id":"pylint-dev__pylint-7080","base_commit":"3c5eca2ded3dd2b59ebaf23eb289453b5d2930f0","problem_statement":"`--recursive=y` ignores `ignore-paths`\n### Bug description\r\n\r\nWhen running recursively, it seems `ignore-paths` in my settings in pyproject.toml is completely ignored\r\n\r\n### Configuration\r\n\r\n```ini\r\n[tool.pylint.MASTER]\r\nignore-paths = [\r\n  # Auto generated\r\n  \"^src\/gen\/.*$\",\r\n]\r\n```\r\n\r\n\r\n### Command used\r\n\r\n```shell\r\npylint --recursive=y src\/\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\n************* Module region_selection\r\nsrc\\region_selection.py:170:0: R0914: Too many local variables (17\/15) (too-many-locals)\r\n************* Module about\r\nsrc\\gen\\about.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\about.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\about.py:57:0: C0301: Line too long (504\/120) (line-too-long)\r\nsrc\\gen\\about.py:12:0: C0103: Class name \"Ui_AboutAutoSplitWidget\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\about.py:12:0: R0205: Class 'Ui_AboutAutoSplitWidget' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\about.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:13:22: C0103: Argument name \"AboutAutoSplitWidget\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:53:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:53:28: C0103: Argument name \"AboutAutoSplitWidget\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:24:8: W0201: Attribute 'ok_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:27:8: W0201: Attribute 'created_by_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:30:8: W0201: Attribute 'version_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:33:8: W0201: Attribute 'donate_text_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:37:8: W0201: Attribute 'donate_button_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:43:8: W0201: Attribute 'icon_label' defined outside __init__ (attribute-defined-outside-init)\r\n************* Module design\r\nsrc\\gen\\design.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\design.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\design.py:328:0: C0301: Line too long (123\/120) (line-too-long)\r\nsrc\\gen\\design.py:363:0: C0301: Line too long (125\/120) (line-too-long)\r\nsrc\\gen\\design.py:373:0: C0301: Line too long (121\/120) (line-too-long)\r\nsrc\\gen\\design.py:412:0: C0301: Line too long (131\/120) (line-too-long)\r\nsrc\\gen\\design.py:12:0: C0103: Class name \"Ui_MainWindow\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\design.py:308:8: C0103: Attribute name \"actionSplit_Settings\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:318:8: C0103: Attribute name \"actionCheck_for_Updates_on_Open\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:323:8: C0103: Attribute name \"actionLoop_Last_Split_Image_To_First_Image\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:325:8: C0103: Attribute name \"actionAuto_Start_On_Reset\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:327:8: C0103: Attribute name \"actionGroup_dummy_splits_when_undoing_skipping\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:12:0: R0205: Class 'Ui_MainWindow' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\design.py:12:0: R0902: Too many instance attributes (69\/15) (too-many-instance-attributes)\r\nsrc\\gen\\design.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:13:22: C0103: Argument name \"MainWindow\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:16:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:13:4: R0915: Too many statements (339\/50) (too-many-statements)\r\nsrc\\gen\\design.py:354:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:354:28: C0103: Argument name \"MainWindow\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:354:4: R0915: Too many statements (61\/50) (too-many-statements)\r\nsrc\\gen\\design.py:31:8: W0201: Attribute 'central_widget' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:33:8: W0201: Attribute 'x_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:36:8: W0201: Attribute 'select_region_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:40:8: W0201: Attribute 'start_auto_splitter_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:44:8: W0201: Attribute 'reset_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:49:8: W0201: Attribute 'undo_split_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:54:8: W0201: Attribute 'skip_split_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:59:8: W0201: Attribute 'check_fps_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:63:8: W0201: Attribute 'fps_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:66:8: W0201: Attribute 'live_image' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:75:8: W0201: Attribute 'current_split_image' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:81:8: W0201: Attribute 'current_image_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:85:8: W0201: Attribute 'width_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:88:8: W0201: Attribute 'height_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:91:8: W0201: Attribute 'fps_value_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:95:8: W0201: Attribute 'width_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:101:8: W0201: Attribute 'height_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:107:8: W0201: Attribute 'capture_region_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:111:8: W0201: Attribute 'current_image_file_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:115:8: W0201: Attribute 'take_screenshot_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:119:8: W0201: Attribute 'x_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:128:8: W0201: Attribute 'y_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:136:8: W0201: Attribute 'y_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:139:8: W0201: Attribute 'align_region_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:143:8: W0201: Attribute 'select_window_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:147:8: W0201: Attribute 'browse_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:151:8: W0201: Attribute 'split_image_folder_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:154:8: W0201: Attribute 'split_image_folder_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:158:8: W0201: Attribute 'capture_region_window_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:162:8: W0201: Attribute 'image_loop_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:165:8: W0201: Attribute 'similarity_viewer_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:169:8: W0201: Attribute 'table_live_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:173:8: W0201: Attribute 'table_highest_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:177:8: W0201: Attribute 'table_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:181:8: W0201: Attribute 'line_1' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:186:8: W0201: Attribute 'table_current_image_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:189:8: W0201: Attribute 'table_reset_image_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:192:8: W0201: Attribute 'line_2' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:197:8: W0201: Attribute 'line_3' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:202:8: W0201: Attribute 'line_4' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:207:8: W0201: Attribute 'line_5' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:212:8: W0201: Attribute 'table_current_image_live_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:216:8: W0201: Attribute 'table_current_image_highest_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:220:8: W0201: Attribute 'table_current_image_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:224:8: W0201: Attribute 'table_reset_image_live_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:228:8: W0201: Attribute 'table_reset_image_highest_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:232:8: W0201: Attribute 'table_reset_image_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:236:8: W0201: Attribute 'reload_start_image_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:240:8: W0201: Attribute 'start_image_status_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:243:8: W0201: Attribute 'start_image_status_value_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:246:8: W0201: Attribute 'image_loop_value_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:249:8: W0201: Attribute 'previous_image_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:254:8: W0201: Attribute 'next_image_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:296:8: W0201: Attribute 'menu_bar' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:299:8: W0201: Attribute 'menu_help' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:301:8: W0201: Attribute 'menu_file' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:304:8: W0201: Attribute 'action_view_help' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:306:8: W0201: Attribute 'action_about' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:308:8: W0201: Attribute 'actionSplit_Settings' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:310:8: W0201: Attribute 'action_save_profile' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:312:8: W0201: Attribute 'action_load_profile' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:314:8: W0201: Attribute 'action_save_profile_as' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:316:8: W0201: Attribute 'action_check_for_updates' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:318:8: W0201: Attribute 'actionCheck_for_Updates_on_Open' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:323:8: W0201: Attribute 'actionLoop_Last_Split_Image_To_First_Image' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:325:8: W0201: Attribute 'actionAuto_Start_On_Reset' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:327:8: W0201: Attribute 'actionGroup_dummy_splits_when_undoing_skipping' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:329:8: W0201: Attribute 'action_settings' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:331:8: W0201: Attribute 'action_check_for_updates_on_open' defined outside __init__ (attribute-defined-outside-init)\r\n************* Module resources_rc\r\nsrc\\gen\\resources_rc.py:1:0: C0302: Too many lines in module (2311\/1000) (too-many-lines)\r\nsrc\\gen\\resources_rc.py:8:0: C0103: Constant name \"qt_resource_data\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2278:0: C0103: Constant name \"qt_resource_name\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2294:0: C0103: Constant name \"qt_resource_struct\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2305:0: C0103: Function name \"qInitResources\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2308:0: C0103: Function name \"qCleanupResources\" doesn't conform to snake_case naming style (invalid-name)\r\n************* Module settings\r\nsrc\\gen\\settings.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\settings.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\settings.py:61:0: C0301: Line too long (158\/120) (line-too-long)\r\nsrc\\gen\\settings.py:123:0: C0301: Line too long (151\/120) (line-too-long)\r\nsrc\\gen\\settings.py:209:0: C0301: Line too long (162\/120) (line-too-long)\r\nsrc\\gen\\settings.py:214:0: C0301: Line too long (121\/120) (line-too-long)\r\nsrc\\gen\\settings.py:221:0: C0301: Line too long (177\/120) (line-too-long)\r\nsrc\\gen\\settings.py:223:0: C0301: Line too long (181\/120) (line-too-long)\r\nsrc\\gen\\settings.py:226:0: C0301: Line too long (461\/120) (line-too-long)\r\nsrc\\gen\\settings.py:228:0: C0301: Line too long (192\/120) (line-too-long)\r\nsrc\\gen\\settings.py:12:0: C0103: Class name \"Ui_DialogSettings\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\settings.py:12:0: R0205: Class 'Ui_DialogSettings' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\settings.py:12:0: R0902: Too many instance attributes (35\/15) (too-many-instance-attributes)\r\nsrc\\gen\\settings.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:13:22: C0103: Argument name \"DialogSettings\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:16:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:13:4: R0915: Too many statements (190\/50) (too-many-statements)\r\nsrc\\gen\\settings.py:205:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:205:28: C0103: Argument name \"DialogSettings\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:26:8: W0201: Attribute 'capture_settings_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:29:8: W0201: Attribute 'fps_limit_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:36:8: W0201: Attribute 'fps_limit_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:40:8: W0201: Attribute 'live_capture_region_checkbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:46:8: W0201: Attribute 'capture_method_combobox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:49:8: W0201: Attribute 'capture_method_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:52:8: W0201: Attribute 'capture_device_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:55:8: W0201: Attribute 'capture_device_combobox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:59:8: W0201: Attribute 'image_settings_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:65:8: W0201: Attribute 'default_comparison_method' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:73:8: W0201: Attribute 'default_comparison_method_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:76:8: W0201: Attribute 'default_pause_time_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:80:8: W0201: Attribute 'default_pause_time_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:87:8: W0201: Attribute 'default_similarity_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:92:8: W0201: Attribute 'default_similarity_threshold_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:98:8: W0201: Attribute 'loop_splits_checkbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:104:8: W0201: Attribute 'custom_image_settings_info_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:111:8: W0201: Attribute 'default_delay_time_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:116:8: W0201: Attribute 'default_delay_time_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:121:8: W0201: Attribute 'hotkeys_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:127:8: W0201: Attribute 'set_pause_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:131:8: W0201: Attribute 'split_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:137:8: W0201: Attribute 'undo_split_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:143:8: W0201: Attribute 'split_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:146:8: W0201: Attribute 'reset_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:152:8: W0201: Attribute 'set_undo_split_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:156:8: W0201: Attribute 'reset_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:159:8: W0201: Attribute 'set_reset_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:163:8: W0201: Attribute 'set_split_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:167:8: W0201: Attribute 'pause_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:170:8: W0201: Attribute 'pause_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:176:8: W0201: Attribute 'undo_split_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:179:8: W0201: Attribute 'set_skip_split_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:183:8: W0201: Attribute 'skip_split_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:186:8: W0201: Attribute 'skip_split_input' defined outside __init__ (attribute-defined-outside-init)\r\n************* Module update_checker\r\nsrc\\gen\\update_checker.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\update_checker.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\update_checker.py:12:0: C0103: Class name \"Ui_UpdateChecker\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\update_checker.py:12:0: R0205: Class 'Ui_UpdateChecker' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\update_checker.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:13:22: C0103: Argument name \"UpdateChecker\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:17:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:33:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:13:4: R0915: Too many statements (56\/50) (too-many-statements)\r\nsrc\\gen\\update_checker.py:71:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:71:28: C0103: Argument name \"UpdateChecker\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:31:8: W0201: Attribute 'update_status_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:39:8: W0201: Attribute 'current_version_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:42:8: W0201: Attribute 'latest_version_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:45:8: W0201: Attribute 'go_to_download_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:48:8: W0201: Attribute 'left_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:52:8: W0201: Attribute 'right_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:55:8: W0201: Attribute 'current_version_number_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:59:8: W0201: Attribute 'latest_version_number_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:63:8: W0201: Attribute 'do_not_ask_again_checkbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (region_capture -> region_selection) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (error_messages -> user_profile -> region_capture -> region_selection) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplitImage -> split_parser) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoControlledWorker -> error_messages -> AutoSplit) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> user_profile -> region_capture -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplitImage -> error_messages -> user_profile) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> menu_bar -> user_profile -> region_capture -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (error_messages -> user_profile -> region_selection) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (error_messages -> user_profile) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplitImage -> split_parser -> error_messages -> user_profile) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> menu_bar -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> menu_bar -> error_messages) (cyclic-import)\r\n\r\n--------------------------------------------------------------------------\r\nYour code has been rated at -158.32\/10 (previous run: -285.20\/10, +126.88)\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nsrc\\gen\\* should not be checked\r\n\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.14.1\r\nastroid 2.11.5\r\nPython 3.9.6 (tags\/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)]\r\n```\r\n\r\n\r\n### OS \/ Environment\r\n\r\nWindows 10.0.19044\r\n\r\n\r\n### Additional dependencies\r\n\r\n_No response_\n","graph_file":"pylint-dev#pylint#3c5eca2ded3dd2b59ebaf23eb289453b5d2930f0.graph.json"},"164":{"idx":164,"repo":"pylint-dev\/pylint","instance_id":"pylint-dev__pylint-7114","base_commit":"397c1703e8ae6349d33f7b99f45b2ccaf581e666","problem_statement":"Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a\/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na\/__init__.py:1:0: F0010: error while code parsing: Unable to load file a\/__init__.py:\r\n[Errno 2] No such file or directory: 'a\/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a\/a.py a\/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a\/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a\/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a\/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na\/__init__.py:1:0: F0010: error while code parsing: Unable to load file a\/__init__.py:\r\n[Errno 2] No such file or directory: 'a\/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n","graph_file":"pylint-dev#pylint#397c1703e8ae6349d33f7b99f45b2ccaf581e666.graph.json"},"165":{"idx":165,"repo":"pylint-dev\/pylint","instance_id":"pylint-dev__pylint-7228","base_commit":"d597f252915ddcaaa15ccdfcb35670152cb83587","problem_statement":"rxg include '\\p{Han}' will throw error\n### Bug description\r\n\r\nconfig rxg in pylintrc with \\p{Han} will throw err\r\n\r\n### Configuration\r\n.pylintrc:\r\n\r\n```ini\r\nfunction-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$\r\n```\r\n\r\n### Command used\r\n\r\n```shell\r\npylint\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\n(venvtest) tsung-hande-MacBook-Pro:robot_is_comming tsung-han$ pylint\r\nTraceback (most recent call last):\r\n  File \"\/Users\/tsung-han\/PycharmProjects\/robot_is_comming\/venvtest\/bin\/pylint\", line 8, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"\/Users\/tsung-han\/PycharmProjects\/robot_is_comming\/venvtest\/lib\/python3.9\/site-packages\/pylint\/__init__.py\", line 25, in run_pylint\r\n    PylintRun(argv or sys.argv[1:])\r\n  File \"\/Users\/tsung-han\/PycharmProjects\/robot_is_comming\/venvtest\/lib\/python3.9\/site-packages\/pylint\/lint\/run.py\", line 161, in __init__\r\n    args = _config_initialization(\r\n  File \"\/Users\/tsung-han\/PycharmProjects\/robot_is_comming\/venvtest\/lib\/python3.9\/site-packages\/pylint\/config\/config_initialization.py\", line 57, in _config_initialization\r\n    linter._parse_configuration_file(config_args)\r\n  File \"\/Users\/tsung-han\/PycharmProjects\/robot_is_comming\/venvtest\/lib\/python3.9\/site-packages\/pylint\/config\/arguments_manager.py\", line 244, in _parse_configuration_file\r\n    self.config, parsed_args = self._arg_parser.parse_known_args(\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/argparse.py\", line 1858, in parse_known_args\r\n    namespace, args = self._parse_known_args(args, namespace)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/argparse.py\", line 2067, in _parse_known_args\r\n    start_index = consume_optional(start_index)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/argparse.py\", line 2007, in consume_optional\r\n    take_action(action, args, option_string)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/argparse.py\", line 1919, in take_action\r\n    argument_values = self._get_values(action, argument_strings)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/argparse.py\", line 2450, in _get_values\r\n    value = self._get_value(action, arg_string)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/argparse.py\", line 2483, in _get_value\r\n    result = type_func(arg_string)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/re.py\", line 252, in compile\r\n    return _compile(pattern, flags)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/re.py\", line 304, in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/sre_compile.py\", line 788, in compile\r\n    p = sre_parse.parse(p, flags)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/sre_parse.py\", line 955, in parse\r\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/sre_parse.py\", line 444, in _parse_sub\r\n    itemsappend(_parse(source, state, verbose, nested + 1,\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/sre_parse.py\", line 555, in _parse\r\n    code1 = _class_escape(source, this)\r\n  File \"\/usr\/local\/Cellar\/python@3.9\/3.9.13_1\/Frameworks\/Python.framework\/Versions\/3.9\/lib\/python3.9\/sre_parse.py\", line 350, in _class_escape\r\n    raise source.error('bad escape %s' % escape, len(escape))\r\nre.error: bad escape \\p at position 1\r\n```\r\n\r\n### Expected behavior\r\n\r\nnot throw error\r\n\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.14.4\r\nastroid 2.11.7\r\nPython 3.9.13 (main, May 24 2022, 21:28:44) \r\n[Clang 13.0.0 (clang-1300.0.29.30)]\r\n```\r\n\r\n\r\n### OS \/ Environment\r\n\r\nmacOS 11.6.7\r\n\n","graph_file":"pylint-dev#pylint#d597f252915ddcaaa15ccdfcb35670152cb83587.graph.json"},"166":{"idx":166,"repo":"pylint-dev\/pylint","instance_id":"pylint-dev__pylint-7993","base_commit":"e90702074e68e20dc8e5df5013ee3ecf22139c3e","problem_statement":"Using custom braces in message template does not work\n### Bug description\n\nHave any list of errors:\r\n\r\nOn pylint 1.7 w\/ python3.6 - I am able to use this as my message template\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\nNo config file found, using default configuration\r\n************* Module [redacted].test\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n```\r\n\r\nHowever, on Python3.9 with Pylint 2.12.2, I get the following:\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\n[redacted]\/site-packages\/pylint\/reporters\/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n```\r\n\r\nIs this intentional or a bug?\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\n```\n\n\n### Pylint output\n\n```shell\n[redacted]\/site-packages\/pylint\/reporters\/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\n```\n\n\n### Expected behavior\n\nExpect the dictionary to print out with `\"Category\"` as the key.\n\n### Pylint version\n\n```shell\nAffected Version:\r\npylint 2.12.2\r\nastroid 2.9.2\r\nPython 3.9.9+ (heads\/3.9-dirty:a2295a4, Dec 21 2021, 22:32:52) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\r\n\r\n\r\nPreviously working version:\r\nNo config file found, using default configuration\r\npylint 1.7.4, \r\nastroid 1.6.6\r\nPython 3.6.8 (default, Nov 16 2020, 16:55:22) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\n```\n\n\n### OS \/ Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n","graph_file":"pylint-dev#pylint#e90702074e68e20dc8e5df5013ee3ecf22139c3e.graph.json"},"167":{"idx":167,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-11143","base_commit":"6995257cf470d2143ad1683824962de4071c0eb7","problem_statement":"Rewrite fails when first expression of file is a number and mistaken as docstring \n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n- [x] a detailed description of the bug or problem you are having\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [x] minimal example if possible\r\n```\r\nInstalling collected packages: zipp, six, PyYAML, python-dateutil, MarkupSafe, importlib-metadata, watchdog, tomli, soupsieve, pyyaml-env-tag, pycparser, pluggy, packaging, mergedeep, Markdown, jinja2, iniconfig, ghp-import, exceptiongroup, click, websockets, urllib3, tqdm, smmap, pytest, pyee, mkdocs, lxml, importlib-resources, idna, cssselect, charset-normalizer, cffi, certifi, beautifulsoup4, attrs, appdirs, w3lib, typing-extensions, texttable, requests, pyzstd, pytest-metadata, pyquery, pyppmd, pyppeteer, pynacl, pymdown-extensions, pycryptodomex, pybcj, pyasn1, py, psutil, parse, multivolumefile, mkdocs-autorefs, inflate64, gitdb, fake-useragent, cryptography, comtypes, bs4, brotli, bcrypt, allure-python-commons, xlwt, xlrd, rsa, requests-html, pywinauto, python-i18n, python-dotenv, pytest-rerunfailures, pytest-html, pytest-check, PySocks, py7zr, paramiko, mkdocstrings, loguru, GitPython, ftputil, crcmod, chardet, brotlicffi, allure-pytest\r\nSuccessfully installed GitPython-3.1.31 Markdown-3.3.7 MarkupSafe-2.1.3 PySocks-1.7.1 PyYAML-6.0 allure-pytest-2.13.2 allure-python-commons-2.13.2 appdirs-1.4.4 attrs-23.1.0 bcrypt-4.0.1 beautifulsoup4-4.12.2 brotli-1.0.9 brotlicffi-1.0.9.2 bs4-0.0.1 certifi-2023.5.7 cffi-1.15.1 chardet-5.1.0 charset-normalizer-3.1.0 click-8.1.3 comtypes-1.2.0 crcmod-1.7 cryptography-41.0.1 cssselect-1.2.0 exceptiongroup-1.1.1 fake-useragent-1.1.3 ftputil-5.0.4 ghp-import-2.1.0 gitdb-4.0.10 idna-3.4 importlib-metadata-6.7.0 importlib-resources-5.12.0 inflate64-0.3.1 iniconfig-2.0.0 jinja2-3.1.2 loguru-0.7.0 lxml-4.9.2 mergedeep-1.3.4 mkdocs-1.4.3 mkdocs-autorefs-0.4.1 mkdocstrings-0.22.0 multivolumefile-0.2.3 packaging-23.1 paramiko-3.2.0 parse-1.19.1 pluggy-1.2.0 psutil-5.9.5 py-1.11.0 py7zr-0.20.5 pyasn1-0.5.0 pybcj-1.0.1 pycparser-2.21 pycryptodomex-3.18.0 pyee-8.2.2 pymdown-extensions-10.0.1 pynacl-1.5.0 pyppeteer-1.0.2 pyppmd-1.0.0 pyquery-2.0.0 pytest-7.4.0 pytest-check-2.1.5 pytest-html-3.2.0 pytest-metadata-3.0.0 pytest-rerunfailures-11.1.2 python-dateutil-2.8.2 python-dotenv-1.0.0 python-i18n-0.3.9 pywinauto-0.6.6 pyyaml-env-tag-0.1 pyzstd-0.15.9 requests-2.31.0 requests-html-0.10.0 rsa-4.9 six-1.16.0 smmap-5.0.0 soupsieve-2.4.1 texttable-1.6.7 tomli-2.0.1 tqdm-4.65.0 typing-extensions-4.6.3 urllib3-1.26.16 w3lib-2.1.1 watchdog-3.0.0 websockets-10.4 xlrd-2.0.1 xlwt-1.3.0 zipp-3.15.0\r\n```\r\nuse `pytest -k xxx`\uff0c report an error\uff1a`TypeError: argument of type 'int' is not iterable`\r\n\r\nit seems a error in collecting testcase\r\n```\r\n==================================== ERRORS ====================================\r\n_ ERROR collecting testcases\/\u57fa\u7ebf\/\u4ee3\u7406\u7b56\u7565\/SOCKS\u4e8c\u7ea7\u4ee3\u7406\u8fed\u4ee3\u4e8c\/\u5728\u7ebf\u7528\u6237\/\u5728\u7ebf\u7528\u6237\u66f4\u65b0\/\u4e0a\u7ebf\u7528\u6237\/test_socks_user_011.py _\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/runner.py:341: in from_call\r\n    result: Optional[TResult] = func()\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/runner.py:372: in <lambda>\r\n    call = CallInfo.from_call(lambda: list(collector.collect()), \"collect\")\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/python.py:531: in collect\r\n    self._inject_setup_module_fixture()\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/python.py:545: in _inject_setup_module_fixture\r\n    self.obj, (\"setUpModule\", \"setup_module\")\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/python.py:310: in obj\r\n    self._obj = obj = self._getobj()\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/python.py:528: in _getobj\r\n    return self._importtestmodule()\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/python.py:617: in _importtestmodule\r\n    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/pathlib.py:565: in import_path\r\n    importlib.import_module(module_name)\r\n\/usr\/local\/lib\/python3.8\/importlib\/__init__.py:127: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n<frozen importlib._bootstrap>:1014: in _gcd_import\r\n    ???\r\n<frozen importlib._bootstrap>:991: in _find_and_load\r\n    ???\r\n<frozen importlib._bootstrap>:975: in _find_and_load_unlocked\r\n    ???\r\n<frozen importlib._bootstrap>:671: in _load_unlocked\r\n    ???\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/assertion\/rewrite.py:169: in exec_module\r\n    source_stat, co = _rewrite_test(fn, self.config)\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/assertion\/rewrite.py:352: in _rewrite_test\r\n    rewrite_asserts(tree, source, strfn, config)\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/assertion\/rewrite.py:413: in rewrite_asserts\r\n    AssertionRewriter(module_path, config, source).run(mod)\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/assertion\/rewrite.py:695: in run\r\n    if self.is_rewrite_disabled(doc):\r\n\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/assertion\/rewrite.py:760: in is_rewrite_disabled\r\n    return \"PYTEST_DONT_REWRITE\" in docstring\r\nE   TypeError: argument of type 'int' is not iterable\r\n```\n","graph_file":"pytest-dev#pytest#6995257cf470d2143ad1683824962de4071c0eb7.graph.json"},"168":{"idx":168,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-11148","base_commit":"2f7415cfbc4b6ca62f9013f1abd27136f46b9653","problem_statement":"Module imported twice under import-mode=importlib\nIn pmxbot\/pmxbot@7f189ad, I'm attempting to switch pmxbot off of pkg_resources style namespace packaging to PEP 420 namespace packages. To do so, I've needed to switch to `importlib` for the `import-mode` and re-organize the tests to avoid import errors on the tests.\r\n\r\nYet even after working around these issues, the tests are failing when the effect of `core.initialize()` doesn't seem to have had any effect.\r\n\r\nInvestigating deeper, I see that initializer is executed and performs its actions (setting a class variable `pmxbot.logging.Logger.store`), but when that happens, there are two different versions of `pmxbot.logging` present, one in `sys.modules` and another found in `tests.unit.test_commands.logging`:\r\n\r\n```\r\n=========================================================================== test session starts ===========================================================================\r\nplatform darwin -- Python 3.11.1, pytest-7.2.0, pluggy-1.0.0\r\ncachedir: .tox\/python\/.pytest_cache\r\nrootdir: \/Users\/jaraco\/code\/pmxbot\/pmxbot, configfile: pytest.ini\r\nplugins: black-0.3.12, mypy-0.10.3, jaraco.test-5.3.0, checkdocs-2.9.0, flake8-1.1.1, enabler-2.0.0, jaraco.mongodb-11.2.1, pmxbot-1122.14.3.dev13+g7f189ad\r\ncollected 421 items \/ 180 deselected \/ 241 selected                                                                                                                       \r\nrun-last-failure: rerun previous 240 failures (skipped 14 files)\r\n\r\ntests\/unit\/test_commands.py E\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\ncls = <class 'tests.unit.test_commands.TestCommands'>\r\n\r\n    @classmethod\r\n    def setup_class(cls):\r\n        path = os.path.dirname(os.path.abspath(__file__))\r\n        configfile = os.path.join(path, 'testconf.yaml')\r\n        config = pmxbot.dictlib.ConfigDict.from_yaml(configfile)\r\n        cls.bot = core.initialize(config)\r\n>       logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\nE       AttributeError: type object 'Logger' has no attribute 'store'\r\n\r\ntests\/unit\/test_commands.py:37: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> \/Users\/jaraco\/code\/pmxbot\/pmxbot\/tests\/unit\/test_commands.py(37)setup_class()\r\n-> logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\n(Pdb) logging.Logger\r\n<class 'pmxbot.logging.Logger'>\r\n(Pdb) logging\r\n<module 'pmxbot.logging' from '\/Users\/jaraco\/code\/pmxbot\/pmxbot\/pmxbot\/logging.py'>\r\n(Pdb) import sys\r\n(Pdb) sys.modules['pmxbot.logging']\r\n<module 'pmxbot.logging' from '\/Users\/jaraco\/code\/pmxbot\/pmxbot\/pmxbot\/logging.py'>\r\n(Pdb) sys.modules['pmxbot.logging'] is logging\r\nFalse\r\n```\r\n\r\nI haven't yet made a minimal reproducer, but I wanted to first capture this condition.\r\n\n","graph_file":"pytest-dev#pytest#2f7415cfbc4b6ca62f9013f1abd27136f46b9653.graph.json"},"169":{"idx":169,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-5103","base_commit":"10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd","problem_statement":"Unroll the iterable for all\/any calls to get better reports\nSometime I need to assert some predicate on all of an iterable, and for that the builtin functions `all`\/`any` are great - but the failure messages aren't useful at all!\r\nFor example - the same test written in three ways:\r\n\r\n- A generator expression\r\n```sh                                                                                                                                                                                                                         \r\n    def test_all_even():\r\n        even_stevens = list(range(1,100,2))\r\n>       assert all(is_even(number) for number in even_stevens)\r\nE       assert False\r\nE        +  where False = all(<generator object test_all_even.<locals>.<genexpr> at 0x101f82ed0>)\r\n```\r\n- A list comprehension\r\n```sh\r\n    def test_all_even():\r\n        even_stevens = list(range(1,100,2))\r\n>       assert all([is_even(number) for number in even_stevens])\r\nE       assert False\r\nE        +  where False = all([False, False, False, False, False, False, ...])\r\n```\r\n- A for loop\r\n```sh\r\n    def test_all_even():\r\n        even_stevens = list(range(1,100,2))\r\n        for number in even_stevens:\r\n>           assert is_even(number)\r\nE           assert False\r\nE            +  where False = is_even(1)\r\n\r\ntest_all_any.py:7: AssertionError\r\n```\r\nThe only one that gives a meaningful report is the for loop - but it's way more wordy, and `all` asserts don't translate to a for loop nicely (I'll have to write a `break` or a helper function - yuck)\r\nI propose the assertion re-writer \"unrolls\" the iterator to the third form, and then uses the already existing reports.\r\n\r\n- [x] Include a detailed description of the bug or suggestion\r\n- [x] `pip list` of the virtual environment you are using\r\n```\r\nPackage        Version\r\n-------------- -------\r\natomicwrites   1.3.0  \r\nattrs          19.1.0 \r\nmore-itertools 7.0.0  \r\npip            19.0.3 \r\npluggy         0.9.0  \r\npy             1.8.0  \r\npytest         4.4.0  \r\nsetuptools     40.8.0 \r\nsix            1.12.0 \r\n```\r\n- [x] pytest and operating system versions\r\n`platform darwin -- Python 3.7.3, pytest-4.4.0, py-1.8.0, pluggy-0.9.0`\r\n- [x] Minimal example if possible\r\n\n","graph_file":"pytest-dev#pytest#10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd.graph.json"},"170":{"idx":170,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-5221","base_commit":"4a2fdce62b73944030cff9b3e52862868ca9584d","problem_statement":"Display fixture scope with `pytest --fixtures`\nIt would be useful to show fixture scopes with `pytest --fixtures`; currently the only way to learn the scope of a fixture is look at the docs (when that is documented) or at the source code.\n","graph_file":"pytest-dev#pytest#4a2fdce62b73944030cff9b3e52862868ca9584d.graph.json"},"171":{"idx":171,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-5227","base_commit":"2051e30b9b596e944524ccb787ed20f9f5be93e3","problem_statement":"Improve default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n","graph_file":"pytest-dev#pytest#2051e30b9b596e944524ccb787ed20f9f5be93e3.graph.json"},"172":{"idx":172,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-5413","base_commit":"450d2646233c670654744d3d24330b69895bb9d2","problem_statement":"str() on the pytest.raises context variable doesn't behave same as normal exception catch\nPytest 4.6.2, macOS 10.14.5\r\n\r\n```Python\r\ntry:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\nexcept LookupError as e:\r\n    print(str(e))\r\n```\r\nprints\r\n\r\n> A\r\n> B\r\n> C\r\n\r\nBut\r\n\r\n```Python\r\nwith pytest.raises(LookupError) as e:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\n\r\nprint(str(e))\r\n```\r\n\r\nprints\r\n\r\n> <console>:3: LookupError: A\r\n\r\nIn order to get the full error message, one must do `str(e.value)`, which is documented, but this is a different interaction. Any chance the behavior could be changed to eliminate this gotcha?\r\n\r\n-----\r\n\r\nPip list gives\r\n\r\n```\r\nPackage            Version  Location\r\n------------------ -------- ------------------------------------------------------\r\napipkg             1.5\r\nasn1crypto         0.24.0\r\natomicwrites       1.3.0\r\nattrs              19.1.0\r\naws-xray-sdk       0.95\r\nboto               2.49.0\r\nboto3              1.9.51\r\nbotocore           1.12.144\r\ncertifi            2019.3.9\r\ncffi               1.12.3\r\nchardet            3.0.4\r\nClick              7.0\r\ncodacy-coverage    1.3.11\r\ncolorama           0.4.1\r\ncoverage           4.5.3\r\ncryptography       2.6.1\r\ndecorator          4.4.0\r\ndocker             3.7.2\r\ndocker-pycreds     0.4.0\r\ndocutils           0.14\r\necdsa              0.13.2\r\nexecnet            1.6.0\r\nfuture             0.17.1\r\nidna               2.8\r\nimportlib-metadata 0.17\r\nipaddress          1.0.22\r\nJinja2             2.10.1\r\njmespath           0.9.4\r\njsondiff           1.1.1\r\njsonpickle         1.1\r\njsonschema         2.6.0\r\nMarkupSafe         1.1.1\r\nmock               3.0.4\r\nmore-itertools     7.0.0\r\nmoto               1.3.7\r\nneobolt            1.7.10\r\nneotime            1.7.4\r\nnetworkx           2.1\r\nnumpy              1.15.0\r\npackaging          19.0\r\npandas             0.24.2\r\npip                19.1.1\r\npluggy             0.12.0\r\nprompt-toolkit     2.0.9\r\npy                 1.8.0\r\npy2neo             4.2.0\r\npyaml              19.4.1\r\npycodestyle        2.5.0\r\npycparser          2.19\r\npycryptodome       3.8.1\r\nPygments           2.3.1\r\npyOpenSSL          19.0.0\r\npyparsing          2.4.0\r\npytest             4.6.2\r\npytest-cache       1.0\r\npytest-codestyle   1.4.0\r\npytest-cov         2.6.1\r\npytest-forked      1.0.2\r\npython-dateutil    2.7.3\r\npython-jose        2.0.2\r\npytz               2018.5\r\nPyYAML             5.1\r\nrequests           2.21.0\r\nrequests-mock      1.5.2\r\nresponses          0.10.6\r\ns3transfer         0.1.13\r\nsetuptools         41.0.1\r\nsix                1.11.0\r\nsqlite3worker      1.1.7\r\ntabulate           0.8.3\r\nurllib3            1.24.3\r\nwcwidth            0.1.7\r\nwebsocket-client   0.56.0\r\nWerkzeug           0.15.2\r\nwheel              0.33.1\r\nwrapt              1.11.1\r\nxlrd               1.1.0\r\nxmltodict          0.12.0\r\nzipp               0.5.1\r\n```\n","graph_file":"pytest-dev#pytest#450d2646233c670654744d3d24330b69895bb9d2.graph.json"},"173":{"idx":173,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-5495","base_commit":"1aefb24b37c30fba8fd79a744829ca16e252f340","problem_statement":"Confusing assertion rewriting message with byte strings\nThe comparison with assertion rewriting for byte strings is confusing: \r\n```\r\n    def test_b():\r\n>       assert b\"\" == b\"42\"\r\nE       AssertionError: assert b'' == b'42'\r\nE         Right contains more items, first extra item: 52\r\nE         Full diff:\r\nE         - b''\r\nE         + b'42'\r\nE         ?   ++\r\n```\r\n\r\n52 is the ASCII ordinal of \"4\" here.\r\n\r\nIt became clear to me when using another example:\r\n\r\n```\r\n    def test_b():\r\n>       assert b\"\" == b\"1\"\r\nE       AssertionError: assert b'' == b'1'\r\nE         Right contains more items, first extra item: 49\r\nE         Full diff:\r\nE         - b''\r\nE         + b'1'\r\nE         ?   +\r\n```\r\n\r\nNot sure what should\/could be done here.\n","graph_file":"pytest-dev#pytest#1aefb24b37c30fba8fd79a744829ca16e252f340.graph.json"},"174":{"idx":174,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-5692","base_commit":"29e336bd9bf87eaef8e2683196ee1975f1ad4088","problem_statement":"Hostname and timestamp properties in generated JUnit XML reports\nPytest enables generating JUnit XML reports of the tests.\r\n\r\nHowever, there are some properties missing, specifically `hostname` and `timestamp` from the `testsuite` XML element. Is there an option to include them?\r\n\r\nExample of a pytest XML report:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<testsuite errors=\"0\" failures=\"2\" name=\"check\" skipped=\"0\" tests=\"4\" time=\"0.049\">\r\n\t<testcase classname=\"test_sample.TestClass\" file=\"test_sample.py\" line=\"3\" name=\"test_addOne_normal\" time=\"0.001\"><\/testcase>\r\n\t<testcase classname=\"test_sample.TestClass\" file=\"test_sample.py\" line=\"6\" name=\"test_addOne_edge\" time=\"0.001\"><\/testcase>\r\n<\/testsuite>\r\n```\r\n\r\nExample of a junit XML report:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testsuite name=\"location.GeoLocationTest\" tests=\"2\" skipped=\"0\" failures=\"0\" errors=\"0\" timestamp=\"2019-04-22T10:32:27\" hostname=\"Anass-MacBook-Pro.local\" time=\"0.048\">\r\n  <properties\/>\r\n  <testcase name=\"testIoException()\" classname=\"location.GeoLocationTest\" time=\"0.044\"\/>\r\n  <testcase name=\"testJsonDeserialization()\" classname=\"location.GeoLocationTest\" time=\"0.003\"\/>\r\n  <system-out><![CDATA[]]><\/system-out>\r\n  <system-err><![CDATA[]]><\/system-err>\r\n<\/testsuite>\r\n```\n","graph_file":"pytest-dev#pytest#29e336bd9bf87eaef8e2683196ee1975f1ad4088.graph.json"},"175":{"idx":175,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-6116","base_commit":"e670ff76cbad80108bde9bab616b66771b8653cf","problem_statement":"pytest --collect-only needs a one char shortcut command\nI find myself needing to run `--collect-only` very often and that cli argument is a very long to type one. \r\n\r\nI do think that it would be great to allocate a character for it, not sure which one yet. Please use up\/down thumbs to vote if you would find it useful or not and eventually proposing which char should be used. \r\n\r\nClearly this is a change very easy to implement but first I want to see if others would find it useful or not.\npytest --collect-only needs a one char shortcut command\nI find myself needing to run `--collect-only` very often and that cli argument is a very long to type one. \r\n\r\nI do think that it would be great to allocate a character for it, not sure which one yet. Please use up\/down thumbs to vote if you would find it useful or not and eventually proposing which char should be used. \r\n\r\nClearly this is a change very easy to implement but first I want to see if others would find it useful or not.\n","graph_file":"pytest-dev#pytest#e670ff76cbad80108bde9bab616b66771b8653cf.graph.json"},"176":{"idx":176,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-7168","base_commit":"4787fd64a4ca0dba5528b5651bddd254102fe9f3","problem_statement":"INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- \/usr\/local\/opt\/python@3.8\/bin\/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/pluggy\/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_code\/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_code\/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_code\/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_code\/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_code\/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"\/usr\/local\/Cellar\/python@3.8\/3.8.1\/Frameworks\/Python.framework\/Versions\/3.8\/lib\/python3.8\/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"\/usr\/local\/Cellar\/python@3.8\/3.8.1\/Frameworks\/Python.framework\/Versions\/3.8\/lib\/python3.8\/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"\/usr\/local\/lib\/python3.8\/site-packages\/_pytest\/_io\/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"\/Users\/stiflou\/Documents\/projets\/apischema\/tests\/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n","graph_file":"pytest-dev#pytest#4787fd64a4ca0dba5528b5651bddd254102fe9f3.graph.json"},"177":{"idx":177,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-7220","base_commit":"56bf819c2f4eaf8b36bd8c42c06bb59d5a3bfc0f","problem_statement":"Wrong path to test file when directory changed in fixture\nFiles are shown as relative to new directory when working directory is changed in a fixture. This makes it impossible to jump to the error as the editor is unaware of the directory change. The displayed directory should stay relative to the original directory.\r\n\r\ntest_path_error.py:\r\n```python\r\nimport os\r\nimport errno\r\nimport shutil\r\n\r\nimport pytest\r\n\r\n\r\n@pytest.fixture\r\ndef private_dir():  # or (monkeypatch)\r\n    out_dir = 'ddd'\r\n\r\n    try:\r\n        shutil.rmtree(out_dir)\r\n    except OSError as ex:\r\n        if ex.errno != errno.ENOENT:\r\n            raise\r\n    os.mkdir(out_dir)\r\n\r\n    old_dir = os.getcwd()\r\n    os.chdir(out_dir)\r\n    yield out_dir\r\n    os.chdir(old_dir)\r\n\r\n    # Same issue if using:\r\n    # monkeypatch.chdir(out_dir)\r\n\r\n\r\ndef test_show_wrong_path(private_dir):\r\n    assert False\r\n```\r\n\r\n```diff\r\n+ Expected: test_path_error.py:29: AssertionError\r\n- Displayed: ..\/test_path_error.py:29: AssertionError\r\n```\r\n\r\nThe full output is:\r\n```\r\n-*- mode: compilation; default-directory: \"~\/src\/pytest_path_error\/\" -*-\r\nCompilation started at Fri Jan 10 00:05:52\r\n\r\nnox\r\nnox > Running session test\r\nnox > Creating virtual environment (virtualenv) using python3.7 in .nox\/test\r\nnox > pip install pytest>=5.3\r\nnox > pip freeze\r\nattrs==19.3.0\r\nimportlib-metadata==1.3.0\r\nmore-itertools==8.0.2\r\npackaging==20.0\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.6\r\npytest==5.3.2\r\nsix==1.13.0\r\nwcwidth==0.1.8\r\nzipp==0.6.0\r\nnox > pytest \r\n================================= test session starts =================================\r\nplatform linux -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: \/home\/lhn\/src\/pytest_path_error\r\ncollected 1 item                                                                      \r\n\r\ntest_path_error.py F                                                            [100%]\r\n\r\n====================================== FAILURES =======================================\r\n________________________________ test_show_wrong_path _________________________________\r\n\r\nprivate_dir = 'ddd'\r\n\r\n    def test_show_wrong_path(private_dir):\r\n>       assert False\r\nE       assert False\r\n\r\n..\/test_path_error.py:29: AssertionError\r\n================================== 1 failed in 0.03s ==================================\r\nnox > Command pytest  failed with exit code 1\r\nnox > Session test failed.\r\n\r\nCompilation exited abnormally with code 1 at Fri Jan 10 00:06:01\r\n```\r\n\r\nnoxfile.py:\r\n```python\r\nimport nox\r\n\r\n@nox.session(python='3.7')\r\ndef test(session):\r\n    session.install('pytest>=5.3')\r\n    session.run('pip', 'freeze')\r\n    session.run('pytest')\r\n```\n","graph_file":"pytest-dev#pytest#56bf819c2f4eaf8b36bd8c42c06bb59d5a3bfc0f.graph.json"},"178":{"idx":178,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-7373","base_commit":"7b77fc086aab8b3a8ebc890200371884555eea1e","problem_statement":"Incorrect caching of skipif\/xfail string condition evaluation\nVersion: pytest 5.4.3, current master\r\n\r\npytest caches the evaluation of the string in e.g. `@pytest.mark.skipif(\"sys.platform == 'win32'\")`. The caching key is only the string itself (see `cached_eval` in `_pytest\/mark\/evaluate.py`). However, the evaluation also depends on the item's globals, so the caching can lead to incorrect results. Example:\r\n\r\n```py\r\n# test_module_1.py\r\nimport pytest\r\n\r\nskip = True\r\n\r\n@pytest.mark.skipif(\"skip\")\r\ndef test_should_skip():\r\n    assert False\r\n```\r\n\r\n```py\r\n# test_module_2.py\r\nimport pytest\r\n\r\nskip = False\r\n\r\n@pytest.mark.skipif(\"skip\")\r\ndef test_should_not_skip():\r\n    assert False\r\n```\r\n\r\nRunning `pytest test_module_1.py test_module_2.py`.\r\n\r\nExpected: `test_should_skip` is skipped, `test_should_not_skip` is not skipped.\r\n\r\nActual: both are skipped.\r\n\r\n---\r\n\r\nI think the most appropriate fix is to simply remove the caching, which I don't think is necessary really, and inline `cached_eval` into `MarkEvaluator._istrue`.\n","graph_file":"pytest-dev#pytest#7b77fc086aab8b3a8ebc890200371884555eea1e.graph.json"},"179":{"idx":179,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-7432","base_commit":"e6e300e729dd33956e5448d8be9a0b1540b4e53a","problem_statement":"skipping: --runxfail breaks pytest.mark.skip location reporting\npytest versions: 5.4.x, current master\r\n\r\nWhen `@pytest.mark.skip`\/`skipif` marks are used to skip a test, for example\r\n\r\n```py\r\nimport pytest\r\n@pytest.mark.skip\r\ndef test_skip_location() -> None:\r\n    assert 0\r\n```\r\n\r\nthe expected skip location reported should point to the item itself, and this is indeed what happens when running with `pytest -rs`:\r\n\r\n```\r\nSKIPPED [1] test_it.py:3: unconditional skip\r\n```\r\n\r\nHowever, adding `pytest -rs --runxfail` breaks this:\r\n\r\n```\r\nSKIPPED [1] src\/_pytest\/skipping.py:238: unconditional skip\r\n```\r\n\r\nThe `--runxfail` is only about xfail and should not affect this at all.\r\n\r\n---\r\n\r\nHint: the bug is in `src\/_pytest\/skipping.py`, the `pytest_runtest_makereport` hook.\n","graph_file":"pytest-dev#pytest#e6e300e729dd33956e5448d8be9a0b1540b4e53a.graph.json"},"180":{"idx":180,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-7490","base_commit":"7f7a36478abe7dd1fa993b115d22606aa0e35e88","problem_statement":"Pytest 6: Dynamically adding xfail marker in test no longer ignores failure\n<!--\r\nThanks for submitting an issue!\r\n\r\nHere's a quick checklist for what to provide:\r\n-->\r\n\r\n## Description\r\n\r\nWith pytest 5.x, we can dynamically add an xfail to a test `request` object using `request.node.add_marker(mark)` (see example below). In 5.x this treated the failing test like a a test marked statically with an `xfail`. With 6.0.0rc0 it raises. \r\n\r\n## Versions\r\n\r\n<details>\r\n\r\n```\r\n$ pip list\r\nPackage                       Version                         Location                                                      \r\n----------------------------- ------------------------------- --------------------------------------------------------------\r\na                             1.0                             \r\naioftp                        0.13.0                          \r\naiohttp                       3.6.2                           \r\nalabaster                     0.7.12                          \r\napipkg                        1.5                             \r\naplus                         0.11.0                          \r\nappdirs                       1.4.3                           \r\nappnope                       0.1.0                           \r\narrow                         0.15.7                          \r\naspy.yaml                     1.3.0                           \r\nastropy                       3.2.3                           \r\nasv                           0.4.1                           \r\nasync-timeout                 3.0.1                           \r\natomicwrites                  1.3.0                           \r\nattrs                         19.1.0                          \r\naws-sam-translator            1.15.1                          \r\naws-xray-sdk                  0.95                            \r\nBabel                         2.7.0                           \r\nbackcall                      0.1.0                           \r\nbinaryornot                   0.4.4                           \r\nblack                         19.10b0                         \r\nbleach                        3.1.0                           \r\nblurb                         1.0.7                           \r\nbokeh                         1.3.4                           \r\nboto                          2.49.0                          \r\nboto3                         1.7.84                          \r\nbotocore                      1.10.84                         \r\nbqplot                        0.12.12                         \r\nbranca                        0.3.1                           \r\ncachetools                    4.1.0                           \r\ncertifi                       2019.9.11                       \r\ncffi                          1.13.2                          \r\ncfgv                          2.0.1                           \r\ncfn-lint                      0.25.0                          \r\ncftime                        1.0.4.2                         \r\nchardet                       3.0.4                           \r\nClick                         7.0                             \r\nclick-plugins                 1.1.1                           \r\ncligj                         0.5.0                           \r\ncloudpickle                   1.2.2                           \r\ncolorama                      0.4.3                           \r\ncolorcet                      2.0.2                           \r\ncoloredlogs                   14.0                            \r\ncookiecutter                  1.7.2                           \r\ncookies                       2.2.1                           \r\ncoverage                      4.5.4                           \r\ncryptography                  2.8                             \r\ncycler                        0.10.0                          \r\nCython                        3.0a5                           \r\ncytoolz                       0.10.1                          \r\ndask                          2.4.0                           \/Users\/taugspurger\/Envs\/pandas-dev\/lib\/python3.7\/site-packages\r\nDateTime                      4.3                             \r\ndecorator                     4.4.0                           \r\ndefusedxml                    0.6.0                           \r\nDeprecated                    1.2.7                           \r\ndistributed                   2.4.0                           \r\ndocker                        4.1.0                           \r\ndocutils                      0.15.2                          \r\necdsa                         0.14.1                          \r\nentrypoints                   0.3                             \r\net-xmlfile                    1.0.1                           \r\nexecnet                       1.7.1                           \r\nfastparquet                   0.3.3                           \/Users\/taugspurger\/sandbox\/fastparquet                        \r\nfeedparser                    5.2.1                           \r\nFiona                         1.8.8                           \r\nflake8                        3.7.9                           \r\nflake8-rst                    0.7.1                           \r\nfletcher                      0.3.1                           \r\nflit                          2.1.0                           \r\nflit-core                     2.1.0                           \r\nfsspec                        0.7.4                           \r\nfuture                        0.18.2                          \r\ngcsfs                         0.6.2                           \r\ngeopandas                     0.6.0+1.g95b8e1a.dirty          \/Users\/taugspurger\/sandbox\/geopandas                          \r\ngitdb2                        2.0.5                           \r\nGitPython                     3.0.2                           \r\ngoogle-auth                   1.16.1                          \r\ngoogle-auth-oauthlib          0.4.1                           \r\ngraphviz                      0.13                            \r\nh5py                          2.10.0                          \r\nHeapDict                      1.0.1                           \r\nholoviews                     1.12.6                          \r\nhumanfriendly                 8.1                             \r\nhunter                        3.1.3                           \r\nhvplot                        0.5.2                           \r\nhypothesis                    4.36.2                          \r\nidentify                      1.4.7                           \r\nidna                          2.8                             \r\nimagesize                     1.1.0                           \r\nimportlib-metadata            0.23                            \r\nimportlib-resources           1.0.2                           \r\niniconfig                     1.0.0                           \r\nintake                        0.5.3                           \r\nipydatawidgets                4.0.1                           \r\nipykernel                     5.1.2                           \r\nipyleaflet                    0.13.0                          \r\nipympl                        0.5.6                           \r\nipython                       7.11.1                          \r\nipython-genutils              0.2.0                           \r\nipyvolume                     0.5.2                           \r\nipyvue                        1.3.2                           \r\nipyvuetify                    1.4.0                           \r\nipywebrtc                     0.5.0                           \r\nipywidgets                    7.5.1                           \r\nisort                         4.3.21                          \r\njdcal                         1.4.1                           \r\njedi                          0.16.0                          \r\nJinja2                        2.11.2                          \r\njinja2-time                   0.2.0                           \r\njmespath                      0.9.4                           \r\njoblib                        0.14.1                          \r\njson5                         0.9.4                           \r\njsondiff                      1.1.1                           \r\njsonpatch                     1.24                            \r\njsonpickle                    1.2                             \r\njsonpointer                   2.0                             \r\njsonschema                    3.0.2                           \r\njupyter                       1.0.0                           \r\njupyter-client                5.3.3                           \r\njupyter-console               6.0.0                           \r\njupyter-core                  4.5.0                           \r\njupyterlab                    2.1.2                           \r\njupyterlab-server             1.1.4                           \r\nkiwisolver                    1.1.0                           \r\nline-profiler                 2.1.1                           \r\nllvmlite                      0.33.0                          \r\nlocket                        0.2.0                           \/Users\/taugspurger\/sandbox\/locket.py                          \r\nlxml                          4.5.0                           \r\nmanhole                       1.6.0                           \r\nMarkdown                      3.1.1                           \r\nMarkupSafe                    1.1.1                           \r\nmatplotlib                    3.2.2                           \r\nmccabe                        0.6.1                           \r\nmemory-profiler               0.55.0                          \r\nmistune                       0.8.4                           \r\nmock                          3.0.5                           \r\nmore-itertools                7.2.0                           \r\nmoto                          1.3.6                           \r\nmsgpack                       0.6.2                           \r\nmultidict                     4.5.2                           \r\nmunch                         2.3.2                           \r\nmypy                          0.730                           \r\nmypy-extensions               0.4.1                           \r\nnbconvert                     5.6.0                           \r\nnbformat                      4.4.0                           \r\nnbsphinx                      0.4.2                           \r\nnest-asyncio                  1.3.3                           \r\nnodeenv                       1.3.3                           \r\nnotebook                      6.0.1                           \r\nnumexpr                       2.7.1                           \r\nnumpy                         1.19.0                          \r\nnumpydoc                      1.0.0.dev0                      \r\noauthlib                      3.1.0                           \r\nodfpy                         1.4.0                           \r\nopenpyxl                      3.0.3                           \r\npackaging                     20.4                            \r\npandas                        1.1.0.dev0+1758.g035e1fe831     \/Users\/taugspurger\/sandbox\/pandas                             \r\npandas-sphinx-theme           0.0.1.dev0                      \/Users\/taugspurger\/sandbox\/pandas-sphinx-theme                \r\npandocfilters                 1.4.2                           \r\nparam                         1.9.2                           \r\nparfive                       1.0.0                           \r\nparso                         0.6.0                           \r\npartd                         1.0.0                           \r\npathspec                      0.8.0                           \r\npatsy                         0.5.1                           \r\npexpect                       4.7.0                           \r\npickleshare                   0.7.5                           \r\nPillow                        6.1.0                           \r\npip                           20.0.2                          \r\npluggy                        0.13.0                          \r\npoyo                          0.5.0                           \r\npre-commit                    1.18.3                          \r\nprogressbar2                  3.51.3                          \r\nprometheus-client             0.7.1                           \r\nprompt-toolkit                2.0.9                           \r\npsutil                        5.6.3                           \r\nptyprocess                    0.6.0                           \r\npy                            1.9.0                           \r\npyaml                         20.4.0                          \r\npyarrow                       0.16.0                          \r\npyasn1                        0.4.7                           \r\npyasn1-modules                0.2.8                           \r\npycodestyle                   2.5.0                           \r\npycparser                     2.19                            \r\npycryptodome                  3.9.8                           \r\npyct                          0.4.6                           \r\npydata-sphinx-theme           0.1.1                           \r\npydeps                        1.9.0                           \r\npyflakes                      2.1.1                           \r\nPyGithub                      1.44.1                          \r\nPygments                      2.4.2                           \r\nPyJWT                         1.7.1                           \r\npyparsing                     2.4.2                           \r\npyproj                        2.4.0                           \r\npyrsistent                    0.15.4                          \r\npytest                        5.4.3                           \r\npytest-asyncio                0.10.0                          \r\npytest-cov                    2.8.1                           \r\npytest-cover                  3.0.0                           \r\npytest-forked                 1.0.2                           \r\npytest-repeat                 0.8.0                           \r\npytest-xdist                  1.29.0                          \r\npython-boilerplate            0.1.0                           \r\npython-dateutil               2.8.0                           \r\npython-jose                   2.0.2                           \r\npython-jsonrpc-server         0.3.2                           \r\npython-language-server        0.31.4                          \r\npython-slugify                4.0.1                           \r\npython-utils                  2.4.0                           \r\npythreejs                     2.2.0                           \r\npytoml                        0.1.21                          \r\npytz                          2019.2                          \r\npyviz-comms                   0.7.2                           \r\nPyYAML                        5.1.2                           \r\npyzmq                         18.1.0                          \r\nqtconsole                     4.5.5                           \r\nregex                         2020.6.8                        \r\nrequests                      2.24.0                          \r\nrequests-oauthlib             1.3.0                           \r\nresponses                     0.10.6                          \r\nrsa                           4.0                             \r\nrstcheck                      3.3.1                           \r\ns3fs                          0.4.2                           \r\ns3transfer                    0.1.13                          \r\nscikit-learn                  0.22.2.post1                    \r\nscipy                         1.3.1                           \r\nseaborn                       0.9.0                           \r\nSend2Trash                    1.5.0                           \r\nsetuptools                    49.2.0                          \r\nShapely                       1.6.4.post2                     \r\nsix                           1.12.0                          \r\nsmmap2                        2.0.5                           \r\nsnakeviz                      2.0.1                           \r\nsnowballstemmer               1.9.1                           \r\nsortedcontainers              2.1.0                           \r\nsparse                        0.10.0                          \r\nSphinx                        3.1.1                           \r\nsphinxcontrib-applehelp       1.0.2                           \r\nsphinxcontrib-devhelp         1.0.2                           \r\nsphinxcontrib-htmlhelp        1.0.3                           \r\nsphinxcontrib-jsmath          1.0.1                           \r\nsphinxcontrib-qthelp          1.0.3                           \r\nsphinxcontrib-serializinghtml 1.1.4                           \r\nsphinxcontrib-websupport      1.1.2                           \r\nsphinxcontrib.youtube         0.1.2                           \r\nSQLAlchemy                    1.3.11                          \r\nsshpubkeys                    3.1.0                           \r\nstatsmodels                   0.10.2                          \r\nstdlib-list                   0.6.0                           \r\nsunpy                         1.1.dev518+gcad2d473f.d20191103 \/Users\/taugspurger\/sandbox\/sunpy                              \r\ntables                        3.6.1                           \r\ntabulate                      0.8.6                           \r\ntblib                         1.4.0                           \r\nterminado                     0.8.2                           \r\ntest                          1.0.0                           \r\ntestpath                      0.4.2                           \r\ntext-unidecode                1.3                             \r\nthrift                        0.13.0                          \r\ntoml                          0.10.0                          \r\ntoolz                         0.10.0                          \r\ntornado                       6.0.3                           \r\ntqdm                          4.37.0                          \r\ntraitlets                     4.3.2                           \r\ntraittypes                    0.2.1                           \r\ntyped-ast                     1.4.0                           \r\ntyping-extensions             3.7.4                           \r\nujson                         1.35                            \r\nurllib3                       1.25.5                          \r\nvaex                          3.0.0                           \r\nvaex-arrow                    0.5.1                           \r\nvaex-astro                    0.7.0                           \r\nvaex-core                     2.0.2                           \r\nvaex-hdf5                     0.6.0                           \r\nvaex-jupyter                  0.5.1.post0                     \r\nvaex-ml                       0.9.0                           \r\nvaex-server                   0.3.1                           \r\nvaex-viz                      0.4.0                           \r\nvirtualenv                    16.7.5                          \r\nwcwidth                       0.1.7                           \r\nwebencodings                  0.5.1                           \r\nwebsocket-client              0.56.0                          \r\nWerkzeug                      0.16.0                          \r\nwheel                         0.34.2                          \r\nwidgetsnbextension            3.5.1                           \r\nwrapt                         1.11.2                          \r\nxarray                        0.14.1+36.gb3d3b448             \/Users\/taugspurger\/sandbox\/xarray                             \r\nxlwt                          1.3.0                           \r\nxmltodict                     0.12.0                          \r\nyarl                          1.3.0                           \r\nzict                          1.0.0                           \r\nzipp                          0.6.0                           \r\nzope.interface                4.7.1                           \r\n```\r\n\r\n<\/details>\r\n\r\n- [ ] pytest and operating system versions\r\n\r\nPytest 6.0.1rc0 and MacOS 10.14.5\r\n\r\n```python\r\n# file: test_foo.py\r\nimport pytest\r\n\r\n\r\ndef test_xfail_test(request):\r\n    mark = pytest.mark.xfail(reason=\"xfail\")\r\n    request.node.add_marker(mark)\r\n    assert 0\r\n```\r\n\r\nWith 5.4.3\r\n\r\n```\r\n\r\n$ pytest -rsx test_foo.py\r\n=============================================================================== test session starts ================================================================================\r\nplatform darwin -- Python 3.7.6, pytest-5.4.3, py-1.9.0, pluggy-0.13.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('\/Users\/taugspurger\/sandbox\/.hypothesis\/examples')\r\nrootdir: \/Users\/taugspurger\/sandbox\r\nplugins: xdist-1.29.0, hypothesis-4.36.2, forked-1.0.2, repeat-0.8.0, asyncio-0.10.0, cov-2.8.1\r\ncollected 1 item\r\n\r\ntest_foo.py x                                                                                                                                                                [100%]\r\n\r\n============================================================================= short test summary info ==============================================================================\r\nXFAIL test_foo.py::test_xfail_test\r\n  xfail\r\n================================================================================ 1 xfailed in 0.07s ================================================================================\r\n```\r\n\r\nWith 6.0.0rc0\r\n\r\n```\r\n$ pytest -rsx test_foo.py\r\n=============================================================================== test session starts ================================================================================\r\nplatform darwin -- Python 3.7.6, pytest-6.0.0rc1, py-1.9.0, pluggy-0.13.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('\/Users\/taugspurger\/sandbox\/.hypothesis\/examples')\r\nrootdir: \/Users\/taugspurger\/sandbox\r\nplugins: xdist-1.29.0, hypothesis-4.36.2, forked-1.0.2, repeat-0.8.0, asyncio-0.10.0, cov-2.8.1\r\ncollected 1 item\r\n\r\ntest_foo.py F                                                                                                                                                                [100%]\r\n\r\n===================================================================================== FAILURES =====================================================================================\r\n_________________________________________________________________________________ test_xfail_test __________________________________________________________________________________\r\n\r\nrequest = <FixtureRequest for <Function test_xfail_test>>\r\n\r\n    def test_xfail_test(request):\r\n        mark = pytest.mark.xfail(reason=\"xfail\")\r\n        request.node.add_marker(mark)\r\n>       assert 0\r\nE       assert 0\r\n\r\ntest_foo.py:7: AssertionError\r\n```\r\n\n","graph_file":"pytest-dev#pytest#7f7a36478abe7dd1fa993b115d22606aa0e35e88.graph.json"},"181":{"idx":181,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-8365","base_commit":"4964b468c83c06971eb743fbc57cc404f760c573","problem_statement":"tmpdir creation fails when the username contains illegal characters for directory names\n`tmpdir`, `tmpdir_factory` and `tmp_path_factory` rely on `getpass.getuser()` for determining the `basetemp` directory. I found that the user name returned by `getpass.getuser()` may return characters that are not allowed for directory names. This may lead to errors while creating the temporary directory.\r\n\r\nThe situation in which I reproduced this issue was while being logged in through an ssh connection into my Windows 10 x64 Enterprise version (1909) using an OpenSSH_for_Windows_7.7p1 server. In this configuration the command `python -c \"import getpass; print(getpass.getuser())\"` returns my domain username e.g. `contoso\\john_doe` instead of `john_doe` as when logged in regularly using a local session.\r\n\r\nWhen trying to create a temp directory in pytest through e.g. `tmpdir_factory.mktemp('foobar')` this fails with the following error message:\r\n```\r\nself = WindowsPath('C:\/Users\/john_doe\/AppData\/Local\/Temp\/pytest-of-contoso\/john_doe')\r\nmode = 511, parents = False, exist_ok = True\r\n\r\n    def mkdir(self, mode=0o777, parents=False, exist_ok=False):\r\n        \"\"\"\r\n        Create a new directory at this given path.\r\n        \"\"\"\r\n        if self._closed:\r\n            self._raise_closed()\r\n        try:\r\n>           self._accessor.mkdir(self, mode)\r\nE           FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\john_doe\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-contoso\\\\john_doe'\r\n\r\nC:\\Python38\\lib\\pathlib.py:1266: FileNotFoundError\r\n```\r\n\r\nI could also reproduce this without the complicated ssh\/windows setup with pytest 6.2.2 using the following commands from a `cmd`:\r\n```bat\r\necho def test_tmpdir(tmpdir):>test_tmp.py\r\necho   pass>>test_tmp.py\r\nset LOGNAME=contoso\\john_doe\r\npy.test test_tmp.py\r\n```\r\n\r\nThanks for having a look at this!\n","graph_file":"pytest-dev#pytest#4964b468c83c06971eb743fbc57cc404f760c573.graph.json"},"182":{"idx":182,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-8906","base_commit":"69356d20cfee9a81972dcbf93d8caf9eabe113e8","problem_statement":"Improve handling of skip for module level\nThis is potentially about updating docs, updating error messages or introducing a new API.\r\n\r\nConsider the following scenario:\r\n\r\n`pos_only.py` is using Python 3,8 syntax:\r\n```python\r\ndef foo(a, \/, b):\r\n    return a + b\r\n```\r\n\r\nIt should not be tested under Python 3.6 and 3.7.\r\nThis is a proper way to skip the test in Python older than 3.8:\r\n```python\r\nfrom pytest import raises, skip\r\nimport sys\r\nif sys.version_info < (3, 8):\r\n    skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\r\n\r\n# import must be after the module level skip:\r\nfrom pos_only import *\r\n\r\ndef test_foo():\r\n    assert foo(10, 20) == 30\r\n    assert foo(10, b=20) == 30\r\n    with raises(TypeError):\r\n        assert foo(a=10, b=20)\r\n```\r\n\r\nMy actual test involves parameterize and a 3.8 only class, so skipping the test itself is not sufficient because the 3.8 class was used in the parameterization.\r\n\r\nA naive user will try to initially skip the module like:\r\n\r\n```python\r\nif sys.version_info < (3, 8):\r\n    skip(msg=\"Requires Python >= 3.8\")\r\n```\r\nThis issues this error:\r\n\r\n>Using pytest.skip outside of a test is not allowed. To decorate a test function, use the @pytest.mark.skip or @pytest.mark.skipif decorators instead, and to skip a module use `pytestmark = pytest.mark.{skip,skipif}.\r\n\r\nThe proposed solution `pytestmark = pytest.mark.{skip,skipif}`, does not work  in my case: pytest continues to process the file and fail when it hits the 3.8 syntax (when running with an older version of Python).\r\n\r\nThe correct solution, to use skip as a function is actively discouraged by the error message.\r\n\r\nThis area feels a bit unpolished.\r\nA few ideas to improve:\r\n\r\n1. Explain skip with  `allow_module_level` in the error message. this seems in conflict with the spirit of the message.\r\n2. Create an alternative API to skip a module to make things easier: `skip_module(\"reason\")`, which can call `_skip(msg=msg, allow_module_level=True)`.\r\n\r\n\n","graph_file":"pytest-dev#pytest#69356d20cfee9a81972dcbf93d8caf9eabe113e8.graph.json"},"183":{"idx":183,"repo":"pytest-dev\/pytest","instance_id":"pytest-dev__pytest-9359","base_commit":"e2ee3144ed6e241dea8d96215fcdca18b3892551","problem_statement":"Error message prints extra code line when using assert in python3.9\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n- [x] a detailed description of the bug or problem you are having\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [ ] minimal example if possible\r\n### Description\r\nI have a test like this:\r\n```\r\nfrom pytest import fixture\r\n\r\n\r\ndef t(foo):\r\n    return foo\r\n\r\n\r\n@fixture\r\ndef foo():\r\n    return 1\r\n\r\n\r\ndef test_right_statement(foo):\r\n    assert foo == (3 + 2) * (6 + 9)\r\n\r\n    @t\r\n    def inner():\r\n        return 2\r\n\r\n    assert 2 == inner\r\n\r\n\r\n@t\r\ndef outer():\r\n    return 2\r\n```\r\nThe test \"test_right_statement\" fails at the first assertion,but print extra code (the \"t\" decorator) in error details, like this:\r\n\r\n```\r\n ============================= test session starts =============================\r\nplatform win32 -- Python 3.9.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.1 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\nplugins: allure-pytest-2.9.45\r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\n    \r\n        @t\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.12s ==============================\r\n```\r\nAnd the same thing **did not** happen when using python3.7.10\uff1a\r\n```\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.7.10, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.03s ==============================\r\n```\r\nIs there some problems when calculate the statement lineno?\r\n\r\n### pip list \r\n```\r\n$ pip list\r\nPackage            Version\r\n------------------ -------\r\natomicwrites       1.4.0\r\nattrs              21.2.0\r\ncolorama           0.4.4\r\nimportlib-metadata 4.8.2\r\niniconfig          1.1.1\r\npackaging          21.3\r\npip                21.3.1\r\npluggy             1.0.0\r\npy                 1.11.0\r\npyparsing          3.0.6\r\npytest             6.2.5\r\nsetuptools         59.4.0\r\ntoml               0.10.2\r\ntyping_extensions  4.0.0\r\nzipp               3.6.0\r\n\r\n```\r\n### pytest and operating system versions\r\npytest 6.2.5\r\nWindows 10 \r\nSeems to happen in python 3.9,not 3.7\r\n\n","graph_file":"pytest-dev#pytest#e2ee3144ed6e241dea8d96215fcdca18b3892551.graph.json"},"184":{"idx":184,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-10297","base_commit":"b90661d6a46aa3619d3eec94d5281f5888add501","problem_statement":"linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps\/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n","graph_file":"scikit-learn#scikit-learn#b90661d6a46aa3619d3eec94d5281f5888add501.graph.json"},"185":{"idx":185,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-10508","base_commit":"c753b77ac49e72ebc0fe5e3c2369fe628f975017","problem_statement":"LabelEncoder transform fails for empty lists (for certain inputs)\nPython 3.6.3, scikit_learn 0.19.1\r\n\r\nDepending on which datatypes were used to fit the LabelEncoder, transforming empty lists works or not. Expected behavior would be that empty arrays are returned in both cases.\r\n\r\n```python\r\n>>> from sklearn.preprocessing import LabelEncoder\r\n>>> le = LabelEncoder()\r\n>>> le.fit([1,2])\r\nLabelEncoder()\r\n>>> le.transform([])\r\narray([], dtype=int64)\r\n>>> le.fit([\"a\",\"b\"])\r\nLabelEncoder()\r\n>>> le.transform([])\r\nTraceback (most recent call last):\r\n  File \"[...]\\Python36\\lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 57, in _wrapfunc\r\n    return getattr(obj, method)(*args, **kwds)\r\nTypeError: Cannot cast array data from dtype('float64') to dtype('<U32') according to the rule 'safe'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"[...]\\Python36\\lib\\site-packages\\sklearn\\preprocessing\\label.py\", line 134, in transform\r\n    return np.searchsorted(self.classes_, y)\r\n  File \"[...]\\Python36\\lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 1075, in searchsorted\r\n    return _wrapfunc(a, 'searchsorted', v, side=side, sorter=sorter)\r\n  File \"[...]\\Python36\\lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 67, in _wrapfunc\r\n    return _wrapit(obj, method, *args, **kwds)\r\n  File \"[...]\\Python36\\lib\\site-packages\\numpy\\core\\fromnumeric.py\", line 47, in _wrapit\r\n    result = getattr(asarray(obj), method)(*args, **kwds)\r\nTypeError: Cannot cast array data from dtype('float64') to dtype('<U32') according to the rule 'safe'\r\n```\n","graph_file":"scikit-learn#scikit-learn#c753b77ac49e72ebc0fe5e3c2369fe628f975017.graph.json"},"186":{"idx":186,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-10949","base_commit":"3b5abf76597ce6aff76192869f92647c1b5259e7","problem_statement":"warn_on_dtype with DataFrame\n#### Description\r\n\r\n``warn_on_dtype`` has no effect when input is a pandas ``DataFrame``\r\n\r\n#### Steps\/Code to Reproduce\r\n```python\r\nfrom sklearn.utils.validation import check_array\r\nimport pandas as pd\r\ndf = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)\r\nchecked = check_array(df, warn_on_dtype=True)\r\n```\r\n\r\n#### Expected result: \r\n\r\n```python-traceback\r\nDataConversionWarning: Data with input dtype object was converted to float64.\r\n```\r\n\r\n#### Actual Results\r\nNo warning is thrown\r\n\r\n#### Versions\r\nLinux-4.4.0-116-generic-x86_64-with-debian-stretch-sid\r\nPython 3.6.3 |Anaconda, Inc.| (default, Nov  3 2017, 19:19:16) \r\n[GCC 7.2.0]\r\nNumPy 1.13.1\r\nSciPy 0.19.1\r\nScikit-Learn 0.20.dev0\r\nPandas 0.21.0\r\n\nwarn_on_dtype with DataFrame\n#### Description\r\n\r\n``warn_on_dtype`` has no effect when input is a pandas ``DataFrame``\r\n\r\n#### Steps\/Code to Reproduce\r\n```python\r\nfrom sklearn.utils.validation import check_array\r\nimport pandas as pd\r\ndf = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)\r\nchecked = check_array(df, warn_on_dtype=True)\r\n```\r\n\r\n#### Expected result: \r\n\r\n```python-traceback\r\nDataConversionWarning: Data with input dtype object was converted to float64.\r\n```\r\n\r\n#### Actual Results\r\nNo warning is thrown\r\n\r\n#### Versions\r\nLinux-4.4.0-116-generic-x86_64-with-debian-stretch-sid\r\nPython 3.6.3 |Anaconda, Inc.| (default, Nov  3 2017, 19:19:16) \r\n[GCC 7.2.0]\r\nNumPy 1.13.1\r\nSciPy 0.19.1\r\nScikit-Learn 0.20.dev0\r\nPandas 0.21.0\r\n\n","graph_file":"scikit-learn#scikit-learn#3b5abf76597ce6aff76192869f92647c1b5259e7.graph.json"},"187":{"idx":187,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-11040","base_commit":"96a02f3934952d486589dddd3f00b40d5a5ab5f2","problem_statement":"Missing parameter validation in Neighbors estimator for float n_neighbors\n```python\r\nfrom sklearn.neighbors import NearestNeighbors\r\nfrom sklearn.datasets import make_blobs\r\nX, y = make_blobs()\r\nneighbors = NearestNeighbors(n_neighbors=3.)\r\nneighbors.fit(X)\r\nneighbors.kneighbors(X)\r\n```\r\n```\r\n~\/checkout\/scikit-learn\/sklearn\/neighbors\/binary_tree.pxi in sklearn.neighbors.kd_tree.NeighborsHeap.__init__()\r\n\r\nTypeError: 'float' object cannot be interpreted as an integer\r\n```\r\nThis should be caught earlier and a more helpful error message should be raised (or we could be lenient and cast to integer, but I think a better error might be better).\r\n\r\nWe need to make sure that \r\n```python\r\nneighbors.kneighbors(X, n_neighbors=3.)\r\n```\r\nalso works.\n","graph_file":"scikit-learn#scikit-learn#96a02f3934952d486589dddd3f00b40d5a5ab5f2.graph.json"},"188":{"idx":188,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-11281","base_commit":"4143356c3c51831300789e4fdf795d83716dbab6","problem_statement":"Should mixture models have a clusterer-compatible interface\nMixture models are currently a bit different. They are basically clusterers, except they are probabilistic, and are applied to inductive problems unlike many clusterers. But they are unlike clusterers in API:\r\n* they have an `n_components` parameter, with identical purpose to `n_clusters`\r\n* they do not store the `labels_` of the training data\r\n* they do not have a `fit_predict` method\r\n\r\nAnd they are almost entirely documented separately.\r\n\r\nShould we make the MMs more like clusterers?\n","graph_file":"scikit-learn#scikit-learn#4143356c3c51831300789e4fdf795d83716dbab6.graph.json"},"189":{"idx":189,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-12471","base_commit":"02dc9ed680e7f53f1b0d410dcdd37341c7958eb1","problem_statement":"OneHotEncoder ignore unknown error when categories are strings \n#### Description\r\n\r\nThis bug is very specific, but it happens when you set OneHotEncoder to ignore unknown entries.\r\nand your labels are strings. The memory of the arrays is not handled safely and it can lead to a ValueError\r\n\r\nBasically, when you call the transform method it will sets all the unknown strings on your array to OneHotEncoder.categories_[i][0] which is the first category alphabetically sorted given for fit\r\nIf this OneHotEncoder.categories_[i][0] is a long string, and the array that you want to transform has small strings, then it is impossible to fit the whole  OneHotEncoder.categories_[i][0] into the entries of the array we want to transform. So  OneHotEncoder.categories_[i][0]  is truncated and this raise the ValueError.\r\n\r\n\r\n\r\n#### Steps\/Code to Reproduce\r\n```\r\n\r\nimport numpy as np\r\nfrom sklearn.preprocessing import OneHotEncoder\r\n\r\n\r\n# It needs to be numpy arrays, the error does not appear \r\n# is you have lists of lists because it gets treated like an array of objects.\r\ntrain  = np.array([ '22','333','4444','11111111' ]).reshape((-1,1))\r\ntest   = np.array([ '55555',  '22' ]).reshape((-1,1))\r\n\r\nohe = OneHotEncoder(dtype=bool,handle_unknown='ignore')\r\n\r\nohe.fit( train )\r\nenc_test = ohe.transform( test )\r\n\r\n```\r\n\r\n\r\n#### Expected Results\r\nHere we should get an sparse matrix 2x4 false everywhere except at (1,1) the '22' that is known\r\n\r\n#### Actual Results\r\n\r\n> ValueError: y contains previously unseen labels: ['111111']\r\n\r\n\r\n#### Versions\r\nSystem:\r\n    python: 2.7.12 (default, Dec  4 2017, 14:50:18)  [GCC 5.4.0 20160609]\r\n   machine: Linux-4.4.0-138-generic-x86_64-with-Ubuntu-16.04-xenial\r\nexecutable: \/usr\/bin\/python\r\n\r\nBLAS:\r\n    macros: HAVE_CBLAS=None\r\ncblas_libs: openblas, openblas\r\n  lib_dirs: \/usr\/lib\r\n\r\nPython deps:\r\n    Cython: 0.25.2\r\n     scipy: 0.18.1\r\nsetuptools: 36.7.0\r\n       pip: 9.0.1\r\n     numpy: 1.15.2\r\n    pandas: 0.19.1\r\n   sklearn: 0.21.dev0\r\n\r\n\r\n\r\n#### Comments\r\n\r\nI already implemented a fix for this issue, where I check the size of the elements in the array before, and I cast them into objects if necessary.\n","graph_file":"scikit-learn#scikit-learn#02dc9ed680e7f53f1b0d410dcdd37341c7958eb1.graph.json"},"190":{"idx":190,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13142","base_commit":"1c8668b0a021832386470ddf740d834e02c66f69","problem_statement":"GaussianMixture predict and fit_predict disagree when n_init>1\n#### Description\r\nWhen `n_init` is specified in GaussianMixture, the results of fit_predict(X) and predict(X) are often different.  The `test_gaussian_mixture_fit_predict` unit test doesn't catch this because it does not set `n_init`.\r\n\r\n#### Steps\/Code to Reproduce\r\n```\r\npython\r\nfrom sklearn.mixture import GaussianMixture\r\nfrom sklearn.utils.testing import assert_array_equal\r\nimport numpy\r\nX = numpy.random.randn(1000,5)\r\nprint 'no n_init'\r\ngm = GaussianMixture(n_components=5)\r\nc1 = gm.fit_predict(X)\r\nc2 = gm.predict(X)\r\nassert_array_equal(c1,c2)\r\nprint 'n_init=5'\r\ngm = GaussianMixture(n_components=5, n_init=5)\r\nc1 = gm.fit_predict(X)\r\nc2 = gm.predict(X)\r\nassert_array_equal(c1,c2)\r\n```\r\n\r\n#### Expected Results\r\n```\r\nno n_init\r\nn_init=5\r\n```\r\nNo exceptions.\r\n\r\n#### Actual Results\r\n```\r\nno n_init\r\nn_init=5\r\nTraceback (most recent call last):\r\n  File \"test_gm.py\", line 17, in <module>\r\n    assert_array_equal(c1,c2)\r\n  File \"\/home\/scott\/.local\/lib\/python2.7\/site-packages\/numpy\/testing\/_private\/utils.py\", line 872, in assert_array_equal\r\n    verbose=verbose, header='Arrays are not equal')\r\n  File \"\/home\/scott\/.local\/lib\/python2.7\/site-packages\/numpy\/testing\/_private\/utils.py\", line 796, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nArrays are not equal\r\n\r\n(mismatch 88.6%)\r\n x: array([4, 0, 1, 1, 1, 3, 3, 4, 4, 2, 0, 0, 1, 2, 0, 2, 0, 1, 3, 1, 1, 3,\r\n       2, 1, 0, 2, 1, 0, 2, 0, 3, 1, 2, 3, 3, 1, 0, 2, 2, 0, 3, 0, 2, 0,\r\n       4, 2, 3, 0, 4, 2, 4, 1, 0, 2, 2, 1, 3, 2, 1, 4, 0, 2, 2, 1, 1, 2,...\r\n y: array([4, 1, 0, 2, 2, 1, 1, 4, 4, 0, 4, 1, 0, 3, 1, 0, 2, 2, 1, 2, 0, 0,\r\n       1, 0, 4, 1, 0, 4, 0, 1, 1, 2, 3, 1, 4, 0, 1, 4, 4, 4, 0, 1, 0, 2,\r\n       4, 1, 1, 2, 4, 3, 4, 0, 2, 3, 2, 3, 0, 0, 2, 3, 3, 3, 3, 0, 3, 2,...\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 2.7.15rc1 (default, Nov 12 2018, 14:31:15)  [GCC 7.3.0]\r\n   machine: Linux-4.15.0-43-generic-x86_64-with-Ubuntu-18.04-bionic\r\nexecutable: \/usr\/bin\/python\r\n\r\nBLAS:\r\n    macros: HAVE_CBLAS=None, NO_ATLAS_INFO=-1\r\ncblas_libs: cblas\r\n  lib_dirs: \/usr\/lib\/x86_64-linux-gnu\r\n\r\nPython deps:\r\n    Cython: 0.28.5\r\n     scipy: 1.2.0\r\nsetuptools: 39.0.1\r\n       pip: 19.0.1\r\n     numpy: 1.16.0\r\n    pandas: 0.23.1\r\n   sklearn: 0.20.2\r\n```\n","graph_file":"scikit-learn#scikit-learn#1c8668b0a021832386470ddf740d834e02c66f69.graph.json"},"191":{"idx":191,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13241","base_commit":"f8b108d0c6f2f82b2dc4e32a6793f9d9ac9cf2f4","problem_statement":"Differences among the results of KernelPCA with rbf kernel\nHi there,\r\nI met with a problem:\r\n\r\n#### Description\r\nWhen I run KernelPCA for dimension reduction for the same datasets, the results are different in signs.\r\n\r\n#### Steps\/Code to Reproduce\r\nJust to reduce the dimension to 7 with rbf kernel:\r\npca = KernelPCA(n_components=7, kernel='rbf', copy_X=False, n_jobs=-1)\r\npca.fit_transform(X)\r\n\r\n#### Expected Results\r\nThe same result.\r\n\r\n#### Actual Results\r\nThe results are the same except for their signs:(\r\n[[-0.44457617 -0.18155886 -0.10873474  0.13548386 -0.1437174  -0.057469\t0.18124364]] \r\n\r\n[[ 0.44457617  0.18155886  0.10873474 -0.13548386 -0.1437174  -0.057469 -0.18124364]] \r\n\r\n[[-0.44457617 -0.18155886  0.10873474  0.13548386  0.1437174   0.057469  0.18124364]] \r\n\r\n#### Versions\r\n0.18.1\r\n\n","graph_file":"scikit-learn#scikit-learn#f8b108d0c6f2f82b2dc4e32a6793f9d9ac9cf2f4.graph.json"},"192":{"idx":192,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13439","base_commit":"a62775e99f2a5ea3d51db7160fad783f6cd8a4c5","problem_statement":"Pipeline should implement __len__\n#### Description\r\n\r\nWith the new indexing support `pipe[:len(pipe)]` raises an error.\r\n\r\n#### Steps\/Code to Reproduce\r\n\r\n```python\r\nfrom sklearn import svm\r\nfrom sklearn.datasets import samples_generator\r\nfrom sklearn.feature_selection import SelectKBest\r\nfrom sklearn.feature_selection import f_regression\r\nfrom sklearn.pipeline import Pipeline\r\n\r\n# generate some data to play with\r\nX, y = samples_generator.make_classification(\r\n    n_informative=5, n_redundant=0, random_state=42)\r\n\r\nanova_filter = SelectKBest(f_regression, k=5)\r\nclf = svm.SVC(kernel='linear')\r\npipe = Pipeline([('anova', anova_filter), ('svc', clf)])\r\n\r\nlen(pipe)\r\n```\r\n\r\n#### Versions\r\n\r\n```\r\nSystem:\r\n    python: 3.6.7 | packaged by conda-forge | (default, Feb 19 2019, 18:37:23)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags\/RELEASE_401\/final)]\r\nexecutable: \/Users\/krisz\/.conda\/envs\/arrow36\/bin\/python\r\n   machine: Darwin-18.2.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: HAVE_CBLAS=None\r\n  lib_dirs: \/Users\/krisz\/.conda\/envs\/arrow36\/lib\r\ncblas_libs: openblas, openblas\r\n\r\nPython deps:\r\n       pip: 19.0.3\r\nsetuptools: 40.8.0\r\n   sklearn: 0.21.dev0\r\n     numpy: 1.16.2\r\n     scipy: 1.2.1\r\n    Cython: 0.29.6\r\n    pandas: 0.24.1\r\n```\n","graph_file":"scikit-learn#scikit-learn#a62775e99f2a5ea3d51db7160fad783f6cd8a4c5.graph.json"},"193":{"idx":193,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13496","base_commit":"3aefc834dce72e850bff48689bea3c7dff5f3fad","problem_statement":"Expose warm_start in Isolation forest\nIt seems to me that `sklearn.ensemble.IsolationForest` supports incremental addition of new trees with the `warm_start` parameter of its parent class, `sklearn.ensemble.BaseBagging`.\r\n\r\nEven though this parameter is not exposed in `__init__()` , it gets inherited from `BaseBagging` and one can use it by changing it to `True` after initialization. To make it work, you have to also increment `n_estimators` on every iteration. \r\n\r\nIt took me a while to notice that it actually works, and I had to inspect the source code of both `IsolationForest` and `BaseBagging`. Also, it looks to me that the behavior is in-line with `sklearn.ensemble.BaseForest` that is behind e.g. `sklearn.ensemble.RandomForestClassifier`.\r\n\r\nTo make it more easier to use, I'd suggest to:\r\n* expose `warm_start` in `IsolationForest.__init__()`, default `False`;\r\n* document it in the same way as it is documented for `RandomForestClassifier`, i.e. say:\r\n```py\r\n    warm_start : bool, optional (default=False)\r\n        When set to ``True``, reuse the solution of the previous call to fit\r\n        and add more estimators to the ensemble, otherwise, just fit a whole\r\n        new forest. See :term:`the Glossary <warm_start>`.\r\n```\r\n* add a test to make sure it works properly;\r\n* possibly also mention in the \"IsolationForest example\" documentation entry;\r\n\n","graph_file":"scikit-learn#scikit-learn#3aefc834dce72e850bff48689bea3c7dff5f3fad.graph.json"},"194":{"idx":194,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13497","base_commit":"26f690961a52946dd2f53bf0fdd4264b2ae5be90","problem_statement":"Comparing string to array in _estimate_mi\nIn ``_estimate_mi`` there is ``discrete_features == 'auto'`` but discrete features can be an array of indices or a boolean mask.\r\nThis will error in future versions of numpy.\r\nAlso this means we never test this function with discrete features != 'auto', it seems?\n","graph_file":"scikit-learn#scikit-learn#26f690961a52946dd2f53bf0fdd4264b2ae5be90.graph.json"},"195":{"idx":195,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13584","base_commit":"0e3c1879b06d839171b7d0a607d71bbb19a966a9","problem_statement":"bug in print_changed_only in new repr: vector values\n```python\r\nimport sklearn\r\nimport numpy as np\r\nfrom sklearn.linear_model import LogisticRegressionCV\r\nsklearn.set_config(print_changed_only=True)\r\nprint(LogisticRegressionCV(Cs=np.array([0.1, 1])))\r\n```\r\n> ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n\r\nping @NicolasHug \r\n\n","graph_file":"scikit-learn#scikit-learn#0e3c1879b06d839171b7d0a607d71bbb19a966a9.graph.json"},"196":{"idx":196,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-13779","base_commit":"b34751b7ed02b2cfcc36037fb729d4360480a299","problem_statement":"Voting estimator will fail at fit if weights are passed and an estimator is None\nBecause we don't check for an estimator to be `None` in `sample_weight` support, `fit` is failing`.\r\n\r\n```python\r\n    X, y = load_iris(return_X_y=True)\r\n    voter = VotingClassifier(\r\n        estimators=[('lr', LogisticRegression()),\r\n                    ('rf', RandomForestClassifier())]\r\n    )\r\n    voter.fit(X, y, sample_weight=np.ones(y.shape))\r\n    voter.set_params(lr=None)\r\n    voter.fit(X, y, sample_weight=np.ones(y.shape))\r\n```\r\n\r\n```\r\nAttributeError: 'NoneType' object has no attribute 'fit'\r\n```\n","graph_file":"scikit-learn#scikit-learn#b34751b7ed02b2cfcc36037fb729d4360480a299.graph.json"},"197":{"idx":197,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-14087","base_commit":"a5743ed36fbd3fbc8e351bdab16561fbfca7dfa1","problem_statement":"IndexError thrown with LogisticRegressionCV and refit=False\n#### Description\r\nThe following error is thrown when trying to estimate a regularization parameter via cross-validation, *without* refitting.\r\n\r\n#### Steps\/Code to Reproduce\r\n```python\r\nimport sys\r\nimport sklearn\r\nfrom sklearn.linear_model import LogisticRegressionCV\r\nimport numpy as np\r\n\r\nnp.random.seed(29)\r\nX = np.random.normal(size=(1000, 3))\r\nbeta = np.random.normal(size=3)\r\nintercept = np.random.normal(size=None)\r\ny = np.sign(intercept + X @ beta)\r\n\r\nLogisticRegressionCV(\r\ncv=5,\r\nsolver='saga', # same error with 'liblinear'\r\ntol=1e-2,\r\nrefit=False).fit(X, y)\r\n```\r\n\r\n\r\n#### Expected Results\r\nNo error is thrown. \r\n\r\n#### Actual Results\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-3-81609fd8d2ca> in <module>\r\n----> 1 LogisticRegressionCV(refit=False).fit(X, y)\r\n\r\n~\/.pyenv\/versions\/3.6.7\/envs\/jupyter\/lib\/python3.6\/site-packages\/sklearn\/linear_model\/logistic.py in fit(self, X, y, sample_weight)\r\n   2192                 else:\r\n   2193                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\r\n-> 2194                                  for i in range(len(folds))], axis=0)\r\n   2195 \r\n   2196                 best_indices_C = best_indices % len(self.Cs_)\r\n\r\n~\/.pyenv\/versions\/3.6.7\/envs\/jupyter\/lib\/python3.6\/site-packages\/sklearn\/linear_model\/logistic.py in <listcomp>(.0)\r\n   2192                 else:\r\n   2193                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\r\n-> 2194                                  for i in range(len(folds))], axis=0)\r\n   2195 \r\n   2196                 best_indices_C = best_indices % len(self.Cs_)\r\n\r\nIndexError: too many indices for array\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.6.7 (default, May 13 2019, 16:14:45)  [GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.46.4)]\r\nexecutable: \/Users\/tsweetser\/.pyenv\/versions\/3.6.7\/envs\/jupyter\/bin\/python\r\n   machine: Darwin-18.6.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: NO_ATLAS_INFO=3, HAVE_CBLAS=None\r\n  lib_dirs: \r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.1.1\r\nsetuptools: 39.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.15.1\r\n     scipy: 1.1.0\r\n    Cython: 0.29.6\r\n    pandas: 0.24.2\r\n```\n","graph_file":"scikit-learn#scikit-learn#a5743ed36fbd3fbc8e351bdab16561fbfca7dfa1.graph.json"},"198":{"idx":198,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-14092","base_commit":"df7dd8391148a873d157328a4f0328528a0c4ed9","problem_statement":"NCA fails in GridSearch due to too strict parameter checks\nNCA checks its parameters to have a specific type, which can easily fail in a GridSearch due to how param grid is made.\r\n\r\nHere is an example:\r\n```python\r\nimport numpy as np\r\n\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.model_selection import GridSearchCV\r\nfrom sklearn.neighbors import NeighborhoodComponentsAnalysis\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\n\r\nX = np.random.random_sample((100, 10))\r\ny = np.random.randint(2, size=100)\r\n\r\nnca = NeighborhoodComponentsAnalysis()\r\nknn = KNeighborsClassifier()\r\n\r\npipe = Pipeline([('nca', nca),\r\n                 ('knn', knn)])\r\n                \r\nparams = {'nca__tol': [0.1, 0.5, 1],\r\n          'nca__n_components': np.arange(1, 10)}\r\n          \r\ngs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\r\ngs.fit(X,y)\r\n```\r\n\r\nThe issue is that for `tol`: 1 is not a float, and for  `n_components`: np.int64 is not int\r\n\r\nBefore proposing a fix for this specific situation, I'd like to have your general opinion about parameter checking.  \r\nI like this idea of common parameter checking tool introduced with the NCA PR. What do you think about extending it across the code-base (or at least for new or recent estimators) ?\r\n\r\nCurrently parameter checking is not always done or often partially done, and is quite redundant. For instance, here is the input validation of lda:\r\n```python\r\ndef _check_params(self):\r\n        \"\"\"Check model parameters.\"\"\"\r\n        if self.n_components <= 0:\r\n            raise ValueError(\"Invalid 'n_components' parameter: %r\"\r\n                             % self.n_components)\r\n\r\n        if self.total_samples <= 0:\r\n            raise ValueError(\"Invalid 'total_samples' parameter: %r\"\r\n                             % self.total_samples)\r\n\r\n        if self.learning_offset < 0:\r\n            raise ValueError(\"Invalid 'learning_offset' parameter: %r\"\r\n                             % self.learning_offset)\r\n\r\n        if self.learning_method not in (\"batch\", \"online\"):\r\n            raise ValueError(\"Invalid 'learning_method' parameter: %r\"\r\n                             % self.learning_method)\r\n```\r\nmost params aren't checked and for those who are there's a lot of duplicated code.\r\n\r\nA propose to be upgrade the new tool to be able to check open\/closed intervals (currently only closed) and list membership.\r\n\r\nThe api would be something like that:\r\n```\r\ncheck_param(param, name, valid_options)\r\n```\r\nwhere valid_options would be a dict of `type: constraint`. e.g for the `beta_loss` param of `NMF`, it can be either a float or a string in a list, which would give\r\n```\r\nvalid_options = {numbers.Real: None,  # None for no constraint\r\n                 str: ['frobenius', 'kullback-leibler', 'itakura-saito']}\r\n```\r\nSometimes a parameter can only be positive or within a given interval, e.g. `l1_ratio` of `LogisticRegression` must be between 0 and 1, which would give\r\n```\r\nvalid_options = {numbers.Real: Interval(0, 1, closed='both')}\r\n```\r\npositivity of e.g. `max_iter` would be `numbers.Integral: Interval(left=1)`.\n","graph_file":"scikit-learn#scikit-learn#df7dd8391148a873d157328a4f0328528a0c4ed9.graph.json"},"199":{"idx":199,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-14894","base_commit":"fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6","problem_statement":"ZeroDivisionError in _sparse_fit for SVM with empty support_vectors_\n#### Description\r\nWhen using sparse data, in the case where the support_vectors_ attribute is be empty, _fit_sparse gives a ZeroDivisionError\r\n\r\n#### Steps\/Code to Reproduce\r\n```\r\nimport numpy as np\r\nimport scipy\r\nimport sklearn\r\nfrom sklearn.svm import SVR\r\nx_train = np.array([[0, 1, 0, 0],\r\n[0, 0, 0, 1],\r\n[0, 0, 1, 0],\r\n[0, 0, 0, 1]])\r\ny_train = np.array([0.04, 0.04, 0.10, 0.16])\r\nmodel = SVR(C=316.227766017, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,\r\n  \t    gamma=1.0, kernel='linear', max_iter=15000,\r\n  \t    shrinking=True, tol=0.001, verbose=False)\r\n# dense x_train has no error\r\nmodel.fit(x_train, y_train)\r\n\r\n# convert to sparse\r\nxtrain= scipy.sparse.csr_matrix(x_train)\r\nmodel.fit(xtrain, y_train)\r\n\r\n```\r\n#### Expected Results\r\nNo error is thrown and  `self.dual_coef_ = sp.csr_matrix([])`\r\n\r\n#### Actual Results\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/usr\/local\/lib\/python3.5\/dist-packages\/sklearn\/svm\/base.py\", line 209, in fit\r\n    fit(X, y, sample_weight, solver_type, kernel, random_seed=seed)\r\n  File \"\/usr\/local\/lib\/python3.5\/dist-packages\/sklearn\/svm\/base.py\", line 302, in _sparse_fit\r\n    dual_coef_indices.size \/ n_class)\r\nZeroDivisionError: float division by zero\r\n```\r\n\r\n#### Versions\r\n```\r\n>>> sklearn.show_versions() \r\n\r\nSystem:\r\nexecutable: \/usr\/bin\/python3\r\n    python: 3.5.2 (default, Nov 12 2018, 13:43:14)  [GCC 5.4.0 20160609]\r\n   machine: Linux-4.15.0-58-generic-x86_64-with-Ubuntu-16.04-xenial\r\n\r\nPython deps:\r\n     numpy: 1.17.0\r\n    Cython: None\r\n       pip: 19.2.1\r\n    pandas: 0.22.0\r\n   sklearn: 0.21.3\r\n     scipy: 1.3.0\r\nsetuptools: 40.4.3\r\n```\n","graph_file":"scikit-learn#scikit-learn#fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6.graph.json"},"200":{"idx":200,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-14983","base_commit":"06632c0d185128a53c57ccc73b25b6408e90bb89","problem_statement":"RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps\/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n","graph_file":"scikit-learn#scikit-learn#06632c0d185128a53c57ccc73b25b6408e90bb89.graph.json"},"201":{"idx":201,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-15512","base_commit":"b8a4da8baa1137f173e7035f104067c7d2ffde22","problem_statement":"Return values of non converged affinity propagation clustering\nThe affinity propagation Documentation states: \r\n\"When the algorithm does not converge, it returns an empty array as cluster_center_indices and -1 as label for each training sample.\"\r\n\r\nExample:\r\n```python\r\nfrom sklearn.cluster import AffinityPropagation\r\nimport pandas as pd\r\n\r\ndata = pd.DataFrame([[1,0,0,0,0,0],[0,1,1,1,0,0],[0,0,1,0,0,1]])\r\naf = AffinityPropagation(affinity='euclidean', verbose=True, copy=False, max_iter=2).fit(data)\r\n\r\nprint(af.cluster_centers_indices_)\r\nprint(af.labels_)\r\n\r\n```\r\nI would expect that the clustering here (which does not converge) prints first an empty List and then [-1,-1,-1], however, I get [2] as cluster center and [0,0,0] as cluster labels. \r\nThe only way I currently know if the clustering fails is if I use the verbose option, however that is very unhandy. A hacky solution is to check if max_iter == n_iter_ but it could have converged exactly 15 iterations before max_iter (although unlikely).\r\nI am not sure if this is intended behavior and the documentation is wrong?\r\n\r\nFor my use-case within a bigger script, I would prefer to get back -1 values or have a property to check if it has converged, as otherwise, a user might not be aware that the clustering never converged.\r\n\r\n\r\n#### Versions\r\nSystem:\r\n    python: 3.6.7 | packaged by conda-forge | (default, Nov 21 2018, 02:32:25)  [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)]\r\nexecutable: \/home\/jenniferh\/Programs\/anaconda3\/envs\/TF_RDKit_1_19\/bin\/python\r\n   machine: Linux-4.15.0-52-generic-x86_64-with-debian-stretch-sid\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: \/home\/jenniferh\/Programs\/anaconda3\/envs\/TF_RDKit_1_19\/lib\r\ncblas_libs: mkl_rt, pthread\r\nPython deps:\r\n    pip: 18.1\r\n   setuptools: 40.6.3\r\n   sklearn: 0.20.3\r\n   numpy: 1.15.4\r\n   scipy: 1.2.0\r\n   Cython: 0.29.2\r\n   pandas: 0.23.4\r\n\r\n\n","graph_file":"scikit-learn#scikit-learn#b8a4da8baa1137f173e7035f104067c7d2ffde22.graph.json"},"202":{"idx":202,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-15535","base_commit":"70b0ddea992c01df1a41588fa9e2d130fb6b13f8","problem_statement":"regression in input validation of clustering metrics\n```python\r\nfrom sklearn.metrics.cluster import mutual_info_score\r\nimport numpy as np\r\n\r\nx = np.random.choice(['a', 'b'], size=20).astype(object)\r\nmutual_info_score(x, x)\r\n```\r\nValueError: could not convert string to float: 'b'\r\n\r\nwhile\r\n```python\r\nx = np.random.choice(['a', 'b'], size=20)\r\nmutual_info_score(x, x)\r\n```\r\nworks with a warning?\r\n\r\nthis worked in 0.21.1 without a warning (as I think it should)\r\n\r\n\r\nEdit by @ogrisel: I removed the `.astype(object)` in the second code snippet.\n","graph_file":"scikit-learn#scikit-learn#70b0ddea992c01df1a41588fa9e2d130fb6b13f8.graph.json"},"203":{"idx":203,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-25500","base_commit":"4db04923a754b6a2defa1b172f55d492b85d165e","problem_statement":"CalibratedClassifierCV doesn't work with `set_config(transform_output=\"pandas\")`\n### Describe the bug\r\n\r\nCalibratedClassifierCV with isotonic regression doesn't work when we previously set `set_config(transform_output=\"pandas\")`.\r\nThe IsotonicRegression seems to return a dataframe, which is a problem for `_CalibratedClassifier`  in `predict_proba` where it tries to put the dataframe in a numpy array row `proba[:, class_idx] = calibrator.predict(this_pred)`.\r\n\r\n### Steps\/Code to Reproduce\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn import set_config\r\nfrom sklearn.calibration import CalibratedClassifierCV\r\nfrom sklearn.linear_model import SGDClassifier\r\n\r\nset_config(transform_output=\"pandas\")\r\nmodel = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\r\nmodel.fit(np.arange(90).reshape(30, -1), np.arange(30) % 2)\r\nmodel.predict(np.arange(90).reshape(30, -1))\r\n```\r\n\r\n### Expected Results\r\n\r\nIt should not crash.\r\n\r\n### Actual Results\r\n\r\n```\r\n..\/core\/model_trainer.py:306: in train_model\r\n    cv_predictions = cross_val_predict(pipeline,\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/sklearn\/model_selection\/_validation.py:968: in cross_val_predict\r\n    predictions = parallel(\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/parallel.py:1085: in __call__\r\n    if self.dispatch_one_batch(iterator):\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/parallel.py:901: in dispatch_one_batch\r\n    self._dispatch(tasks)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/parallel.py:819: in _dispatch\r\n    job = self._backend.apply_async(batch, callback=cb)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/_parallel_backends.py:208: in apply_async\r\n    result = ImmediateResult(func)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/_parallel_backends.py:597: in __init__\r\n    self.results = batch()\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/parallel.py:288: in __call__\r\n    return [func(*args, **kwargs)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/joblib\/parallel.py:288: in <listcomp>\r\n    return [func(*args, **kwargs)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/sklearn\/utils\/fixes.py:117: in __call__\r\n    return self.function(*args, **kwargs)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/sklearn\/model_selection\/_validation.py:1052: in _fit_and_predict\r\n    predictions = func(X_test)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/sklearn\/pipeline.py:548: in predict_proba\r\n    return self.steps[-1][1].predict_proba(Xt, **predict_proba_params)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/sklearn\/calibration.py:477: in predict_proba\r\n    proba = calibrated_classifier.predict_proba(X)\r\n..\/..\/..\/..\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/sklearn\/calibration.py:764: in predict_proba\r\n    proba[:, class_idx] = calibrator.predict(this_pred)\r\nE   ValueError: could not broadcast input array from shape (20,1) into shape (20,)\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.9.15 (main, Nov 24 2022, 14:31:59)  [GCC 11.2.0]\r\nexecutable: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/bin\/python\r\n   machine: Linux-5.15.0-57-generic-x86_64-with-glibc2.31\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.0\r\n          pip: 22.2.2\r\n   setuptools: 62.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.9.3\r\n       Cython: None\r\n       pandas: 1.4.1\r\n   matplotlib: 3.6.3\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/scikit_learn.libs\/libgomp-a34b3233.so.1.0.0\r\n        version: None\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/numpy.libs\/libopenblas64_p-r0-742d56dc.3.20.so\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/scipy.libs\/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n```\r\n\n","graph_file":"scikit-learn#scikit-learn#4db04923a754b6a2defa1b172f55d492b85d165e.graph.json"},"204":{"idx":204,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-25570","base_commit":"cd25abee0ad0ac95225d4a9be8948eff69f49690","problem_statement":"ColumnTransformer with pandas output can't handle transformers with no features\n### Describe the bug\r\n\r\nHi,\r\n\r\nColumnTransformer doesn't deal well with transformers that apply to 0 features (categorical_features in the example below) when using \"pandas\" as output. It seems steps with 0 features are not fitted, hence don't appear in `self._iter(fitted=True)` (_column_transformer.py l.856) and hence break the input to the `_add_prefix_for_feature_names_out` function (l.859).\r\n\r\n\r\n### Steps\/Code to Reproduce\r\n\r\nHere is some code to reproduce the error. If you remove .set_output(transform=\"pandas\") on the line before last, all works fine. If you remove the (\"categorical\", ...) step, it works fine too.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom lightgbm import LGBMClassifier\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import RobustScaler\r\n\r\nX = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\r\n                 columns=[\"a\", \"b\", \"c\", \"d\"])\r\ny = np.array([0, 1])\r\ncategorical_features = []\r\nnumerical_features = [\"a\", \"b\", \"c\"]\r\nmodel_preprocessing = (\"preprocessing\",\r\n                       ColumnTransformer([\r\n                           ('categorical', 'passthrough', categorical_features),\r\n                           ('numerical', Pipeline([(\"scaler\", RobustScaler()),\r\n                                                   (\"imputer\", SimpleImputer(strategy=\"median\"))\r\n                                                   ]), numerical_features),\r\n                       ], remainder='drop'))\r\npipeline = Pipeline([model_preprocessing, (\"classifier\", LGBMClassifier())]).set_output(transform=\"pandas\")\r\npipeline.fit(X, y)\r\n```\r\n\r\n### Expected Results\r\n\r\nThe step with no features should be ignored.\r\n\r\n### Actual Results\r\n\r\nHere is the error message:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"\/home\/philippe\/workspace\/script.py\", line 22, in <module>\r\n    pipeline.fit(X, y)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/sklearn\/pipeline.py\", line 402, in fit\r\n    Xt = self._fit(X, y, **fit_params_steps)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/sklearn\/pipeline.py\", line 360, in _fit\r\n    X, fitted_transformer = fit_transform_one_cached(\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/joblib\/memory.py\", line 349, in __call__\r\n    return self.func(*args, **kwargs)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/sklearn\/pipeline.py\", line 894, in _fit_transform_one\r\n    res = transformer.fit_transform(X, y, **fit_params)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/sklearn\/utils\/_set_output.py\", line 142, in wrapped\r\n    data_to_wrap = f(self, X, *args, **kwargs)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/sklearn\/compose\/_column_transformer.py\", line 750, in fit_transform\r\n    return self._hstack(list(Xs))\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/sklearn\/compose\/_column_transformer.py\", line 862, in _hstack\r\n    output.columns = names_out\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/pandas\/core\/generic.py\", line 5596, in __setattr__\r\n    return object.__setattr__(self, name, value)\r\n  File \"pandas\/_libs\/properties.pyx\", line 70, in pandas._libs.properties.AxisProperty.__set__\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/pandas\/core\/generic.py\", line 769, in _set_axis\r\n    self._mgr.set_axis(axis, labels)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/pandas\/core\/internals\/managers.py\", line 214, in set_axis\r\n    self._validate_set_axis(axis, new_labels)\r\n  File \"\/home\/philippe\/.anaconda3\/envs\/deleteme\/lib\/python3.9\/site-packages\/pandas\/core\/internals\/base.py\", line 69, in _validate_set_axis\r\n    raise ValueError(\r\nValueError: Length mismatch: Expected axis has 3 elements, new values have 0 elements\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.9.15 (main, Nov 24 2022, 14:31:59)  [GCC 11.2.0]\r\nexecutable: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/bin\/python\r\n   machine: Linux-5.15.0-57-generic-x86_64-with-glibc2.31\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.0\r\n          pip: 22.2.2\r\n   setuptools: 62.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.9.3\r\n       Cython: None\r\n       pandas: 1.4.1\r\n   matplotlib: 3.6.3\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/scikit_learn.libs\/libgomp-a34b3233.so.1.0.0\r\n        version: None\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/numpy.libs\/libopenblas64_p-r0-742d56dc.3.20.so\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: \/home\/philippe\/.anaconda3\/envs\/strategy-training\/lib\/python3.9\/site-packages\/scipy.libs\/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n```\r\n\n","graph_file":"scikit-learn#scikit-learn#cd25abee0ad0ac95225d4a9be8948eff69f49690.graph.json"},"205":{"idx":205,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-25638","base_commit":"6adb209acd63825affc884abcd85381f148fb1b0","problem_statement":"Support nullable pandas dtypes in `unique_labels`\n### Describe the workflow you want to enable\n\nI would like to be able to pass the nullable pandas dtypes (\"Int64\", \"Float64\", \"boolean\") into sklearn's `unique_labels` function. Because the dtypes become `object` dtype when converted to numpy arrays we get `ValueError: Mix type of y not allowed, got types {'binary', 'unknown'}`:\r\n\r\nRepro with sklearn 1.2.1\r\n```py \r\n    import pandas as pd\r\n    import pytest\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"Int64\", \"Float64\", \"boolean\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        with pytest.raises(ValueError, match=\"Mix type of y not allowed, got types\"):\r\n            unique_labels(y_true, y_predicted)\r\n```\n\n### Describe your proposed solution\n\nWe should get the same behavior as when `int64`, `float64`, and `bool` dtypes are used, which is no error:  \r\n\r\n```python\r\n    import pandas as pd\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"int64\", \"float64\", \"bool\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        unique_labels(y_true, y_predicted)\r\n```\n\n### Describe alternatives you've considered, if relevant\n\nOur current workaround is to convert the data to numpy arrays with the corresponding dtype that works prior to passing it into `unique_labels`.\n\n### Additional context\n\n_No response_\n","graph_file":"scikit-learn#scikit-learn#6adb209acd63825affc884abcd85381f148fb1b0.graph.json"},"206":{"idx":206,"repo":"scikit-learn\/scikit-learn","instance_id":"scikit-learn__scikit-learn-25747","base_commit":"2c867b8f822eb7a684f0d5c4359e4426e1c9cfe0","problem_statement":"FeatureUnion not working when aggregating data and pandas transform output selected\n### Describe the bug\n\nI would like to use `pandas` transform output and use a custom transformer in a feature union which aggregates data. When I'm using this combination I got an error. When I use default `numpy` output it works fine.\n\n### Steps\/Code to Reproduce\n\n```python\r\nimport pandas as pd\r\nfrom sklearn.base import BaseEstimator, TransformerMixin\r\nfrom sklearn import set_config\r\nfrom sklearn.pipeline import make_union\r\n\r\nindex = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\r\ndata = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\r\ndata[\"date\"] = index.date\r\n\r\n\r\nclass MyTransformer(BaseEstimator, TransformerMixin):\r\n    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\r\n        return self\r\n\r\n    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\r\n        return X[\"value\"].groupby(X[\"date\"]).sum()\r\n\r\n\r\n# This works.\r\nset_config(transform_output=\"default\")\r\nprint(make_union(MyTransformer()).fit_transform(data))\r\n\r\n# This does not work.\r\nset_config(transform_output=\"pandas\")\r\nprint(make_union(MyTransformer()).fit_transform(data))\r\n```\n\n### Expected Results\n\nNo error is thrown when using `pandas` transform output.\n\n### Actual Results\n\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[5], line 25\r\n     23 # This does not work.\r\n     24 set_config(transform_output=\"pandas\")\r\n---> 25 print(make_union(MyTransformer()).fit_transform(data))\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/sklearn\/utils\/_set_output.py:150, in _wrap_method_output.<locals>.wrapped(self, X, *args, **kwargs)\r\n    143 if isinstance(data_to_wrap, tuple):\r\n    144     # only wrap the first output for cross decomposition\r\n    145     return (\r\n    146         _wrap_data_with_container(method, data_to_wrap[0], X, self),\r\n    147         *data_to_wrap[1:],\r\n    148     )\r\n--> 150 return _wrap_data_with_container(method, data_to_wrap, X, self)\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/sklearn\/utils\/_set_output.py:130, in _wrap_data_with_container(method, data_to_wrap, original_input, estimator)\r\n    127     return data_to_wrap\r\n    129 # dense_config == \"pandas\"\r\n--> 130 return _wrap_in_pandas_container(\r\n    131     data_to_wrap=data_to_wrap,\r\n    132     index=getattr(original_input, \"index\", None),\r\n    133     columns=estimator.get_feature_names_out,\r\n    134 )\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/sklearn\/utils\/_set_output.py:59, in _wrap_in_pandas_container(data_to_wrap, columns, index)\r\n     57         data_to_wrap.columns = columns\r\n     58     if index is not None:\r\n---> 59         data_to_wrap.index = index\r\n     60     return data_to_wrap\r\n     62 return pd.DataFrame(data_to_wrap, index=index, columns=columns)\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/pandas\/core\/generic.py:5588, in NDFrame.__setattr__(self, name, value)\r\n   5586 try:\r\n   5587     object.__getattribute__(self, name)\r\n-> 5588     return object.__setattr__(self, name, value)\r\n   5589 except AttributeError:\r\n   5590     pass\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/pandas\/_libs\/properties.pyx:70, in pandas._libs.properties.AxisProperty.__set__()\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/pandas\/core\/generic.py:769, in NDFrame._set_axis(self, axis, labels)\r\n    767 def _set_axis(self, axis: int, labels: Index) -> None:\r\n    768     labels = ensure_index(labels)\r\n--> 769     self._mgr.set_axis(axis, labels)\r\n    770     self._clear_item_cache()\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/pandas\/core\/internals\/managers.py:214, in BaseBlockManager.set_axis(self, axis, new_labels)\r\n    212 def set_axis(self, axis: int, new_labels: Index) -> None:\r\n    213     # Caller is responsible for ensuring we have an Index object.\r\n--> 214     self._validate_set_axis(axis, new_labels)\r\n    215     self.axes[axis] = new_labels\r\n\r\nFile ~\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/pandas\/core\/internals\/base.py:69, in DataManager._validate_set_axis(self, axis, new_labels)\r\n     66     pass\r\n     68 elif new_len != old_len:\r\n---> 69     raise ValueError(\r\n     70         f\"Length mismatch: Expected axis has {old_len} elements, new \"\r\n     71         f\"values have {new_len} elements\"\r\n     72     )\r\n\r\nValueError: Length mismatch: Expected axis has 4 elements, new values have 96 elements\r\n```\n\n### Versions\n\n```shell\nSystem:\r\n    python: 3.10.6 (main, Aug 30 2022, 05:11:14) [Clang 13.0.0 (clang-1300.0.29.30)]\r\nexecutable: \/Users\/macbookpro\/.local\/share\/virtualenvs\/3e_VBrf2\/bin\/python\r\n   machine: macOS-11.3-x86_64-i386-64bit\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.1\r\n          pip: 22.3.1\r\n   setuptools: 67.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.10.1\r\n       Cython: None\r\n       pandas: 1.4.4\r\n   matplotlib: 3.7.0\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: \/Users\/macbookpro\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/numpy\/.dylibs\/libopenblas64_.0.dylib\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 4\r\n\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libomp\r\n       filepath: \/Users\/macbookpro\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/sklearn\/.dylibs\/libomp.dylib\r\n        version: None\r\n    num_threads: 8\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: \/Users\/macbookpro\/.local\/share\/virtualenvs\/3e_VBrf2\/lib\/python3.10\/site-packages\/scipy\/.dylibs\/libopenblas.0.dylib\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 4\n```\n\n","graph_file":"scikit-learn#scikit-learn#2c867b8f822eb7a684f0d5c4359e4426e1c9cfe0.graph.json"},"207":{"idx":207,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-10325","base_commit":"7bdc11e87c7d86dcc2a087eccb7a7c129a473415","problem_statement":"inherited-members should support more than one class\n**Is your feature request related to a problem? Please describe.**\r\nI have two situations:\r\n- A class inherits from multiple other classes. I want to document members from some of the base classes but ignore some of the base classes\r\n- A module contains several class definitions that inherit from different classes that should all be ignored (e.g., classes that inherit from list or set or tuple). I want to ignore members from list, set, and tuple while documenting all other inherited members in classes in the module.\r\n\r\n**Describe the solution you'd like**\r\nThe :inherited-members: option to automodule should accept a list of classes. If any of these classes are encountered as base classes when instantiating autoclass documentation, they should be ignored.\r\n\r\n**Describe alternatives you've considered**\r\nThe alternative is to not use automodule, but instead manually enumerate several autoclass blocks for a module. This only addresses the second bullet in the problem description and not the first. It is also tedious for modules containing many class definitions.\r\n\r\n\n","graph_file":"sphinx-doc#sphinx#7bdc11e87c7d86dcc2a087eccb7a7c129a473415.graph.json"},"208":{"idx":208,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-10451","base_commit":"195e911f1dab04b8ddeacbe04b7d214aaf81bb0b","problem_statement":"Fix duplicated *args and **kwargs with autodoc_typehints\nFix duplicated *args and **kwargs with autodoc_typehints\r\n\r\n### Bugfix\r\n- Bugfix\r\n\r\n### Detail\r\nConsider this\r\n```python\r\nclass _ClassWithDocumentedInitAndStarArgs:\r\n    \"\"\"Class docstring.\"\"\"\r\n\r\n    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\r\n        \"\"\"Init docstring.\r\n\r\n        :param x: Some integer\r\n        :param *args: Some integer\r\n        :param **kwargs: Some integer\r\n        \"\"\"\r\n```\r\nwhen using the autodoc extension and the setting `autodoc_typehints = \"description\"`.\r\n\r\nWIth sphinx 4.2.0, the current output is\r\n```\r\nClass docstring.\r\n\r\n   Parameters:\r\n      * **x** (*int*) --\r\n\r\n      * **args** (*int*) --\r\n\r\n      * **kwargs** (*int*) --\r\n\r\n   Return type:\r\n      None\r\n\r\n   __init__(x, *args, **kwargs)\r\n\r\n      Init docstring.\r\n\r\n      Parameters:\r\n         * **x** (*int*) -- Some integer\r\n\r\n         * ***args** --\r\n\r\n           Some integer\r\n\r\n         * ****kwargs** --\r\n\r\n           Some integer\r\n\r\n         * **args** (*int*) --\r\n\r\n         * **kwargs** (*int*) --\r\n\r\n      Return type:\r\n         None\r\n```\r\nwhere the *args and **kwargs are duplicated and incomplete.\r\n\r\nThe expected output is\r\n```\r\n  Class docstring.\r\n\r\n   Parameters:\r\n      * **x** (*int*) --\r\n\r\n      * ***args** (*int*) --\r\n\r\n      * ****kwargs** (*int*) --\r\n\r\n   Return type:\r\n      None\r\n\r\n   __init__(x, *args, **kwargs)\r\n\r\n      Init docstring.\r\n\r\n      Parameters:\r\n         * **x** (*int*) -- Some integer\r\n\r\n         * ***args** (*int*) --\r\n\r\n           Some integer\r\n\r\n         * ****kwargs** (*int*) --\r\n\r\n           Some integer\r\n\r\n      Return type:\r\n         None\r\n\r\n```\n","graph_file":"sphinx-doc#sphinx#195e911f1dab04b8ddeacbe04b7d214aaf81bb0b.graph.json"},"209":{"idx":209,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-11445","base_commit":"71db08c05197545944949d5aa76cd340e7143627","problem_statement":"Using rst_prolog removes top level headings containing a domain directive\n### Describe the bug\r\n\r\nIf `rst_prolog` is set, then any documents that contain a domain directive as the first heading (eg `:mod:`) do not render the heading correctly or include the heading in the toctree.\r\n\r\nIn the example below, if the heading of `docs\/mypackage.rst` were `mypackage2` instead of `:mod:mypackage2` then the heading displays correctly.\r\nSimilarly, if you do not set `rst_prolog` then the heading will display correctly.\r\n\r\nThis appears to have been broken for some time because I can reproduce it in v4.0.0 of Sphinx\r\n\r\n### How to Reproduce\r\n\r\n```bash\r\n$ sphinx-quickstart --no-sep --project mypackage --author me -v 0.1.0 --release 0.1.0 --language en docs\r\n$ echo -e 'Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n' > docs\/index.rst\r\n$ echo -e ':mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n' > docs\/mypackage.rst\r\n$ echo -e 'rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n' >> docs\/conf.py\r\n$ sphinx-build -b html . _build\r\n$ grep 'mypackage2' docs\/_build\/index.html\r\n```\r\n\r\n`docs\/index.rst`:\r\n\r\n```rst\r\nWelcome\r\n=======\r\n\r\n.. toctree::\r\n\r\n   mypackage\r\n```\r\n\r\n`docs\/mypackage.rst`:\r\n\r\n```rst\r\n:mod:`mypackage2`\r\n=================\r\n\r\nContent\r\n\r\nSubheading\r\n----------\r\n```\r\n\r\n### Environment Information\r\n\r\n```text\r\nPlatform:              linux; (Linux-6.3.2-arch1-1-x86_64-with-glibc2.37)\r\nPython version:        3.11.3 (main, Apr  5 2023, 15:52:25) [GCC 12.2.1 20230201])\r\nPython implementation: CPython\r\nSphinx version:        7.1.0+\/d3c91f951\r\nDocutils version:      0.20.1\r\nJinja2 version:        3.1.2\r\nPygments version:      2.15.1\r\n```\r\n\r\n\r\n### Sphinx extensions\r\n\r\n```python\r\n[]\r\n```\r\n\r\n\r\n### Additional context\r\n\r\n_No response_\n","graph_file":"sphinx-doc#sphinx#71db08c05197545944949d5aa76cd340e7143627.graph.json"},"210":{"idx":210,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-7686","base_commit":"752d3285d250bbaf673cff25e83f03f247502021","problem_statement":"autosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates\/autosummary\/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated\/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n","graph_file":"sphinx-doc#sphinx#752d3285d250bbaf673cff25e83f03f247502021.graph.json"},"211":{"idx":211,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-7738","base_commit":"c087d717f6ed183dd422359bf91210dc59689d63","problem_statement":"overescaped trailing underscore on attribute with napoleon\n**Describe the bug**\r\nAttribute name `hello_` shows up as `hello\\_` in the html (visible backslash) with napoleon.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nempty `__init__.py`\r\n`a.py` contains\r\n```python\r\nclass A:\r\n    \"\"\"\r\n    Attributes\r\n    ----------\r\n    hello_: int\r\n        hi\r\n    \"\"\"\r\n    pass\r\n```\r\nrun `sphinx-quickstart`\r\nadd `'sphinx.ext.autodoc', 'sphinx.ext.napoleon'` to extensions in conf.py.\r\nadd `.. autoclass:: a.A` to index.rst\r\nPYTHONPATH=. make clean html\r\nopen _build\/html\/index.html in web browser and see the ugly backslash.\r\n\r\n**Expected behavior**\r\nNo backslash, a similar output to what I get for\r\n```rst\r\n    .. attribute:: hello_\r\n        :type: int\r\n\r\n        hi\r\n```\r\n(the type shows up differently as well, but that's not the point here)\r\nOlder versions like 2.4.3 look ok to me.\r\n\r\n**Environment info**\r\n- OS: Linux debian testing\r\n- Python version: 3.8.3\r\n- Sphinx version: 3.0.4\r\n- Sphinx extensions:  sphinx.ext.autodoc, sphinx.ext.napoleon\r\n- Extra tools:\n","graph_file":"sphinx-doc#sphinx#c087d717f6ed183dd422359bf91210dc59689d63.graph.json"},"212":{"idx":212,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-7975","base_commit":"4ec6cbe341fd84468c448e20082c778043bbea4b","problem_statement":"Two sections called Symbols in index\nWhen using index entries with the following leading characters: _@_, _\u00a3_, and _\u2190_ I get two sections called _Symbols_ in the HTML output, the first containing all _@_ entries before \u201dnormal\u201d words and the second containing _\u00a3_ and _\u2190_ entries after the \u201dnormal\u201d words.  Both have the same anchor in HTML so the links at the top of the index page contain two _Symbols_ links, one before the letters and one after, but both lead to the first section.\n\n","graph_file":"sphinx-doc#sphinx#4ec6cbe341fd84468c448e20082c778043bbea4b.graph.json"},"213":{"idx":213,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8273","base_commit":"88b81a06eb635a1596617f8971fa97a84c069e93","problem_statement":"Generate man page section directories\n**Current man page generation does not conform to `MANPATH` search functionality**\r\nCurrently, all generated man pages are placed in to a single-level directory: `<build-dir>\/man`. Unfortunately, this cannot be used in combination with the unix `MANPATH` environment variable. The `man` program explicitly looks for man pages in section directories (such as `man\/man1`, etc.). \r\n\r\n**Describe the solution you'd like**\r\nIt would be great if sphinx would automatically create the section directories (e.g., `man\/man1\/`, `man\/man3\/`, etc.) and place each generated man page within appropriate section.\r\n\r\n**Describe alternatives you've considered**\r\nThis problem can be over come within our project\u2019s build system, ensuring the built man pages are installed in a correct location, but it would be nice if the build directory had the proper layout.\r\n\r\nI\u2019m happy to take a crack at implementing a fix, though this change in behavior may break some people who expect everything to appear in a `man\/` directory. \r\n\n","graph_file":"sphinx-doc#sphinx#88b81a06eb635a1596617f8971fa97a84c069e93.graph.json"},"214":{"idx":214,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8282","base_commit":"2c2335bbb8af99fa132e1573bbf45dc91584d5a2","problem_statement":"autodoc_typehints does not effect to overloaded callables\n**Describe the bug**\r\nautodoc_typehints does not effect to overloaded callables.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# in conf.py\r\nautodoc_typehints = 'none'\r\n```\r\n```\r\n# in index.rst\r\n.. automodule:: example\r\n   :members:\r\n   :undoc-members:\r\n```\r\n```\r\n# in example.py\r\nfrom typing import overload\r\n\r\n\r\n@overload\r\ndef foo(x: int) -> int:\r\n    ...\r\n\r\n\r\n@overload\r\ndef foo(x: float) -> float:\r\n    ...\r\n\r\n\r\ndef foo(x):\r\n    return x\r\n```\r\n\r\n**Expected behavior**\r\nAll typehints for overloaded callables are obeyed `autodoc_typehints` setting.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\n","graph_file":"sphinx-doc#sphinx#2c2335bbb8af99fa132e1573bbf45dc91584d5a2.graph.json"},"215":{"idx":215,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8435","base_commit":"5d8d6275a54f2c5fb72b82383b5712c22d337634","problem_statement":"autodoc_type_aliases does not effect to variables and attributes\n**Describe the bug**\r\nautodoc_type_aliases does not effect to variables and attributes\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# example.py\r\nfrom __future__ import annotations\r\n\r\n\r\n#: blah blah blah\r\nvar: String\r\n\r\n\r\nclass MyString:\r\n    \"mystring\"\r\n\r\n    #: blah blah blah\r\n    var: String\r\n```\r\n```\r\n# index.rst\r\n.. automodule:: example\r\n   :members:\r\n   :undoc-members:\r\n```\r\n```\r\n# conf.py\r\nautodoc_type_aliases = {\r\n    'String': 'example.MyString'\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n`autodoc_type_aliases` should be applied to `example.var` and `example.MyString.var`.\r\n\r\n**Your project**\r\nN\/A\r\n\r\n**Screenshots**\r\nN\/A\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.0\r\n- Sphinx version: HEAD of 3.x branch\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: Nothing\r\n\r\n**Additional context**\r\nN\/A\n","graph_file":"sphinx-doc#sphinx#5d8d6275a54f2c5fb72b82383b5712c22d337634.graph.json"},"216":{"idx":216,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8474","base_commit":"3ea1ec84cc610f7a9f4f6b354e264565254923ff","problem_statement":"v3.3 upgrade started generating \"WARNING: no number is assigned for table\" warnings\nWe've updated to Sphinx 3.3 in our documentation, and suddenly the following warning started popping up in our builds when we build either `singlehtml` or `latex`.:\r\n\r\n`WARNING: no number is assigned for table:`\r\n\r\nI looked through the changelog but it didn't seem like there was anything related to `numref` that was changed, but perhaps I missed something? Could anyone point me to a change in the numref logic so I can figure out where these warnings are coming from?\n","graph_file":"sphinx-doc#sphinx#3ea1ec84cc610f7a9f4f6b354e264565254923ff.graph.json"},"217":{"idx":217,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8506","base_commit":"e4bd3bd3ddd42c6642ff779a4f7381f219655c2c","problem_statement":"Sphinx 3.2 complains about option:: syntax that earlier versions accepted\nSphinx 3.2 complains about use of the option:: directive that earlier versions accepted without complaint.\r\n\r\nThe QEMU documentation includes this:\r\n```\r\n.. option:: [enable=]PATTERN\r\n\r\n   Immediately enable events matching *PATTERN*\r\n```\r\n\r\nas part of the documentation of the command line options of one of its programs. Earlier versions of Sphinx were fine with this, but Sphinx 3.2 complains:\r\n\r\n```\r\nWarning, treated as error:\r\n..\/..\/docs\/qemu-option-trace.rst.inc:4:Malformed option description '[enable=]PATTERN', should look like \"opt\", \"-opt args\", \"--opt args\", \"\/opt args\" or \"+opt args\"\r\n```\r\n\r\nSphinx ideally shouldn't change in ways that break the building of documentation that worked in older versions, because this makes it unworkably difficult to have documentation that builds with whatever the Linux distro's sphinx-build is.\r\n\r\nThe error message suggests that Sphinx has a very restrictive idea of what option syntax is; it would be better if it just accepted any string, because not all programs and OSes have option syntax that matches the limited list the error message indicates.\r\n\n","graph_file":"sphinx-doc#sphinx#e4bd3bd3ddd42c6642ff779a4f7381f219655c2c.graph.json"},"218":{"idx":218,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8595","base_commit":"b19bce971e82f2497d67fdacdeca8db08ae0ba56","problem_statement":"autodoc: empty __all__ attribute is ignored\n**Describe the bug**\r\nautodoc: empty `__all__` attribute is ignored\r\n\r\n**To Reproduce**\r\n```\r\n# example.py\r\n__all__ = []\r\n\r\n\r\ndef foo():\r\n    \"docstring\"\r\n\r\n\r\ndef bar():\r\n    \"docstring\"\r\n\r\n\r\ndef baz():\r\n    \"docstring\"\r\n```\r\n```\r\n# index.rst\r\n.. automodule:: example\r\n   :members:\r\n```\r\n\r\nAll foo, bar, and baz are shown.\r\n\r\n**Expected behavior**\r\nNo entries should be shown because `__all__` is empty.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.1\r\n- Sphinx version: HEAD of 3.x\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\n","graph_file":"sphinx-doc#sphinx#b19bce971e82f2497d67fdacdeca8db08ae0ba56.graph.json"},"219":{"idx":219,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8627","base_commit":"332d80ba8433aea41c3709fa52737ede4405072b","problem_statement":"autodoc isn't able to resolve struct.Struct type annotations\n**Describe the bug**\r\nIf `struct.Struct` is declared in any type annotations, I get `class reference target not found: Struct`\r\n\r\n**To Reproduce**\r\nSimple `index.rst`\r\n```\r\nHello World\r\n===========\r\n\r\ncode docs\r\n=========\r\n\r\n.. automodule:: helloworld.helloworld\r\n```\r\n\r\nSimple `helloworld.py`\r\n```\r\nimport struct\r\nimport pathlib\r\n\r\ndef consume_struct(_: struct.Struct) -> None:\r\n    pass\r\n\r\ndef make_struct() -> struct.Struct:\r\n    mystruct = struct.Struct('HH')\r\n    return mystruct\r\n\r\ndef make_path() -> pathlib.Path:\r\n    return pathlib.Path()\r\n```\r\n\r\nCommand line:\r\n```\r\npython3 -m sphinx -b html docs\/ doc-out -nvWT\r\n```\r\n\r\n**Expected behavior**\r\nIf you comment out the 2 functions that have `Struct` type annotations, you'll see that `pathlib.Path` resolves fine and shows up in the resulting documentation. I'd expect that `Struct` would also resolve correctly.\r\n\r\n**Your project**\r\nn\/a\r\n\r\n**Screenshots**\r\nn\/a\r\n\r\n**Environment info**\r\n- OS: Ubuntu 18.04, 20.04\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.2.1\r\n- Sphinx extensions:  'sphinx.ext.autodoc',\r\n              'sphinx.ext.autosectionlabel',\r\n              'sphinx.ext.intersphinx',\r\n              'sphinx.ext.doctest',\r\n              'sphinx.ext.todo'\r\n- Extra tools: \r\n\r\n**Additional context**\r\n\r\n\r\n- [e.g. URL or Ticket]\r\n\r\n\n","graph_file":"sphinx-doc#sphinx#332d80ba8433aea41c3709fa52737ede4405072b.graph.json"},"220":{"idx":220,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8713","base_commit":"3ed7590ed411bd93b26098faab4f23619cdb2267","problem_statement":"napoleon_use_param should also affect \"other parameters\" section\nSubject: napoleon_use_param should also affect \"other parameters\" section\r\n\r\n### Problem\r\nCurrently, napoleon always renders the Other parameters section as if napoleon_use_param was False, see source\r\n```\r\n    def _parse_other_parameters_section(self, section):\r\n        # type: (unicode) -> List[unicode]\r\n        return self._format_fields(_('Other Parameters'), self._consume_fields())\r\n\r\n    def _parse_parameters_section(self, section):\r\n        # type: (unicode) -> List[unicode]\r\n        fields = self._consume_fields()\r\n        if self._config.napoleon_use_param:\r\n            return self._format_docutils_params(fields)\r\n        else:\r\n            return self._format_fields(_('Parameters'), fields)\r\n```\r\nwhereas it would make sense that this section should follow the same formatting rules as the Parameters section.\r\n\r\n#### Procedure to reproduce the problem\r\n```\r\nIn [5]: print(str(sphinx.ext.napoleon.NumpyDocstring(\"\"\"\\ \r\n   ...: Parameters \r\n   ...: ---------- \r\n   ...: x : int \r\n   ...:  \r\n   ...: Other parameters \r\n   ...: ---------------- \r\n   ...: y: float \r\n   ...: \"\"\")))                                                                                                                                                                                      \r\n:param x:\r\n:type x: int\r\n\r\n:Other Parameters: **y** (*float*)\r\n```\r\n\r\nNote the difference in rendering.\r\n\r\n#### Error logs \/ results\r\nSee above.\r\n\r\n#### Expected results\r\n```\r\n:param x:\r\n:type x: int\r\n\r\n:Other Parameters:  \/\/ Or some other kind of heading.\r\n:param: y\r\n:type y: float\r\n```\r\n\r\nAlternatively another separate config value could be introduced, but that seems a bit overkill.\r\n\r\n### Reproducible project \/ your project\r\nN\/A\r\n\r\n### Environment info\r\n- OS: Linux\r\n- Python version: 3.7\r\n- Sphinx version: 1.8.1\r\n\n","graph_file":"sphinx-doc#sphinx#3ed7590ed411bd93b26098faab4f23619cdb2267.graph.json"},"221":{"idx":221,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8721","base_commit":"82ef497a8c88f0f6e50d84520e7276bfbf65025d","problem_statement":"viewcode creates pages for epub even if `viewcode_enable_epub=False` on `make html epub`\n**Describe the bug**\r\nviewcode creates pages for epub even if `viewcode_enable_epub=False` on `make html epub`\r\n\r\n**To Reproduce**\r\n```\r\n$ make html epub\r\n```\r\n\r\n**Expected behavior**\r\nmodule pages should not be created for epub by default.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.1\r\n- Sphinx version: HEAD of 3.x\r\n- Sphinx extensions:  sphinx.ext.viewcode\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n","graph_file":"sphinx-doc#sphinx#82ef497a8c88f0f6e50d84520e7276bfbf65025d.graph.json"},"222":{"idx":222,"repo":"sphinx-doc\/sphinx","instance_id":"sphinx-doc__sphinx-8801","base_commit":"7ca279e33aebb60168d35e6be4ed059f4a68f2c1","problem_statement":"autodoc: The annotation only member in superclass is treated as \"undocumented\"\n**Describe the bug**\r\nautodoc: The annotation only member in superclass is treated as \"undocumented\".\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# example.py\r\nclass Foo:\r\n    \"\"\"docstring\"\"\"\r\n    attr1: int  #: docstring\r\n\r\n\r\nclass Bar(Foo):\r\n    \"\"\"docstring\"\"\"\r\n    attr2: str  #: docstring\r\n```\r\n```\r\n# index.rst\r\n.. autoclass:: example.Bar\r\n   :members:\r\n   :inherited-members:\r\n```\r\n\r\n`Bar.attr1` is not documented. It will be shown if I give `:undoc-members:` option to the autoclass directive call. It seems the attribute is treated as undocumented.\r\n\r\n**Expected behavior**\r\nIt should be shown.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.1\r\n- Sphinx version: HEAD of 3.x\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n","graph_file":"sphinx-doc#sphinx#7ca279e33aebb60168d35e6be4ed059f4a68f2c1.graph.json"},"223":{"idx":223,"repo":"sympy\/sympy","instance_id":"sympy__sympy-11400","base_commit":"8dcb12a6cf500e8738d6729ab954a261758f49ca","problem_statement":"ccode(sinc(x)) doesn't work\n```\nIn [30]: ccode(sinc(x))\nOut[30]: '\/\/ Not supported in C:\\n\/\/ sinc\\nsinc(x)'\n```\n\nI don't think `math.h` has `sinc`, but it could print\n\n```\nIn [38]: ccode(Piecewise((sin(theta)\/theta, Ne(theta, 0)), (1, True)))\nOut[38]: '((Ne(theta, 0)) ? (\\n   sin(theta)\/theta\\n)\\n: (\\n   1\\n))'\n```\n\n","graph_file":"sympy#sympy#8dcb12a6cf500e8738d6729ab954a261758f49ca.graph.json"},"224":{"idx":224,"repo":"sympy\/sympy","instance_id":"sympy__sympy-11870","base_commit":"5c2e1f96a7ff562d4a778f4ca9ffc9c81557197e","problem_statement":"simplifying exponential -> trig identities\n```\r\nf = 1 \/ 2 * (-I*exp(I*k) + I*exp(-I*k))\r\ntrigsimp(f)\r\n```\r\n\r\nIdeally, this would yield `sin(k)`. Is there a way to do this?\r\n\r\nAs a corollary, it would be awesome if \r\n\r\n```\r\nf = 1 \/ 2 \/ k* (-I*exp(I*k) + I*exp(-I*k))\r\ntrigsimp(f)\r\n```\r\n\r\ncould yield `sinc(k)`. Thank you for your consideration!\n","graph_file":"sympy#sympy#5c2e1f96a7ff562d4a778f4ca9ffc9c81557197e.graph.json"},"225":{"idx":225,"repo":"sympy\/sympy","instance_id":"sympy__sympy-11897","base_commit":"e2918c1205c47345eb73c9be68b14c0f15fdeb17","problem_statement":"LaTeX printer inconsistent with pretty printer\nThe LaTeX printer should always give the same output as the pretty printer, unless better output is possible from LaTeX. In some cases it is inconsistent. For instance:\n\n``` py\nIn [9]: var('x', positive=True)\nOut[9]: x\n\nIn [10]: latex(exp(-x)*log(x))\nOut[10]: '\\\\frac{1}{e^{x}} \\\\log{\\\\left (x \\\\right )}'\n\nIn [11]: pprint(exp(-x)*log(x))\n -x\n\u212f  \u22c5log(x)\n```\n\n(I also don't think the assumptions should affect printing). \n\n``` py\nIn [14]: var('x y')\nOut[14]: (x, y)\n\nIn [15]: latex(1\/(x + y)\/2)\nOut[15]: '\\\\frac{1}{2 x + 2 y}'\n\nIn [16]: pprint(1\/(x + y)\/2)\n    1\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2\u22c5(x + y)\n```\n\n","graph_file":"sympy#sympy#e2918c1205c47345eb73c9be68b14c0f15fdeb17.graph.json"},"226":{"idx":226,"repo":"sympy\/sympy","instance_id":"sympy__sympy-12171","base_commit":"ca6ef27272be31c9dc3753ede9232c39df9a75d8","problem_statement":"matematica code printer does not handle floats and derivatives correctly\nIn its current state the mathematica code printer does not handle Derivative(func(vars), deriver) \r\ne.g. Derivative(f(t), t) yields Derivative(f(t), t) instead of D[f[t],t]\r\n\r\nAlso floats with exponents are not handled correctly e.g. 1.0e-4 is not converted to 1.0*^-4\r\n\r\nThis has an easy fix by adding the following lines to MCodePrinter:\r\n\r\n\r\ndef _print_Derivative(self, expr):\r\n        return \"D[%s]\" % (self.stringify(expr.args, \", \"))\r\n\r\ndef _print_Float(self, expr):\r\n        res =str(expr)\r\n        return res.replace('e','*^') \r\n\r\n\r\n\n","graph_file":"sympy#sympy#ca6ef27272be31c9dc3753ede9232c39df9a75d8.graph.json"},"227":{"idx":227,"repo":"sympy\/sympy","instance_id":"sympy__sympy-12236","base_commit":"d60497958f6dea7f5e25bc41e9107a6a63694d01","problem_statement":"Wrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) \/ (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))\/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1\/2 - 1\/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1\/2 - 1\/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\nWrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) \/ (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))\/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1\/2 - 1\/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1\/2 - 1\/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\n","graph_file":"sympy#sympy#d60497958f6dea7f5e25bc41e9107a6a63694d01.graph.json"},"228":{"idx":228,"repo":"sympy\/sympy","instance_id":"sympy__sympy-12419","base_commit":"479939f8c65c8c2908bbedc959549a257a7c0b0b","problem_statement":"Sum of the elements of an identity matrix is zero\nI think this is a bug.\r\n\r\nI created a matrix by M.T * M under an assumption that M is orthogonal.  SymPy successfully recognized that the result is an identity matrix.  I tested its identity-ness by element-wise, queries, and sum of the diagonal elements and received expected results.\r\n\r\nHowever, when I attempt to evaluate the total sum of the elements the result was 0 while 'n' is expected.\r\n\r\n```\r\nfrom sympy import *\r\nfrom sympy import Q as Query\r\n\r\nn = Symbol('n', integer=True, positive=True)\r\ni, j = symbols('i j', integer=True)\r\nM = MatrixSymbol('M', n, n)\r\n\r\ne = None\r\nwith assuming(Query.orthogonal(M)):\r\n    e = refine((M.T * M).doit())\r\n\r\n# Correct: M.T * M is an identity matrix.\r\nprint(e, e[0, 0], e[0, 1], e[1, 0], e[1, 1])\r\n\r\n# Correct: The output is True True\r\nprint(ask(Query.diagonal(e)), ask(Query.integer_elements(e)))\r\n\r\n# Correct: The sum of the diagonal elements is n\r\nprint(Sum(e[i, i], (i, 0, n-1)).doit())\r\n\r\n# So far so good\r\n# Total sum of the elements is expected to be 'n' but the answer is 0!\r\nprint(Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit())\r\n```\n","graph_file":"sympy#sympy#479939f8c65c8c2908bbedc959549a257a7c0b0b.graph.json"},"229":{"idx":229,"repo":"sympy\/sympy","instance_id":"sympy__sympy-12454","base_commit":"d3fcdb72bfcbb560eb45264ac1c03f359436edef","problem_statement":"is_upper() raises IndexError for tall matrices\nThe function Matrix.is_upper raises an IndexError for a 4x2 matrix of zeros.\r\n```\r\n>>> sympy.zeros(4,2).is_upper\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sympy\/matrices\/matrices.py\", line 1112, in is_upper\r\n    for i in range(1, self.rows)\r\n  File \"sympy\/matrices\/matrices.py\", line 1113, in <genexpr>\r\n    for j in range(i))\r\n  File \"sympy\/matrices\/dense.py\", line 119, in __getitem__\r\n    return self.extract(i, j)\r\n  File \"sympy\/matrices\/matrices.py\", line 352, in extract\r\n    colsList = [a2idx(k, self.cols) for k in colsList]\r\n  File \"sympy\/matrices\/matrices.py\", line 5261, in a2idx\r\n    raise IndexError(\"Index out of range: a[%s]\" % (j,))\r\nIndexError: Index out of range: a[2]\r\n```\r\nThe code for is_upper() is\r\n```\r\n        return all(self[i, j].is_zero\r\n                   for i in range(1, self.rows)\r\n                   for j in range(i))\r\n```\r\nFor a 4x2 matrix, is_upper iterates over the indices:\r\n```\r\n>>> A = sympy.zeros(4, 2)\r\n>>> print tuple([i, j] for i in range(1, A.rows) for j in range(i))\r\n([1, 0], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2])\r\n```\r\nThe attempt to index the (3,2) entry appears to be the source of the error. \n","graph_file":"sympy#sympy#d3fcdb72bfcbb560eb45264ac1c03f359436edef.graph.json"},"230":{"idx":230,"repo":"sympy\/sympy","instance_id":"sympy__sympy-12481","base_commit":"c807dfe7569692cad24f02a08477b70c1679a4dd","problem_statement":"`Permutation` constructor fails with non-disjoint cycles\nCalling `Permutation([[0,1],[0,1]])` raises a `ValueError` instead of constructing the identity permutation.  If the cycles passed in are non-disjoint, they should be applied in left-to-right order and the resulting permutation should be returned.\r\n\r\nThis should be easy to compute.  I don't see a reason why non-disjoint cycles should be forbidden.\n","graph_file":"sympy#sympy#c807dfe7569692cad24f02a08477b70c1679a4dd.graph.json"},"231":{"idx":231,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13031","base_commit":"2dfa7457f20ee187fbb09b5b6a1631da4458388c","problem_statement":"Behavior of Matrix hstack and vstack changed in sympy 1.1\nIn sympy 1.0:\r\n```\r\nimport sympy as sy\r\nM1 = sy.Matrix.zeros(0, 0)\r\nM2 = sy.Matrix.zeros(0, 1)\r\nM3 = sy.Matrix.zeros(0, 2)\r\nM4 = sy.Matrix.zeros(0, 3)\r\nsy.Matrix.hstack(M1, M2, M3, M4).shape\r\n```\r\nreturns \r\n`(0, 6)`\r\n\r\nNow, same in sympy 1.1:\r\n```\r\nimport sympy as sy\r\nM1 = sy.Matrix.zeros(0, 0)\r\nM2 = sy.Matrix.zeros(0, 1)\r\nM3 = sy.Matrix.zeros(0, 2)\r\nM4 = sy.Matrix.zeros(0, 3)\r\nsy.Matrix.hstack(M1, M2, M3, M4).shape\r\n```\r\nreturns\r\n`(0, 3)\r\n`\r\nwhereas:\r\n```\r\nimport sympy as sy\r\nM1 = sy.Matrix.zeros(1, 0)\r\nM2 = sy.Matrix.zeros(1, 1)\r\nM3 = sy.Matrix.zeros(1, 2)\r\nM4 = sy.Matrix.zeros(1, 3)\r\nsy.Matrix.hstack(M1, M2, M3, M4).shape\r\n```\r\nreturns\r\n`(1, 6)\r\n`\n","graph_file":"sympy#sympy#2dfa7457f20ee187fbb09b5b6a1631da4458388c.graph.json"},"232":{"idx":232,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13043","base_commit":"a3389a25ec84d36f5cf04a4f2562d820f131db64","problem_statement":"decompose() function in intpoly returns a list of arbitrary order\nThe decompose() function, with separate=True, returns `list(poly_dict.values())`, which is ordered arbitrarily.  \r\n\r\nWhat is this used for? It should be sorted somehow, or returning a set (in which case, why not just use the returned dictionary and have the caller take the values). This is causing test failures for me after some changes to the core. \r\n\r\nCC @ArifAhmed1995 @certik \n","graph_file":"sympy#sympy#a3389a25ec84d36f5cf04a4f2562d820f131db64.graph.json"},"233":{"idx":233,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13146","base_commit":"b678d8103e48fdb1af335dbf0080b3d5366f2d17","problem_statement":"Exponent doesn't fully simplify\nSay I have code like this:\n\n```\nimport sympy\nfrom sympy import *\nx=Symbol('x')\nexpr1 = S(1)\/2*x**2.5\nexpr2 = S(1)*x**(S(5)\/2)\/2\nres = expr1-expr2\nres= simplify(res.evalf(5))\nprint res\n```\n\nThe output is\n`-0.5*x**2.5 + 0.5*x**2.5`\nHow do I simplify it to 0?\n\n","graph_file":"sympy#sympy#b678d8103e48fdb1af335dbf0080b3d5366f2d17.graph.json"},"234":{"idx":234,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13177","base_commit":"662cfb818e865f580e18b59efbb3540c34232beb","problem_statement":"Mod(x**2, x) is not (always) 0\nWhen the base is not an integer, `x**2 % x` is not 0. The base is not tested to be an integer in Mod's eval logic:\r\n\r\n```\r\nif (p == q or p == -q or\r\n        p.is_Pow and p.exp.is_Integer and p.base == q or\r\n        p.is_integer and q == 1):\r\n    return S.Zero\r\n```\r\n\r\nso\r\n\r\n```\r\n>>> Mod(x**2, x)\r\n0\r\n```\r\nbut\r\n```\r\n>>> x = S(1.5)\r\n>>> Mod(x**2, x)\r\n0.75\r\n```\n","graph_file":"sympy#sympy#662cfb818e865f580e18b59efbb3540c34232beb.graph.json"},"235":{"idx":235,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13437","base_commit":"674afc619d7f5c519b6a5393a8b0532a131e57e0","problem_statement":"bell(n).limit(n, oo) should be oo rather than bell(oo)\n`bell(n).limit(n,oo)` should take the value infinity, but the current output is `bell(oo)`. As the Bell numbers represent the number of partitions of a set, it seems natural that `bell(oo)` should be able to be evaluated rather than be returned unevaluated. This issue is also in line with the recent fixes to the corresponding limit for the Fibonacci numbers and Lucas numbers.\n\n```\nfrom sympy import *\nn = symbols('n')\nbell(n).limit(n,oo)\n\nOutput:\nbell(oo)\n```\n\nI'm new to Sympy, so I'd appreciate the opportunity to fix this bug myself if that's alright.\n\n","graph_file":"sympy#sympy#674afc619d7f5c519b6a5393a8b0532a131e57e0.graph.json"},"236":{"idx":236,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13471","base_commit":"3546ac7ed78e1780c1a76929864bb33330055740","problem_statement":"Python 2->3 pickle fails with float-containing expressions\nDumping a pickled sympy expression containing a float in Python 2, then loading it in Python 3 generates an error.\r\n\r\nHere is a minimum working example, verified with sympy git commit 3546ac7 (master at time of writing), Python 2.7 and Python 3.6:\r\n\r\n```python\r\npython2 -c 'import pickle; import sympy; x = sympy.symbols(\"x\"); print pickle.dumps(x + 1.0, 2)' | python3 -c 'import pickle; import sys; print(pickle.loads(sys.stdin.buffer.read()))'\r\n```\r\n\r\nand the result:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"\/Users\/alex\/git\/VU\/sympy\/sympy\/core\/numbers.py\", line 1045, in __new__\r\n    num[1] = long(num[1], 16)\r\nValueError: invalid literal for int() with base 16: '1L'\r\n```\n","graph_file":"sympy#sympy#3546ac7ed78e1780c1a76929864bb33330055740.graph.json"},"237":{"idx":237,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13480","base_commit":"f57fe3f4b3f2cab225749e1b3b38ae1bf80b62f0","problem_statement":".subs on coth(log(tan(x))) errors for certain integral values\n    >>> from sympy import *\r\n    >>> x = Symbol('x')\r\n    >>> e = coth(log(tan(x)))\r\n    >>> print(e.subs(x, 2))\r\n    ...\r\n    File \"C:\\Users\\E\\Desktop\\sympy-master\\sympy\\functions\\elementary\\hyperbolic.py\", line 590, in eval\r\n        if cotm is S.ComplexInfinity:\r\n    NameError: name 'cotm' is not defined\r\n\r\nFails for 2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18, ... etc.\n","graph_file":"sympy#sympy#f57fe3f4b3f2cab225749e1b3b38ae1bf80b62f0.graph.json"},"238":{"idx":238,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13647","base_commit":"67e3c956083d0128a621f65ee86a7dacd4f9f19f","problem_statement":"Matrix.col_insert() no longer seems to work correctly.\nExample:\r\n\r\n```\r\nIn [28]: import sympy as sm\r\n\r\nIn [29]: M = sm.eye(6)\r\n\r\nIn [30]: M\r\nOut[30]: \r\n\u23a11  0  0  0  0  0\u23a4\r\n\u23a2                \u23a5\r\n\u23a20  1  0  0  0  0\u23a5\r\n\u23a2                \u23a5\r\n\u23a20  0  1  0  0  0\u23a5\r\n\u23a2                \u23a5\r\n\u23a20  0  0  1  0  0\u23a5\r\n\u23a2                \u23a5\r\n\u23a20  0  0  0  1  0\u23a5\r\n\u23a2                \u23a5\r\n\u23a30  0  0  0  0  1\u23a6\r\n\r\nIn [31]: V = 2 * sm.ones(6, 2)\r\n\r\nIn [32]: V\r\nOut[32]: \r\n\u23a12  2\u23a4\r\n\u23a2    \u23a5\r\n\u23a22  2\u23a5\r\n\u23a2    \u23a5\r\n\u23a22  2\u23a5\r\n\u23a2    \u23a5\r\n\u23a22  2\u23a5\r\n\u23a2    \u23a5\r\n\u23a22  2\u23a5\r\n\u23a2    \u23a5\r\n\u23a32  2\u23a6\r\n\r\nIn [33]: M.col_insert(3, V)\r\nOut[33]: \r\n\u23a11  0  0  2  2  1  0  0\u23a4\r\n\u23a2                      \u23a5\r\n\u23a20  1  0  2  2  0  1  0\u23a5\r\n\u23a2                      \u23a5\r\n\u23a20  0  1  2  2  0  0  1\u23a5\r\n\u23a2                      \u23a5\r\n\u23a20  0  0  2  2  0  0  0\u23a5\r\n\u23a2                      \u23a5\r\n\u23a20  0  0  2  2  0  0  0\u23a5\r\n\u23a2                      \u23a5\r\n\u23a30  0  0  2  2  0  0  0\u23a6\r\nIn [34]: sm.__version__\r\nOut[34]: '1.1.1'\r\n```\r\n\r\nThe 3 x 3 identify matrix to the right of the columns of twos is shifted from the bottom three rows to the top three rows.\r\n\r\n@siefkenj Do you think this has to do with your matrix refactor?\n","graph_file":"sympy#sympy#67e3c956083d0128a621f65ee86a7dacd4f9f19f.graph.json"},"239":{"idx":239,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13773","base_commit":"7121bdf1facdd90d05b6994b4c2e5b2865a4638a","problem_statement":"@ (__matmul__) should fail if one argument is not a matrix\n```\r\n>>> A = Matrix([[1, 2], [3, 4]])\r\n>>> B = Matrix([[2, 3], [1, 2]])\r\n>>> A@B\r\nMatrix([\r\n[ 4,  7],\r\n[10, 17]])\r\n>>> 2@B\r\nMatrix([\r\n[4, 6],\r\n[2, 4]])\r\n```\r\n\r\nRight now `@` (`__matmul__`) just copies `__mul__`, but it should actually only work if the multiplication is actually a matrix multiplication. \r\n\r\nThis is also how NumPy works\r\n\r\n```\r\n>>> import numpy as np\r\n>>> a = np.array([[1, 2], [3, 4]])\r\n>>> 2*a\r\narray([[2, 4],\r\n       [6, 8]])\r\n>>> 2@a\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: Scalar operands are not allowed, use '*' instead\r\n```\n","graph_file":"sympy#sympy#7121bdf1facdd90d05b6994b4c2e5b2865a4638a.graph.json"},"240":{"idx":240,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13895","base_commit":"4da0b64558e9551a11a99bccc63557ba34f50c58","problem_statement":"(-x\/4 - S(1)\/12)**x - 1 simplifies to an inequivalent expression\n    >>> from sympy import *\r\n    >>> x = Symbol('x')\r\n    >>> e = (-x\/4 - S(1)\/12)**x - 1\r\n    >>> e\r\n    (-x\/4 - 1\/12)**x - 1\r\n    >>> f = simplify(e)\r\n    >>> f\r\n    12**(-x)*(-12**x + (-3*x - 1)**x)\r\n    >>> a = S(9)\/5\r\n    >>> simplify(e.subs(x,a))\r\n    -1 - 32*15**(1\/5)*2**(2\/5)\/225\r\n    >>> simplify(f.subs(x,a))\r\n    -1 - 32*(-1)**(4\/5)*60**(1\/5)\/225\r\n    >>> N(e.subs(x,a))\r\n    -1.32255049319339\r\n    >>> N(f.subs(x,a))\r\n    -0.739051169462523 - 0.189590423018741*I\r\n\r\n\n","graph_file":"sympy#sympy#4da0b64558e9551a11a99bccc63557ba34f50c58.graph.json"},"241":{"idx":241,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13915","base_commit":"5c1644ff85e15752f9f8721bc142bfbf975e7805","problem_statement":"Issue with a substitution that leads to an undefined expression\n```\r\nPython 3.6.4 |Anaconda custom (64-bit)| (default, Dec 21 2017, 15:39:08) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from sympy import *\r\n\r\nIn [2]: a,b = symbols('a,b')\r\n\r\nIn [3]: r = (1\/(a+b) + 1\/(a-b))\/(1\/(a+b) - 1\/(a-b))\r\n\r\nIn [4]: r.subs(b,a)\r\nOut[4]: 1\r\n\r\nIn [6]: import sympy\r\n\r\nIn [7]: sympy.__version__\r\nOut[7]: '1.1.1'\r\n```\r\n\r\nIf b is substituted by a, r is undefined. It is possible to calculate the limit\r\n`r.limit(b,a) # -1`\r\n\r\nBut whenever a subexpression of r is undefined, r itself is undefined.\n","graph_file":"sympy#sympy#5c1644ff85e15752f9f8721bc142bfbf975e7805.graph.json"},"242":{"idx":242,"repo":"sympy\/sympy","instance_id":"sympy__sympy-13971","base_commit":"84c125972ad535b2dfb245f8d311d347b45e5b8a","problem_statement":"Display of SeqFormula()\n```\r\nimport sympy as sp\r\nk, m, n = sp.symbols('k m n', integer=True)\r\nsp.init_printing()\r\n\r\nsp.SeqFormula(n**2, (n,0,sp.oo))\r\n```\r\n\r\nThe Jupyter rendering of this command backslash-escapes the brackets producing:\r\n\r\n`\\left\\[0, 1, 4, 9, \\ldots\\right\\]`\r\n\r\nCopying this output to a markdown cell this does not render properly.  Whereas:\r\n\r\n`[0, 1, 4, 9, \\ldots ]`\r\n\r\ndoes render just fine.  \r\n\r\nSo - sequence output should not backslash-escape square brackets, or, `\\]` should instead render?\n","graph_file":"sympy#sympy#84c125972ad535b2dfb245f8d311d347b45e5b8a.graph.json"},"243":{"idx":243,"repo":"sympy\/sympy","instance_id":"sympy__sympy-14024","base_commit":"b17abcb09cbcee80a90f6750e0f9b53f0247656c","problem_statement":"Inconsistency when simplifying (-a)**x * a**(-x), a a positive integer\nCompare:\r\n\r\n```\r\n>>> a = Symbol('a', integer=True, positive=True)\r\n>>> e = (-a)**x * a**(-x)\r\n>>> f = simplify(e)\r\n>>> print(e)\r\na**(-x)*(-a)**x\r\n>>> print(f)\r\n(-1)**x\r\n>>> t = -S(10)\/3\r\n>>> n1 = e.subs(x,t)\r\n>>> n2 = f.subs(x,t)\r\n>>> print(N(n1))\r\n-0.5 + 0.866025403784439*I\r\n>>> print(N(n2))\r\n-0.5 + 0.866025403784439*I\r\n```\r\n\r\nvs\r\n\r\n```\r\n>>> a = S(2)\r\n>>> e = (-a)**x * a**(-x)\r\n>>> f = simplify(e)\r\n>>> print(e)\r\n(-2)**x*2**(-x)\r\n>>> print(f)\r\n(-1)**x\r\n>>> t = -S(10)\/3\r\n>>> n1 = e.subs(x,t)\r\n>>> n2 = f.subs(x,t)\r\n>>> print(N(n1))\r\n0.5 - 0.866025403784439*I\r\n>>> print(N(n2))\r\n-0.5 + 0.866025403784439*I\r\n```\n","graph_file":"sympy#sympy#b17abcb09cbcee80a90f6750e0f9b53f0247656c.graph.json"},"244":{"idx":244,"repo":"sympy\/sympy","instance_id":"sympy__sympy-14308","base_commit":"fb536869fb7aa28b2695ad7a3b70949926b291c4","problem_statement":"vectors break pretty printing\n```py\r\nIn [1]: from sympy.vector import *\r\n\r\nIn [2]: e = CoordSysCartesian('e')\r\n\r\nIn [3]: (x\/y)**t*e.j\r\nOut[3]:\r\n\u239b   t\u239e e_j\r\n\u239c\u239bx\u239e e_j \u239f\r\n\u239c\u239c\u2500\u239f \u239f\r\n\u239d\u239dy\u23a0 \u23a0\r\n```\r\n\r\nAlso, when it does print correctly, the baseline is wrong (it should be centered). \n","graph_file":"sympy#sympy#fb536869fb7aa28b2695ad7a3b70949926b291c4.graph.json"},"245":{"idx":245,"repo":"sympy\/sympy","instance_id":"sympy__sympy-14317","base_commit":"fb536869fb7aa28b2695ad7a3b70949926b291c4","problem_statement":"LaTeX printer does not use the same order of monomials as pretty and str \nWhen printing a Poly, the str and pretty printers use the logical order of monomials, from highest to lowest degrees. But latex printer does not. \r\n```\r\n>>> var('a b c x')\r\n>>> p = Poly([a, 1, b, 2, c, 3], x)\r\n>>> p\r\nPoly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\r\n>>> pretty(p)\r\n\"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\r\n>>> latex(p)\r\n'\\\\operatorname{Poly}{\\\\left( a x^{5} + b x^{3} + c x + x^{4} + 2 x^{2} + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\r\n```\n","graph_file":"sympy#sympy#fb536869fb7aa28b2695ad7a3b70949926b291c4.graph.json"},"246":{"idx":246,"repo":"sympy\/sympy","instance_id":"sympy__sympy-14396","base_commit":"f35ad6411f86a15dd78db39c29d1e5291f66f9b5","problem_statement":"Poly(domain='RR[y,z]') doesn't work\n``` py\nIn [14]: Poly(1.2*x*y*z, x)\nOut[14]: Poly(1.2*y*z*x, x, domain='RR[y,z]')\n\nIn [15]: Poly(1.2*x*y*z, x, domain='RR[y,z]')\n---------------------------------------------------------------------------\nOptionError                               Traceback (most recent call last)\n<ipython-input-15-d83389519ae1> in <module>()\n----> 1 Poly(1.2*x*y*z, x, domain='RR[y,z]')\n\n\/Users\/aaronmeurer\/Documents\/Python\/sympy\/sympy-scratch\/sympy\/polys\/polytools.py in __new__(cls, rep, *gens, **args)\n     69     def __new__(cls, rep, *gens, **args):\n     70         \"\"\"Create a new polynomial instance out of something useful. \"\"\"\n---> 71         opt = options.build_options(gens, args)\n     72\n     73         if 'order' in opt:\n\n\/Users\/aaronmeurer\/Documents\/Python\/sympy\/sympy-scratch\/sympy\/polys\/polyoptions.py in build_options(gens, args)\n    718\n    719     if len(args) != 1 or 'opt' not in args or gens:\n--> 720         return Options(gens, args)\n    721     else:\n    722         return args['opt']\n\n\/Users\/aaronmeurer\/Documents\/Python\/sympy\/sympy-scratch\/sympy\/polys\/polyoptions.py in __init__(self, gens, args, flags, strict)\n    151                     self[option] = cls.preprocess(value)\n    152\n--> 153         preprocess_options(args)\n    154\n    155         for key, value in dict(defaults).items():\n\n\/Users\/aaronmeurer\/Documents\/Python\/sympy\/sympy-scratch\/sympy\/polys\/polyoptions.py in preprocess_options(args)\n    149\n    150                 if value is not None:\n--> 151                     self[option] = cls.preprocess(value)\n    152\n    153         preprocess_options(args)\n\n\/Users\/aaronmeurer\/Documents\/Python\/sympy\/sympy-scratch\/sympy\/polys\/polyoptions.py in preprocess(cls, domain)\n    480                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n    481\n--> 482         raise OptionError('expected a valid domain specification, got %s' % domain)\n    483\n    484     @classmethod\n\nOptionError: expected a valid domain specification, got RR[y,z]\n```\n\nAlso, the wording of error message could be improved\n\n","graph_file":"sympy#sympy#f35ad6411f86a15dd78db39c29d1e5291f66f9b5.graph.json"},"247":{"idx":247,"repo":"sympy\/sympy","instance_id":"sympy__sympy-14774","base_commit":"8fc63c2d71752389a44367b8ef4aba8a91af6a45","problem_statement":"Latex printer does not support full inverse trig function names for acsc and asec\nFor example\r\n`latex(asin(x), inv_trig_style=\"full\")` works as expected returning `'\\\\arcsin{\\\\left (x \\\\right )}'`\r\nBut `latex(acsc(x), inv_trig_style=\"full\")` gives `'\\\\operatorname{acsc}{\\\\left (x \\\\right )}'` instead of `'\\\\operatorname{arccsc}{\\\\left (x \\\\right )}'`\r\n\r\nA fix seems to be to change line 743 of sympy\/printing\/latex.py from\r\n`inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]` to\r\n`inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acsc\", \"asec\", \"acot\"]`\n","graph_file":"sympy#sympy#8fc63c2d71752389a44367b8ef4aba8a91af6a45.graph.json"},"248":{"idx":248,"repo":"sympy\/sympy","instance_id":"sympy__sympy-14817","base_commit":"0dbdc0ea83d339936da175f8c3a97d0d6bafb9f8","problem_statement":"Error pretty printing MatAdd\n```py\r\n>>> pprint(MatrixSymbol('x', n, n) + MatrixSymbol('y*', n, n))\r\nTraceback (most recent call last):\r\n  File \".\/sympy\/core\/sympify.py\", line 368, in sympify\r\n    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\r\n  File \".\/sympy\/parsing\/sympy_parser.py\", line 950, in parse_expr\r\n    return eval_expr(code, local_dict, global_dict)\r\n  File \".\/sympy\/parsing\/sympy_parser.py\", line 863, in eval_expr\r\n    code, global_dict, local_dict)  # take local objects in preference\r\n  File \"<string>\", line 1\r\n    Symbol ('y' )*\r\n                 ^\r\nSyntaxError: unexpected EOF while parsing\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".\/sympy\/printing\/pretty\/pretty.py\", line 2371, in pretty_print\r\n    use_unicode_sqrt_char=use_unicode_sqrt_char))\r\n  File \".\/sympy\/printing\/pretty\/pretty.py\", line 2331, in pretty\r\n    return pp.doprint(expr)\r\n  File \".\/sympy\/printing\/pretty\/pretty.py\", line 62, in doprint\r\n    return self._print(expr).render(**self._settings)\r\n  File \".\/sympy\/printing\/printer.py\", line 274, in _print\r\n    return getattr(self, printmethod)(expr, *args, **kwargs)\r\n  File \".\/sympy\/printing\/pretty\/pretty.py\", line 828, in _print_MatAdd\r\n    if S(item.args[0]).is_negative:\r\n  File \".\/sympy\/core\/sympify.py\", line 370, in sympify\r\n    raise SympifyError('could not parse %r' % a, exc)\r\nsympy.core.sympify.SympifyError: Sympify of expression 'could not parse 'y*'' failed, because of exception being raised:\r\nSyntaxError: unexpected EOF while parsing (<string>, line 1)\r\n```\r\n\r\nThe code shouldn't be using sympify to handle string arguments from MatrixSymbol.\r\n\r\nI don't even understand what the code is doing. Why does it omit the `+` when the first argument is negative? This seems to assume that the arguments of MatAdd have a certain form, and that they will always print a certain way if they are negative. \n","graph_file":"sympy#sympy#0dbdc0ea83d339936da175f8c3a97d0d6bafb9f8.graph.json"},"249":{"idx":249,"repo":"sympy\/sympy","instance_id":"sympy__sympy-15011","base_commit":"b7c5ba2bf3ffd5cf453b25af7c8ddd9a639800cb","problem_statement":"lambdify does not work with certain MatrixSymbol names even with dummify=True\n`lambdify` is happy with curly braces in a symbol name and with `MatrixSymbol`s, but not with both at the same time, even if `dummify` is `True`.\r\n\r\nHere is some basic code that gives the error.\r\n```\r\nimport sympy as sy\r\ncurlyx = sy.symbols(\"{x}\")\r\nv = sy.MatrixSymbol(\"v\", 2, 1)\r\ncurlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\r\n```\r\n\r\nThe following two lines of code work:\r\n```\r\ncurlyScalarId = sy.lambdify(curlyx, curlyx)\r\nvectorId = sy.lambdify(v,v)\r\n```\r\n\r\nThe following two lines of code give a `SyntaxError`:\r\n```\r\ncurlyVectorId = sy.lambdify(curlyv, curlyv)\r\ncurlyVectorIdDummified = sy.lambdify(curlyv, curlyv, dummify=True)\r\n```\r\n\r\n\n","graph_file":"sympy#sympy#b7c5ba2bf3ffd5cf453b25af7c8ddd9a639800cb.graph.json"},"250":{"idx":250,"repo":"sympy\/sympy","instance_id":"sympy__sympy-15308","base_commit":"fb59d703e6863ed803c98177b59197b5513332e9","problem_statement":"LaTeX printing for Matrix Expression\n```py\r\n>>> A = MatrixSymbol(\"A\", n, n)\r\n>>> latex(trace(A**2))\r\n'Trace(A**2)'\r\n```\r\n\r\nThe bad part is not only is Trace not recognized, but whatever printer is being used doesn't fallback to the LaTeX printer for the inner expression (it should be `A^2`). \n","graph_file":"sympy#sympy#fb59d703e6863ed803c98177b59197b5513332e9.graph.json"},"251":{"idx":251,"repo":"sympy\/sympy","instance_id":"sympy__sympy-15345","base_commit":"9ef28fba5b4d6d0168237c9c005a550e6dc27d81","problem_statement":"mathematica_code gives wrong output with Max\nIf I run the code\r\n\r\n```\r\nx = symbols('x')\r\nmathematica_code(Max(x,2))\r\n```\r\n\r\nthen I would expect the output `'Max[x,2]'` which is valid Mathematica code but instead I get `'Max(2, x)'` which is not valid Mathematica code.\n","graph_file":"sympy#sympy#9ef28fba5b4d6d0168237c9c005a550e6dc27d81.graph.json"},"252":{"idx":252,"repo":"sympy\/sympy","instance_id":"sympy__sympy-15346","base_commit":"9ef28fba5b4d6d0168237c9c005a550e6dc27d81","problem_statement":"can't simplify sin\/cos with Rational?\nlatest cloned sympy, python 3 on windows\r\nfirstly, cos, sin with symbols can be simplified; rational number can be simplified\r\n```python\r\nfrom sympy import *\r\n\r\nx, y = symbols('x, y', real=True)\r\nr = sin(x)*sin(y) + cos(x)*cos(y)\r\nprint(r)\r\nprint(r.simplify())\r\nprint()\r\n\r\nr = Rational(1, 50) - Rational(1, 25)\r\nprint(r)\r\nprint(r.simplify())\r\nprint()\r\n```\r\nsays\r\n```cmd\r\nsin(x)*sin(y) + cos(x)*cos(y)\r\ncos(x - y)\r\n\r\n-1\/50\r\n-1\/50\r\n```\r\n\r\nbut\r\n```python\r\nt1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\r\nt2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\r\nr = t1.dot(t2)\r\nprint(r)\r\nprint(r.simplify())\r\nprint()\r\n\r\nr = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\r\nprint(r)\r\nprint(r.simplify())\r\nprint()\r\n\r\nprint(acos(r))\r\nprint(acos(r).simplify())\r\nprint()\r\n```\r\nsays\r\n```cmd\r\nsin(1\/50)*sin(1\/25) + cos(1\/50)*cos(1\/25)\r\nsin(1\/50)*sin(1\/25) + cos(1\/50)*cos(1\/25)\r\n\r\nsin(1\/50)*sin(1\/25) + cos(1\/50)*cos(1\/25)\r\nsin(1\/50)*sin(1\/25) + cos(1\/50)*cos(1\/25)\r\n\r\nacos(sin(1\/50)*sin(1\/25) + cos(1\/50)*cos(1\/25))\r\nacos(sin(1\/50)*sin(1\/25) + cos(1\/50)*cos(1\/25))\r\n```\r\n\r\n\n","graph_file":"sympy#sympy#9ef28fba5b4d6d0168237c9c005a550e6dc27d81.graph.json"},"253":{"idx":253,"repo":"sympy\/sympy","instance_id":"sympy__sympy-15609","base_commit":"15f56f3b0006d2ed2c29bde3c43e91618012c849","problem_statement":"Indexed matrix-expression LaTeX printer is not compilable\n```python\r\ni, j, k = symbols(\"i j k\")\r\nM = MatrixSymbol(\"M\", k, k)\r\nN = MatrixSymbol(\"N\", k, k)\r\nlatex((M*N)[i, j])\r\n```\r\n\r\nThe LaTeX string produced by the last command is:\r\n```\r\n\\sum_{i_{1}=0}^{k - 1} M_{i, _i_1} N_{_i_1, j}\r\n```\r\nLaTeX complains about a double subscript `_`. This expression won't render in MathJax either.\n","graph_file":"sympy#sympy#15f56f3b0006d2ed2c29bde3c43e91618012c849.graph.json"},"254":{"idx":254,"repo":"sympy\/sympy","instance_id":"sympy__sympy-15678","base_commit":"31c68eef3ffef39e2e792b0ec92cd92b7010eb2a","problem_statement":"Some issues with idiff\nidiff doesn't support Eq, and it also doesn't support f(x) instead of y. Both should be easy to correct.\r\n\r\n```\r\n>>> idiff(Eq(y*exp(y), x*exp(x)), y, x)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".\/sympy\/geometry\/util.py\", line 582, in idiff\r\n    yp = solve(eq.diff(x), dydx)[0].subs(derivs)\r\nIndexError: list index out of range\r\n>>> idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".\/sympy\/geometry\/util.py\", line 574, in idiff\r\n    raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\r\nValueError: expecting x-dependent symbol(s) but got: f(x)\r\n>>> idiff(y*exp(y)- x*exp(x), y, x)\r\n(x + 1)*exp(x - y)\/(y + 1)\r\n```\n","graph_file":"sympy#sympy#31c68eef3ffef39e2e792b0ec92cd92b7010eb2a.graph.json"},"255":{"idx":255,"repo":"sympy\/sympy","instance_id":"sympy__sympy-16106","base_commit":"0e987498b00167fdd4a08a41c852a97cb70ce8f2","problem_statement":"mathml printer for IndexedBase required\nWriting an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`:\r\n\r\n```\r\nIn [340]: sympy.__version__\r\nOut[340]: '1.0.1.dev'\r\n\r\nIn [341]: from sympy.abc import (a, b)\r\n\r\nIn [342]: sympy.printing.mathml(sympy.IndexedBase(a)[b])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-342-b32e493b70d3> in <module>()\r\n----> 1 sympy.printing.mathml(sympy.IndexedBase(a)[b])\r\n\r\n\/dev\/shm\/gerrit\/venv\/stable-3.5\/lib\/python3.5\/site-packages\/sympy\/printing\/mathml.py in mathml(expr, **settings)\r\n    442 def mathml(expr, **settings):\r\n    443     \"\"\"Returns the MathML representation of expr\"\"\"\r\n--> 444     return MathMLPrinter(settings).doprint(expr)\r\n    445 \r\n    446 \r\n\r\n\/dev\/shm\/gerrit\/venv\/stable-3.5\/lib\/python3.5\/site-packages\/sympy\/printing\/mathml.py in doprint(self, expr)\r\n     36         Prints the expression as MathML.\r\n     37         \"\"\"\r\n---> 38         mathML = Printer._print(self, expr)\r\n     39         unistr = mathML.toxml()\r\n     40         xmlbstr = unistr.encode('ascii', 'xmlcharrefreplace')\r\n\r\n\/dev\/shm\/gerrit\/venv\/stable-3.5\/lib\/python3.5\/site-packages\/sympy\/printing\/printer.py in _print(self, expr, *args, **kwargs)\r\n    255                 printmethod = '_print_' + cls.__name__\r\n    256                 if hasattr(self, printmethod):\r\n--> 257                     return getattr(self, printmethod)(expr, *args, **kwargs)\r\n    258             # Unknown object, fall back to the emptyPrinter.\r\n    259             return self.emptyPrinter(expr)\r\n\r\n\/dev\/shm\/gerrit\/venv\/stable-3.5\/lib\/python3.5\/site-packages\/sympy\/printing\/mathml.py in _print_Basic(self, e)\r\n    356     def _print_Basic(self, e):\r\n    357         x = self.dom.createElement(self.mathml_tag(e))\r\n--> 358         for arg in e:\r\n    359             x.appendChild(self._print(arg))\r\n    360         return x\r\n\r\nTypeError: 'Indexed' object is not iterable\r\n```\r\n\r\nIt also fails for more complex expressions where at least one element is Indexed.\n","graph_file":"sympy#sympy#0e987498b00167fdd4a08a41c852a97cb70ce8f2.graph.json"},"256":{"idx":256,"repo":"sympy\/sympy","instance_id":"sympy__sympy-16281","base_commit":"41490b75f3621408e0468b0e7b6dc409601fc6ff","problem_statement":"Product pretty print could be improved\nThis is what the pretty printing for `Product` looks like:\r\n\r\n```\r\n>>> pprint(Product(1, (n, 1, oo)))\r\n  \u221e\r\n\u252c\u2500\u2500\u2500\u252c\r\n\u2502   \u2502 1\r\n\u2502   \u2502\r\nn = 1\r\n>>> pprint(Product(1\/n, (n, 1, oo)))\r\n   \u221e\r\n\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\r\n\u2502      \u2502 1\r\n\u2502      \u2502 \u2500\r\n\u2502      \u2502 n\r\n\u2502      \u2502\r\n n = 1\r\n>>> pprint(Product(1\/n**2, (n, 1, oo)))\r\n    \u221e\r\n\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\r\n\u2502        \u2502 1\r\n\u2502        \u2502 \u2500\u2500\r\n\u2502        \u2502  2\r\n\u2502        \u2502 n\r\n\u2502        \u2502\r\n  n = 1\r\n>>> pprint(Product(1, (n, 1, oo)), use_unicode=False)\r\n  oo\r\n_____\r\n|   | 1\r\n|   |\r\nn = 1\r\n>>> pprint(Product(1\/n, (n, 1, oo)), use_unicode=False)\r\n   oo\r\n________\r\n|      | 1\r\n|      | -\r\n|      | n\r\n|      |\r\n n = 1\r\n>>> pprint(Product(1\/n**2, (n, 1, oo)), use_unicode=False)\r\n    oo\r\n__________\r\n|        | 1\r\n|        | --\r\n|        |  2\r\n|        | n\r\n|        |\r\n  n = 1\r\n```\r\n\r\n(if those don't look good in your browser copy paste them into the terminal)\r\n\r\nThis could be improved:\r\n\r\n- Why is there always an empty line at the bottom of the \u220f? Keeping everything below the horizontal line is good, but the bottom looks asymmetric, and it makes the \u220f bigger than it needs to be.\r\n\r\n- The \u220f is too fat IMO. \r\n\r\n- It might look better if we extended the top bar. I'm unsure about this. \r\n\r\nCompare this\r\n\r\n```\r\n    \u221e\r\n\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\r\n \u2502     \u2502  1\r\n \u2502     \u2502  \u2500\u2500\r\n \u2502     \u2502   2\r\n \u2502     \u2502  n\r\n  n = 1\r\n```\r\n\r\nThat's still almost twice as wide as the equivalent Sum, but if you make it much skinnier it starts to look bad.\r\n\r\n```\r\n  \u221e\r\n ____\r\n \u2572\r\n  \u2572   1\r\n   \u2572  \u2500\u2500\r\n   \u2571   2\r\n  \u2571   n\r\n \u2571\r\n \u203e\u203e\u203e\u203e\r\nn = 1\r\n```\n","graph_file":"sympy#sympy#41490b75f3621408e0468b0e7b6dc409601fc6ff.graph.json"},"257":{"idx":257,"repo":"sympy\/sympy","instance_id":"sympy__sympy-16503","base_commit":"a7e6f093c98a3c4783848a19fce646e32b6e0161","problem_statement":"Bad centering for Sum pretty print\n```\r\n>>> pprint(Sum(x, (x, 1, oo)) + 3)\r\n  \u221e\r\n ___\r\n \u2572\r\n  \u2572   x\r\n  \u2571     + 3\r\n \u2571\r\n \u203e\u203e\u203e\r\nx = 1\r\n```\r\n\r\nThe `x` and the `+ 3` should be aligned. I'm not sure if the `x` should be lower of if the `+ 3` should be higher. \n","graph_file":"sympy#sympy#a7e6f093c98a3c4783848a19fce646e32b6e0161.graph.json"},"258":{"idx":258,"repo":"sympy\/sympy","instance_id":"sympy__sympy-16792","base_commit":"09786a173e7a0a488f46dd6000177c23e5d24eed","problem_statement":"autowrap with cython backend fails when array arguments do not appear in wrapped expr\nWhen using the cython backend for autowrap, it appears that the code is not correctly generated when the function in question has array arguments that do not appear in the final expression. A minimal counterexample is:\r\n\r\n```python\r\nfrom sympy.utilities.autowrap import autowrap\r\nfrom sympy import MatrixSymbol\r\nimport numpy as np\r\n\r\nx = MatrixSymbol('x', 2, 1)\r\nexpr = 1.0\r\nf = autowrap(expr, args=(x,), backend='cython')\r\n\r\nf(np.array([[1.0, 2.0]]))\r\n```\r\n\r\nThis should of course return `1.0` but instead fails with:\r\n```python\r\nTypeError: only size-1 arrays can be converted to Python scalars\r\n```\r\n\r\nA little inspection reveals that this is because the corresponding C function is generated with an incorrect signature:\r\n\r\n```C\r\ndouble autofunc(double x) {\r\n\r\n   double autofunc_result;\r\n   autofunc_result = 1.0;\r\n   return autofunc_result;\r\n\r\n}\r\n```\r\n\r\n(`x` should be `double *`, not `double` in this case)\r\n\r\nI've found that this error won't occur so long as `expr` depends at least in part on each argument. For example this slight modification of the above counterexample works perfectly:\r\n\r\n```python\r\nfrom sympy.utilities.autowrap import autowrap\r\nfrom sympy import MatrixSymbol\r\nimport numpy as np\r\n\r\nx = MatrixSymbol('x', 2, 1)\r\n# now output depends on x\r\nexpr = x[0,0]\r\nf = autowrap(expr, args=(x,), backend='cython')\r\n\r\n# returns 1.0 as expected, without failure\r\nf(np.array([[1.0, 2.0]]))\r\n```\r\n\r\nThis may seem like a silly issue (\"why even have `x` as an argument if it doesn't appear in the expression you're trying to evaluate?\"). But of course in interfacing with external libraries (e.g. for numerical integration), one often needs functions to have a pre-defined signature regardless of whether a given argument contributes to the output.\r\n\r\nI think I've identified the problem in `codegen` and will suggest a PR shortly.\n","graph_file":"sympy#sympy#09786a173e7a0a488f46dd6000177c23e5d24eed.graph.json"},"259":{"idx":259,"repo":"sympy\/sympy","instance_id":"sympy__sympy-16988","base_commit":"e727339af6dc22321b00f52d971cda39e4ce89fb","problem_statement":"Intersection should remove duplicates\n```python\r\n>>> Intersection({1},{1},{x})\r\nEmptySet()\r\n>>> Intersection({1},{x})\r\n{1}\r\n```\r\nThe answer should be `Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))` or remain unevaluated.\r\n\r\nThe routine should give the same answer if duplicates are present; my initial guess is that duplicates should just be removed at the outset of instantiation. Ordering them will produce canonical processing.\n","graph_file":"sympy#sympy#e727339af6dc22321b00f52d971cda39e4ce89fb.graph.json"},"260":{"idx":260,"repo":"sympy\/sympy","instance_id":"sympy__sympy-17022","base_commit":"f91de695585c1fbc7d4f49ee061f64fcb1c2c4d8","problem_statement":"Lambdify misinterprets some matrix expressions\nUsing lambdify on an expression containing an identity matrix gives us an unexpected result:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> n = symbols('n', integer=True)\r\n>>> A = MatrixSymbol(\"A\", n, n)\r\n>>> a = np.array([[1, 2], [3, 4]])\r\n>>> f = lambdify(A, A + Identity(n))\r\n>>> f(a)\r\narray([[1.+1.j, 2.+1.j],\r\n       [3.+1.j, 4.+1.j]])\r\n```\r\n\r\nInstead, the output should be  `array([[2, 2], [3, 5]])`, since we're adding an identity matrix to the array. Inspecting the globals and source code of `f` shows us why we get the result:\r\n\r\n```python\r\n>>> import inspect\r\n>>> print(inspect.getsource(f))\r\ndef _lambdifygenerated(A):\r\n    return (I + A)\r\n>>> f.__globals__['I']\r\n1j\r\n```\r\n\r\nThe code printer prints `I`, which is currently being interpreted as a Python built-in complex number. The printer should support printing identity matrices, and signal an error for unsupported expressions that might be misinterpreted.\n","graph_file":"sympy#sympy#f91de695585c1fbc7d4f49ee061f64fcb1c2c4d8.graph.json"},"261":{"idx":261,"repo":"sympy\/sympy","instance_id":"sympy__sympy-17139","base_commit":"1d3327b8e90a186df6972991963a5ae87053259d","problem_statement":"simplify(cos(x)**I): Invalid comparison of complex I (fu.py)\n```\r\n>>> from sympy import *\r\n>>> x = Symbol('x')\r\n>>> print(simplify(cos(x)**I))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/home\/e\/se\/sympy\/simplify\/simplify.py\", line 587, in simplify\r\n    expr = trigsimp(expr, deep=True)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/trigsimp.py\", line 508, in trigsimp\r\n    return trigsimpfunc(expr)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/trigsimp.py\", line 501, in <lambda>\r\n    'matching': (lambda x: futrig(x)),\r\n  File \"\/home\/e\/se\/sympy\/simplify\/trigsimp.py\", line 1101, in futrig\r\n    e = bottom_up(e, lambda x: _futrig(x, **kwargs))\r\n  File \"\/home\/e\/se\/sympy\/simplify\/simplify.py\", line 1081, in bottom_up\r\n    rv = F(rv)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/trigsimp.py\", line 1101, in <lambda>\r\n    e = bottom_up(e, lambda x: _futrig(x, **kwargs))\r\n  File \"\/home\/e\/se\/sympy\/simplify\/trigsimp.py\", line 1169, in _futrig\r\n    e = greedy(tree, objective=Lops)(e)\r\n  File \"\/home\/e\/se\/sympy\/strategies\/core.py\", line 115, in minrule\r\n    return min([rule(expr) for rule in rules], key=objective)\r\n  File \"\/home\/e\/se\/sympy\/strategies\/core.py\", line 115, in <listcomp>\r\n    return min([rule(expr) for rule in rules], key=objective)\r\n  File \"\/home\/e\/se\/sympy\/strategies\/core.py\", line 44, in chain_rl\r\n    expr = rule(expr)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/fu.py\", line 566, in TR6\r\n    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/fu.py\", line 524, in _TR56\r\n    return bottom_up(rv, _f)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/simplify.py\", line 1081, in bottom_up\r\n    rv = F(rv)\r\n  File \"\/home\/e\/se\/sympy\/simplify\/fu.py\", line 504, in _f\r\n    if (rv.exp < 0) == True:\r\n  File \"\/home\/e\/se\/sympy\/core\/expr.py\", line 406, in __lt__\r\n    raise TypeError(\"Invalid comparison of complex %s\" % me)\r\nTypeError: Invalid comparison of complex I\r\n```\n","graph_file":"sympy#sympy#1d3327b8e90a186df6972991963a5ae87053259d.graph.json"},"262":{"idx":262,"repo":"sympy\/sympy","instance_id":"sympy__sympy-17630","base_commit":"58e78209c8577b9890e957b624466e5beed7eb08","problem_statement":"Exception when multiplying BlockMatrix containing ZeroMatrix blocks\nWhen a block matrix with zero blocks is defined\r\n\r\n```\r\n>>> from sympy import *\r\n>>> a = MatrixSymbol(\"a\", 2, 2)\r\n>>> z = ZeroMatrix(2, 2)\r\n>>> b = BlockMatrix([[a, z], [z, z]])\r\n```\r\n\r\nthen block-multiplying it once seems to work fine:\r\n\r\n```\r\n>>> block_collapse(b * b)\r\nMatrix([\r\n[a**2, 0],\r\n[0, 0]])\r\n>>> b._blockmul(b)\r\nMatrix([\r\n[a**2, 0],\r\n[0, 0]])\r\n```\r\n\r\nbut block-multiplying twice throws an exception:\r\n\r\n```\r\n>>> block_collapse(b * b * b)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 297, in block_collapse\r\n    result = rule(expr)\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/strategies\/core.py\", line 11, in exhaustive_rl\r\n    new, old = rule(expr), expr\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/strategies\/core.py\", line 44, in chain_rl\r\n    expr = rule(expr)\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/strategies\/core.py\", line 11, in exhaustive_rl\r\n    new, old = rule(expr), expr\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/strategies\/core.py\", line 33, in conditioned_rl\r\n    return rule(expr)\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/strategies\/core.py\", line 95, in switch_rl\r\n    return rl(expr)\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 361, in bc_matmul\r\n    matrices[i] = A._blockmul(B)\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 91, in _blockmul\r\n    self.colblocksizes == other.rowblocksizes):\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 80, in colblocksizes\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 80, in <listcomp>\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\nAttributeError: 'Zero' object has no attribute 'cols'\r\n>>> b._blockmul(b)._blockmul(b)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 91, in _blockmul\r\n    self.colblocksizes == other.rowblocksizes):\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 80, in colblocksizes\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\n  File \"\/home\/jan\/.pyenv\/versions\/3.7.4\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 80, in <listcomp>\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\nAttributeError: 'Zero' object has no attribute 'cols'\r\n```\r\n\r\nThis seems to be caused by the fact that the zeros in `b._blockmul(b)` are not `ZeroMatrix` but `Zero`:\r\n\r\n```\r\n>>> type(b._blockmul(b).blocks[0, 1])\r\n<class 'sympy.core.numbers.Zero'>\r\n```\r\n\r\nHowever, I don't understand SymPy internals well enough to find out why this happens. I use Python 3.7.4 and sympy 1.4 (installed with pip).\n","graph_file":"sympy#sympy#58e78209c8577b9890e957b624466e5beed7eb08.graph.json"},"263":{"idx":263,"repo":"sympy\/sympy","instance_id":"sympy__sympy-17655","base_commit":"f5e965947af2410ded92cfad987aaf45262ea434","problem_statement":"Unexpected exception when multiplying geometry.Point and number\n```python\r\nfrom sympy import geometry as ge\r\nimport sympy\r\n\r\npoint1 = ge.Point(0,0)\r\npoint2 = ge.Point(1,1)\r\n```\r\n\r\nThis line works fine\r\n```python\r\npoint1 + point2 * sympy.sympify(2.0)\r\n```\r\n\r\nBut when I write the same this way it raises an exception\r\n```python\r\npoint1 + sympy.sympify(2.0) * point2\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~\/.virtualenvs\/test\/lib\/python3.6\/site-packages\/sympy\/geometry\/point.py in __add__(self, other)\r\n    219         try:\r\n--> 220             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\r\n    221         except TypeError:\r\n\r\n~\/.virtualenvs\/test\/lib\/python3.6\/site-packages\/sympy\/geometry\/point.py in __new__(cls, *args, **kwargs)\r\n    128                 Expecting sequence of coordinates, not `{}`'''\r\n--> 129                                        .format(func_name(coords))))\r\n    130         # A point where only `dim` is specified is initialized\r\n\r\nTypeError: \r\nExpecting sequence of coordinates, not `Mul`\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nGeometryError                             Traceback (most recent call last)\r\n<ipython-input-20-6dcbddac1ee2> in <module>\r\n----> 1 point1 + sympy.sympify(2.0)* point2\r\n\r\n~\/.virtualenvs\/test\/lib\/python3.6\/site-packages\/sympy\/geometry\/point.py in __add__(self, other)\r\n    220             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\r\n    221         except TypeError:\r\n--> 222             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\r\n    223 \r\n    224         coords = [simplify(a + b) for a, b in zip(s, o)]\r\n\r\nGeometryError: Don't know how to add 2.0*Point2D(1, 1) and a Point object\r\n```\r\n\r\nThe expected behaviour is, that both lines give the same result\n","graph_file":"sympy#sympy#f5e965947af2410ded92cfad987aaf45262ea434.graph.json"},"264":{"idx":264,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18057","base_commit":"62000f37b8821573ba00280524ffb4ac4a380875","problem_statement":"Sympy incorrectly attempts to eval reprs in its __eq__ method\nPassing strings produced by unknown objects into eval is **very bad**. It is especially surprising for an equality check to trigger that kind of behavior. This should be fixed ASAP.\r\n\r\nRepro code:\r\n\r\n```\r\nimport sympy\r\nclass C:\r\n    def __repr__(self):\r\n        return 'x.y'\r\n_ = sympy.Symbol('x') == C()\r\n```\r\n\r\nResults in:\r\n\r\n```\r\nE   AttributeError: 'Symbol' object has no attribute 'y'\r\n```\r\n\r\nOn the line:\r\n\r\n```\r\n    expr = eval(\r\n        code, global_dict, local_dict)  # take local objects in preference\r\n```\r\n\r\nWhere code is:\r\n\r\n```\r\nSymbol ('x' ).y\r\n```\r\n\r\nFull trace:\r\n\r\n```\r\nFAILED                   [100%]\r\n        class C:\r\n            def __repr__(self):\r\n                return 'x.y'\r\n    \r\n>       _ = sympy.Symbol('x') == C()\r\n\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nsympy\/core\/expr.py:124: in __eq__\r\n    other = sympify(other)\r\nsympy\/core\/sympify.py:385: in sympify\r\n    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\r\nsympy\/parsing\/sympy_parser.py:1011: in parse_expr\r\n    return eval_expr(code, local_dict, global_dict)\r\nsympy\/parsing\/sympy_parser.py:906: in eval_expr\r\n    code, global_dict, local_dict)  # take local objects in preference\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   AttributeError: 'Symbol' object has no attribute 'y'\r\n\r\n<string>:1: AttributeError\r\n```\r\n\r\nRelated issue: an unknown object whose repr is `x` will incorrectly compare as equal to a sympy symbol x:\r\n\r\n```\r\n    class C:\r\n        def __repr__(self):\r\n            return 'x'\r\n\r\n    assert sympy.Symbol('x') != C()  # fails\r\n```\n","graph_file":"sympy#sympy#62000f37b8821573ba00280524ffb4ac4a380875.graph.json"},"265":{"idx":265,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18087","base_commit":"9da013ad0ddc3cd96fe505f2e47c63e372040916","problem_statement":"Simplify of simple trig expression fails\ntrigsimp in various versions, including 1.5, incorrectly simplifies cos(x)+sqrt(sin(x)**2) as though it were cos(x)+sin(x) for general complex x. (Oddly it gets this right if x is real.)\r\n\r\nEmbarrassingly I found this by accident while writing sympy-based teaching material...\r\n\n","graph_file":"sympy#sympy#9da013ad0ddc3cd96fe505f2e47c63e372040916.graph.json"},"266":{"idx":266,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18189","base_commit":"1923822ddf8265199dbd9ef9ce09641d3fd042b9","problem_statement":"diophantine: incomplete results depending on syms order with permute=True\n```\r\nIn [10]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=True)\r\nOut[10]: {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\r\n\r\nIn [11]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=True)\r\nOut[11]: {(3, 2)}\r\n```\r\n\ndiophantine: incomplete results depending on syms order with permute=True\n```\r\nIn [10]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m,n), permute=True)\r\nOut[10]: {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\r\n\r\nIn [11]: diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n,m), permute=True)\r\nOut[11]: {(3, 2)}\r\n```\r\n\n","graph_file":"sympy#sympy#1923822ddf8265199dbd9ef9ce09641d3fd042b9.graph.json"},"267":{"idx":267,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18199","base_commit":"ba80d1e493f21431b4bf729b3e0452cd47eb9566","problem_statement":"nthroot_mod function misses one root of x = 0 mod p.\nWhen in the equation x**n = a mod p , when a % p == 0. Then x = 0 mod p is also a root of this equation. But right now `nthroot_mod` does not check for this condition. `nthroot_mod(17*17, 5 , 17)` has a root `0 mod 17`. But it does not return it.\n","graph_file":"sympy#sympy#ba80d1e493f21431b4bf729b3e0452cd47eb9566.graph.json"},"268":{"idx":268,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18532","base_commit":"74227f900b05009d4eed62e34a166228788a32ca","problem_statement":"expr.atoms() should return objects with no args instead of subclasses of Atom\n`expr.atoms()` with no arguments returns subclasses of `Atom` in `expr`. But the correct definition of a leaf node should be that it has no `.args`. \n\nThis should be easy to fix, but one needs to check that this doesn't affect the performance. \n\n","graph_file":"sympy#sympy#74227f900b05009d4eed62e34a166228788a32ca.graph.json"},"269":{"idx":269,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18621","base_commit":"b17ef6effe278d5b861d65896cc53442a6370d8f","problem_statement":"BlockDiagMatrix with one element cannot be converted to regular Matrix\nCreating a BlockDiagMatrix with one Matrix element will raise if trying to convert it back to a regular Matrix:\r\n\r\n```python\r\nM = sympy.Matrix([[1, 2], [3, 4]])\r\nD = sympy.BlockDiagMatrix(M)\r\nB = sympy.Matrix(D)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-37-5b65c1f8f23e>\", line 3, in <module>\r\n    B = sympy.Matrix(D)\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/dense.py\", line 430, in __new__\r\n    return cls._new(*args, **kwargs)\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/dense.py\", line 442, in _new\r\n    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/matrices.py\", line 2528, in _handle_creation_inputs\r\n    return args[0].rows, args[0].cols, args[0].as_explicit()._mat\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/matexpr.py\", line 340, in as_explicit\r\n    for i in range(self.rows)])\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/matexpr.py\", line 340, in <listcomp>\r\n    for i in range(self.rows)])\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/matexpr.py\", line 339, in <listcomp>\r\n    for j in range(self.cols)]\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/matexpr.py\", line 289, in __getitem__\r\n    return self._entry(i, j)\r\n\r\n  File \"\/home\/rikard\/.local\/lib\/python3.7\/site-packages\/sympy\/matrices\/expressions\/blockmatrix.py\", line 248, in _entry\r\n    return self.blocks[row_block, col_block][i, j]\r\n\r\nTypeError: 'One' object is not subscriptable\r\n```\r\n\r\nInstead having two elements will work as expected:\r\n\r\n```python\r\nM = sympy.Matrix([[1, 2], [3, 4]])\r\nD = sympy.BlockDiagMatrix(M, M)\r\nB = sympy.Matrix(D)\r\n```\r\n\r\n```\r\nMatrix([\r\n[1, 2, 0, 0],\r\n[3, 4, 0, 0],\r\n[0, 0, 1, 2],\r\n[0, 0, 3, 4]])\r\n```\r\nThis issue exists for sympy 1.5.1 but not for sympy 1.4\n","graph_file":"sympy#sympy#b17ef6effe278d5b861d65896cc53442a6370d8f.graph.json"},"270":{"idx":270,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18698","base_commit":"3dff1b98a78f28c953ae2140b69356b8391e399c","problem_statement":"sqf and sqf_list output is not consistant\nThe example below is wrong in the sense that we should have (x*_2 - 5_x + 6, 3) and not 2 factors of multiplicity 3.\n\n```\n>  sqf_list(  (x**2 + 1)  * (x - 1)**2 * (x - 2)**3 * (x - 3)**3  )\n\n>  (1, [(x**2 + 1, 1), (x - 1, 2), (x - 3, 3), (x - 2, 3)])\n```\n\nwhereas below is correct --- one factor of multiplicity 2\n\n```\n>  sqf_list( x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2 )\n\n>  (1, [(x - 2, 1), (x**2 - 1, 2)])\n```\n\n","graph_file":"sympy#sympy#3dff1b98a78f28c953ae2140b69356b8391e399c.graph.json"},"271":{"idx":271,"repo":"sympy\/sympy","instance_id":"sympy__sympy-18835","base_commit":"516fa83e69caf1e68306cfc912a13f36c434d51c","problem_statement":"uniq modifies list argument\nWhen you iterate over a dictionary or set and try to modify it while doing so you get an error from Python:\r\n```python\r\n>>> multiset('THISTLE')\r\n{'T': 2, 'H': 1, 'I': 1, 'S': 1, 'L': 1, 'E': 1}\r\n>>> for i in _:\r\n...   _.pop(i)\r\n...\r\n2\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: dictionary changed size during iteration\r\n```\r\nIt would be good to do the same thing from within `uniq` because the output will silently be wrong if you modify a passed list:\r\n```python\r\n>>> f=list('THISTLE')\r\n>>> for i in uniq(f):\r\n...   f.remove(i)\r\n...   i\r\n...\r\n'T'\r\n'I'\r\n'L'\r\n```\r\nI think this would entail recording the size at the start and then checking the size and raising a similar RuntimeError if the size changes.\n","graph_file":"sympy#sympy#516fa83e69caf1e68306cfc912a13f36c434d51c.graph.json"},"272":{"idx":272,"repo":"sympy\/sympy","instance_id":"sympy__sympy-19007","base_commit":"f9e030b57623bebdc2efa7f297c1b5ede08fcebf","problem_statement":"Wrong matrix element fetched from BlockMatrix\nGiven this code:\r\n```\r\nfrom sympy import *\r\nn, i = symbols('n, i', integer=True)\r\nA = MatrixSymbol('A', 1, 1)\r\nB = MatrixSymbol('B', n, 1)\r\nC = BlockMatrix([[A], [B]])\r\nprint('C is')\r\npprint(C)\r\nprint('C[i, 0] is')\r\npprint(C[i, 0])\r\n```\r\nI get this output:\r\n```\r\nC is\r\n\u23a1A\u23a4\r\n\u23a2 \u23a5\r\n\u23a3B\u23a6\r\nC[i, 0] is\r\n(A)[i, 0]\r\n```\r\n`(A)[i, 0]` is the wrong here. `C[i, 0]` should not be simplified as that element may come from either `A` or `B`.\n","graph_file":"sympy#sympy#f9e030b57623bebdc2efa7f297c1b5ede08fcebf.graph.json"},"273":{"idx":273,"repo":"sympy\/sympy","instance_id":"sympy__sympy-19254","base_commit":"e0ef1da13e2ab2a77866c05246f73c871ca9388c","problem_statement":"sympy.polys.factortools.dmp_zz_mignotte_bound improvement\nThe method `dup_zz_mignotte_bound(f, K)` can be significantly improved by using the **Knuth-Cohen bound** instead. After our research with Prof. Ag.Akritas we have implemented the Knuth-Cohen bound among others, and compare them among dozens of polynomials with different degree, density and coefficients range. Considering the results and the feedback from Mr.Kalevi Suominen, our proposal is that the mignotte_bound should be replaced by the knuth-cohen bound.\r\nAlso, `dmp_zz_mignotte_bound(f, u, K)` for mutli-variants polynomials should be replaced appropriately.\n","graph_file":"sympy#sympy#e0ef1da13e2ab2a77866c05246f73c871ca9388c.graph.json"},"274":{"idx":274,"repo":"sympy\/sympy","instance_id":"sympy__sympy-19487","base_commit":"25fbcce5b1a4c7e3956e6062930f4a44ce95a632","problem_statement":"Rewrite sign as abs\nIn sympy the `sign` function is defined as\r\n```\r\n    sign(z)  :=  z \/ Abs(z)\r\n```\r\nfor all complex non-zero `z`. There should be a way to rewrite the sign in terms of `Abs` e.g.:\r\n```\r\n>>> sign(x).rewrite(Abs)                                                                                                                   \r\n x \r\n\u2500\u2500\u2500\r\n\u2502x\u2502\r\n```\r\nI'm not sure how the possibility of `x` being zero should be handled currently we have\r\n```\r\n>>> sign(0)                                                                                                                               \r\n0\r\n>>> 0 \/ Abs(0)                                                                                                                            \r\nnan\r\n```\r\nMaybe `sign(0)` should be `nan` as well. Otherwise maybe rewrite as Abs would have to be careful about the possibility of the arg being zero (that would make the rewrite fail in most cases).\n","graph_file":"sympy#sympy#25fbcce5b1a4c7e3956e6062930f4a44ce95a632.graph.json"},"275":{"idx":275,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20049","base_commit":"d57aaf064041fe52c0fa357639b069100f8b28e1","problem_statement":"Point.vel() should calculate the velocity if possible\nIf you specify the orientation of two reference frames and then ask for the angular velocity between the two reference frames the angular velocity will be calculated. But if you try to do the same thing with velocities, this doesn't work. See below:\r\n\r\n```\r\nIn [1]: import sympy as sm                                                                               \r\n\r\nIn [2]: import sympy.physics.mechanics as me                                                             \r\n\r\nIn [3]: A = me.ReferenceFrame('A')                                                                       \r\n\r\nIn [5]: q = me.dynamicsymbols('q')                                                                       \r\n\r\nIn [6]: B = A.orientnew('B', 'Axis', (q, A.x))                                                           \r\n\r\nIn [7]: B.ang_vel_in(A)                                                                                  \r\nOut[7]: q'*A.x\r\n\r\nIn [9]: P = me.Point('P')                                                                                \r\n\r\nIn [10]: Q = me.Point('Q')                                                                               \r\n\r\nIn [11]: r = q*A.x + 2*q*A.y                                                                             \r\n\r\nIn [12]: Q.set_pos(P, r)                                                                                 \r\n\r\nIn [13]: Q.vel(A)                                                                                        \r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-13-0fc8041904cc> in <module>\r\n----> 1 Q.vel(A)\r\n\r\n~\/miniconda3\/lib\/python3.6\/site-packages\/sympy\/physics\/vector\/point.py in vel(self, frame)\r\n    453         if not (frame in self._vel_dict):\r\n    454             raise ValueError('Velocity of point ' + self.name + ' has not been'\r\n--> 455                              ' defined in ReferenceFrame ' + frame.name)\r\n    456         return self._vel_dict[frame]\r\n    457 \r\n\r\nValueError: Velocity of point Q has not been defined in ReferenceFrame A\r\n```\r\n\r\nThe expected result of the `Q.vel(A)` should be:\r\n\r\n```\r\nIn [14]: r.dt(A)                                                                                         \r\nOut[14]: q'*A.x + 2*q'*A.y\r\n```\r\n\r\nI think that this is possible. Maybe there is a reason it isn't implemented. But we should try to implement it because it is confusing why this works for orientations and not positions.\r\n\r\n\n","graph_file":"sympy#sympy#d57aaf064041fe52c0fa357639b069100f8b28e1.graph.json"},"276":{"idx":276,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20154","base_commit":"bdb49c4abfb35554a3c8ce761696ffff3bb837fe","problem_statement":"partitions() reusing the output dictionaries\nThe partitions() iterator in sympy.utilities.iterables reuses the output dictionaries. There is a caveat about it in the docstring. \r\n\r\nI'm wondering if it's really that important for it to do this. It shouldn't be that much of a performance loss to copy the dictionary before yielding it. This behavior is very confusing. It means that something as simple as list(partitions()) will give an apparently wrong result. And it can lead to much more subtle bugs if the partitions are used in a nontrivial way. \n","graph_file":"sympy#sympy#bdb49c4abfb35554a3c8ce761696ffff3bb837fe.graph.json"},"277":{"idx":277,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20212","base_commit":"a106f4782a9dbe7f8fd16030f15401d977e03ae9","problem_statement":"0**-oo produces 0, the documentation says it should produce zoo\nUsing SymPy 1.5.1, evaluate `0**-oo` produces `0`.\r\n\r\nThe documentation for the Pow class states that it should return `ComplexInfinity`, aka `zoo`\r\n\r\n| expr | value | reason |\r\n| :-- | :-- | :--|\r\n| `0**-oo` | `zoo` | This is not strictly true, as 0**oo may be oscillating between positive and negative values or rotating in the complex plane. It is convenient, however, when the base is positive.|\r\n\n","graph_file":"sympy#sympy#a106f4782a9dbe7f8fd16030f15401d977e03ae9.graph.json"},"278":{"idx":278,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20322","base_commit":"ab864967e71c950a15771bb6c3723636026ba876","problem_statement":"Inconsistent behavior for sympify\/simplify with ceiling\nIn sympy v1.5.1:\r\n```python\r\nIn [16]: sympy.sympify('4*ceiling(x\/4 - 3\/4)', evaluate=False).simplify()\r\nOut[16]: 4*ceiling(x\/4 - 3\/4)\r\n\r\nIn [17]: sympy.sympify('4*ceiling(x\/4 - 3\/4)', evaluate=True).simplify()\r\nOut[17]: 4*ceiling(x\/4 - 3\/4)\r\n```\r\n\r\nIn sympy v.1.6.2:\r\n```python\r\nIn [16]: sympy.sympify('4*ceiling(x\/4 - 3\/4)', evaluate=False).simplify()\r\nOut[16]: 4*ceiling(x\/4) - 3\r\n\r\nIn [17]: sympy.sympify('4*ceiling(x\/4 - 3\/4)', evaluate=True).simplify()\r\nOut [17]: 4*ceiling(x\/4 - 3\/4)\r\n```\r\n\r\nIs there a way to ensure that the behavior is consistent, even though evaluate is equal to `False` when parsing?\n","graph_file":"sympy#sympy#ab864967e71c950a15771bb6c3723636026ba876.graph.json"},"279":{"idx":279,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20442","base_commit":"1abbc0ac3e552cb184317194e5d5c5b9dd8fb640","problem_statement":"convert_to seems to combine orthogonal units\nTested in sympy 1.4, not presently in a position to install 1.5+.\r\nSimple example. Consider `J = kg*m**2\/s**2 => J*s = kg*m**2\/s`. The convert_to behavior is odd:\r\n```\r\n>>>convert_to(joule*second,joule)\r\n    joule**(7\/9)\r\n```\r\nI would expect the unchanged original expression back, an expression in terms of base units, or an error. It appears that convert_to can only readily handle conversions where the full unit expression is valid.\r\n\r\nNote that the following three related examples give sensible results:\r\n```\r\n>>>convert_to(joule*second,joule*second)\r\n    joule*second\r\n```\r\n```\r\n>>>convert_to(J*s, kg*m**2\/s)\r\n    kg*m**2\/s\r\n```\r\n```\r\n>>>convert_to(J*s,mins)\r\n    J*mins\/60\r\n```\n","graph_file":"sympy#sympy#1abbc0ac3e552cb184317194e5d5c5b9dd8fb640.graph.json"},"280":{"idx":280,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20590","base_commit":"cffd4e0f86fefd4802349a9f9b19ed70934ea354","problem_statement":"Symbol instances have __dict__ since 1.7?\nIn version 1.6.2 Symbol instances had no `__dict__` attribute\r\n```python\r\n>>> sympy.Symbol('s').__dict__\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-3-e2060d5eec73> in <module>\r\n----> 1 sympy.Symbol('s').__dict__\r\n\r\nAttributeError: 'Symbol' object has no attribute '__dict__'\r\n>>> sympy.Symbol('s').__slots__\r\n('name',)\r\n```\r\n\r\nThis changes in 1.7 where `sympy.Symbol('s').__dict__` now exists (and returns an empty dict)\r\nI may misinterpret this, but given the purpose of `__slots__`, I assume this is a bug, introduced because some parent class accidentally stopped defining `__slots__`.\n","graph_file":"sympy#sympy#cffd4e0f86fefd4802349a9f9b19ed70934ea354.graph.json"},"281":{"idx":281,"repo":"sympy\/sympy","instance_id":"sympy__sympy-20639","base_commit":"eb926a1d0c1158bf43f01eaf673dc84416b5ebb1","problem_statement":"inaccurate rendering of pi**(1\/E)\nThis claims to be version 1.5.dev; I just merged from the project master, so I hope this is current.  I didn't notice this bug among others in printing.pretty.\r\n\r\n```\r\nIn [52]: pi**(1\/E)                                                               \r\nOut[52]: \r\n-1___\r\n\u2572\u2571 \u03c0 \r\n\r\n```\r\nLaTeX and str not fooled:\r\n```\r\nIn [53]: print(latex(pi**(1\/E)))                                                 \r\n\\pi^{e^{-1}}\r\n\r\nIn [54]: str(pi**(1\/E))                                                          \r\nOut[54]: 'pi**exp(-1)'\r\n```\r\n\n","graph_file":"sympy#sympy#eb926a1d0c1158bf43f01eaf673dc84416b5ebb1.graph.json"},"282":{"idx":282,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21055","base_commit":"748ce73479ee2cd5c861431091001cc18943c735","problem_statement":"`refine()` does not understand how to simplify complex arguments\nJust learned about the refine-function, which would come in handy frequently for me.  But\r\n`refine()` does not recognize that argument functions simplify for real numbers.\r\n\r\n```\r\n>>> from sympy import *                                                     \r\n>>> var('a,x')                                                              \r\n>>> J = Integral(sin(x)*exp(-a*x),(x,0,oo))                                     \r\n>>> J.doit()\r\n\tPiecewise((1\/(a**2 + 1), 2*Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\r\n>>> refine(J.doit(),Q.positive(a))                                                 \r\n        Piecewise((1\/(a**2 + 1), 2*Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\r\n>>> refine(abs(a),Q.positive(a))                                            \r\n\ta\r\n>>> refine(arg(a),Q.positive(a))                                            \r\n\targ(a)\r\n```\r\nI cann't find any open issues identifying this.  Easy to fix, though.\r\n\r\n\n","graph_file":"sympy#sympy#748ce73479ee2cd5c861431091001cc18943c735.graph.json"},"283":{"idx":283,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21171","base_commit":"aa22709cb7df2d7503803d4b2c0baa7aa21440b6","problem_statement":"_print_SingularityFunction() got an unexpected keyword argument 'exp'\nOn a Jupyter Notebook cell, type the following:\r\n\r\n```python\r\nfrom sympy import *\r\nfrom sympy.physics.continuum_mechanics import Beam\r\n# Young's modulus\r\nE = symbols(\"E\")\r\n# length of the beam\r\nL = symbols(\"L\")\r\n# concentrated load at the end tip of the beam\r\nF = symbols(\"F\")\r\n# square cross section\r\nB, H = symbols(\"B, H\")\r\nI = B * H**3 \/ 12\r\n# numerical values (material: steel)\r\nd = {B: 1e-02, H: 1e-02, E: 210e09, L: 0.2, F: 100}\r\n\r\nb2 = Beam(L, E, I)\r\nb2.apply_load(-F, L \/ 2, -1)\r\nb2.apply_support(0, \"fixed\")\r\nR0, M0 = symbols(\"R_0, M_0\")\r\nb2.solve_for_reaction_loads(R0, M0)\r\n```\r\n\r\nThen:\r\n\r\n```\r\nb2.shear_force()\r\n```\r\n\r\nThe following error appears:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/IPython\/core\/formatters.py in __call__(self, obj)\r\n    343             method = get_real_method(obj, self.print_method)\r\n    344             if method is not None:\r\n--> 345                 return method()\r\n    346             return None\r\n    347         else:\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/interactive\/printing.py in _print_latex_png(o)\r\n    184         \"\"\"\r\n    185         if _can_print(o):\r\n--> 186             s = latex(o, mode=latex_mode, **settings)\r\n    187             if latex_mode == 'plain':\r\n    188                 s = '$\\\\displaystyle %s$' % s\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in __call__(self, *args, **kwargs)\r\n    371 \r\n    372     def __call__(self, *args, **kwargs):\r\n--> 373         return self.__wrapped__(*args, **kwargs)\r\n    374 \r\n    375     @property\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in latex(expr, **settings)\r\n   2913 \r\n   2914     \"\"\"\r\n-> 2915     return LatexPrinter(settings).doprint(expr)\r\n   2916 \r\n   2917 \r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in doprint(self, expr)\r\n    252 \r\n    253     def doprint(self, expr):\r\n--> 254         tex = Printer.doprint(self, expr)\r\n    255 \r\n    256         if self._settings['mode'] == 'plain':\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in doprint(self, expr)\r\n    289     def doprint(self, expr):\r\n    290         \"\"\"Returns printer's representation for expr (as a string)\"\"\"\r\n--> 291         return self._str(self._print(expr))\r\n    292 \r\n    293     def _print(self, expr, **kwargs):\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Mul(self, expr)\r\n    565             # use the original expression here, since fraction() may have\r\n    566             # altered it when producing numer and denom\r\n--> 567             tex += convert(expr)\r\n    568 \r\n    569         else:\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in convert(expr)\r\n    517                                isinstance(x.base, Quantity)))\r\n    518 \r\n--> 519                 return convert_args(args)\r\n    520 \r\n    521         def convert_args(args):\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in convert_args(args)\r\n    523 \r\n    524                 for i, term in enumerate(args):\r\n--> 525                     term_tex = self._print(term)\r\n    526 \r\n    527                     if self._needs_mul_brackets(term, first=(i == 0),\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Mul(self, expr)\r\n    569         else:\r\n    570             snumer = convert(numer)\r\n--> 571             sdenom = convert(denom)\r\n    572             ldenom = len(sdenom.split())\r\n    573             ratio = self._settings['long_frac_ratio']\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in convert(expr)\r\n    505         def convert(expr):\r\n    506             if not expr.is_Mul:\r\n--> 507                 return str(self._print(expr))\r\n    508             else:\r\n    509                 if self.order not in ('old', 'none'):\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Add(self, expr, order)\r\n    381             else:\r\n    382                 tex += \" + \"\r\n--> 383             term_tex = self._print(term)\r\n    384             if self._needs_add_brackets(term):\r\n    385                 term_tex = r\"\\left(%s\\right)\" % term_tex\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/latex.py in _print_Pow(self, expr)\r\n    649         else:\r\n    650             if expr.base.is_Function:\r\n--> 651                 return self._print(expr.base, exp=self._print(expr.exp))\r\n    652             else:\r\n    653                 tex = r\"%s^{%s}\"\r\n\r\n\/usr\/local\/lib\/python3.8\/dist-packages\/sympy\/printing\/printer.py in _print(self, expr, **kwargs)\r\n    327                 printmethod = '_print_' + cls.__name__\r\n    328                 if hasattr(self, printmethod):\r\n--> 329                     return getattr(self, printmethod)(expr, **kwargs)\r\n    330             # Unknown object, fall back to the emptyPrinter.\r\n    331             return self.emptyPrinter(expr)\r\n\r\nTypeError: _print_SingularityFunction() got an unexpected keyword argument 'exp'\r\n```\n","graph_file":"sympy#sympy#aa22709cb7df2d7503803d4b2c0baa7aa21440b6.graph.json"},"284":{"idx":284,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21379","base_commit":"624217179aaf8d094e6ff75b7493ad1ee47599b0","problem_statement":"Unexpected `PolynomialError` when using simple `subs()` for particular expressions\nI am seeing weird behavior with `subs` for particular expressions with hyperbolic sinusoids with piecewise arguments. When applying `subs`, I obtain an unexpected `PolynomialError`. For context, I was umbrella-applying a casting from int to float of all int atoms for a bunch of random expressions before using a tensorflow lambdify to avoid potential tensorflow type errors. You can pretend the expression below has a `+ 1` at the end, but below is the MWE that I could produce.\r\n\r\nSee the expression below, and the conditions in which the exception arises.\r\n\r\nSympy version: 1.8.dev\r\n\r\n```python\r\nfrom sympy import *\r\nfrom sympy.core.cache import clear_cache\r\n\r\nx, y, z = symbols('x y z')\r\n\r\nclear_cache()\r\nexpr = exp(sinh(Piecewise((x, y > x), (y, True)) \/ z))\r\n# This works fine\r\nexpr.subs({1: 1.0})\r\n\r\nclear_cache()\r\nx, y, z = symbols('x y z', real=True)\r\nexpr = exp(sinh(Piecewise((x, y > x), (y, True)) \/ z))\r\n# This fails with \"PolynomialError: Piecewise generators do not make sense\"\r\nexpr.subs({1: 1.0})  # error\r\n# Now run it again (isympy...) w\/o clearing cache and everything works as expected without error\r\nexpr.subs({1: 1.0})\r\n```\r\n\r\nI am not really sure where the issue is, but I think it has something to do with the order of assumptions in this specific type of expression. Here is what I found-\r\n\r\n- The error only (AFAIK) happens with `cosh` or `tanh` in place of `sinh`, otherwise it succeeds\r\n- The error goes away if removing the division by `z`\r\n- The error goes away if removing `exp` (but stays for most unary functions, `sin`, `log`, etc.)\r\n- The error only happens with real symbols for `x` and `y` (`z` does not have to be real)\r\n\r\nNot too sure how to debug this one.\n","graph_file":"sympy#sympy#624217179aaf8d094e6ff75b7493ad1ee47599b0.graph.json"},"285":{"idx":285,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21612","base_commit":"b4777fdcef467b7132c055f8ac2c9a5059e6a145","problem_statement":"Latex parsing of fractions yields wrong expression due to missing brackets\nProblematic latex expression: `\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"`\r\n\r\nis parsed to: `((a**3 + b)\/c)\/1\/(c**2)`.\r\n\r\nExpected is: `((a**3 + b)\/c)\/(1\/(c**2))`. \r\n\r\nThe missing brackets in the denominator result in a wrong expression.\r\n\r\n## Tested on\r\n\r\n- 1.8\r\n- 1.6.2\r\n\r\n## Reproduce:\r\n\r\n```\r\nroot@d31ef1c26093:\/# python3\r\nPython 3.6.9 (default, Jan 26 2021, 15:33:00)\r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy.parsing.latex import parse_latex\r\n>>> parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\r\n((a**3 + b)\/c)\/1\/(c**2)\r\n\r\n\n","graph_file":"sympy#sympy#b4777fdcef467b7132c055f8ac2c9a5059e6a145.graph.json"},"286":{"idx":286,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21614","base_commit":"b4777fdcef467b7132c055f8ac2c9a5059e6a145","problem_statement":"Wrong Derivative kind attribute\nI'm playing around with the `kind` attribute.\r\n\r\nThe following is correct:\r\n\r\n```\r\nfrom sympy import Integral, Derivative\r\nfrom sympy import MatrixSymbol\r\nfrom sympy.abc import x\r\nA = MatrixSymbol('A', 2, 2)\r\ni = Integral(A, x)\r\ni.kind\r\n# MatrixKind(NumberKind)\r\n```\r\n\r\nThis one is wrong:\r\n```\r\nd = Derivative(A, x)\r\nd.kind\r\n# UndefinedKind\r\n```\n","graph_file":"sympy#sympy#b4777fdcef467b7132c055f8ac2c9a5059e6a145.graph.json"},"287":{"idx":287,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21627","base_commit":"126f80578140e752ad5135aac77b8ff887eede3e","problem_statement":"Bug: maximum recusion depth error when checking is_zero of cosh expression\nThe following code causes a `RecursionError: maximum recursion depth exceeded while calling a Python object` error when checked if it is zero:\r\n```\r\nexpr =sympify(\"cosh(acos(-i + acosh(-g + i)))\")\r\nexpr.is_zero\r\n```\n","graph_file":"sympy#sympy#126f80578140e752ad5135aac77b8ff887eede3e.graph.json"},"288":{"idx":288,"repo":"sympy\/sympy","instance_id":"sympy__sympy-21847","base_commit":"d9b18c518d64d0ebe8e35a98c2fb519938b9b151","problem_statement":"itermonomials returns incorrect monomials when using min_degrees argument\n`itermonomials` returns incorrect monomials when using optional `min_degrees` argument\r\n\r\nFor example, the following code introduces three symbolic variables and generates monomials with max and min degree of 3:\r\n\r\n\r\n```\r\nimport sympy as sp\r\nfrom sympy.polys.orderings import monomial_key\r\n\r\nx1, x2, x3 = sp.symbols('x1, x2, x3')\r\nstates = [x1, x2, x3]\r\nmax_degrees = 3\r\nmin_degrees = 3\r\nmonomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), \r\n                   key=monomial_key('grlex', states))\r\nprint(monomials)\r\n```\r\nThe code returns `[x3**3, x2**3, x1**3]`, when it _should_ also return monomials such as `x1*x2**2, x2*x3**2, etc...` that also have total degree of 3. This behaviour is inconsistent with the documentation that states that \r\n\r\n> A generator of all monomials `monom` is returned, such that either `min_degree <= total_degree(monom) <= max_degree`...\r\n\r\nThe monomials are also missing when `max_degrees` is increased above `min_degrees`.\n","graph_file":"sympy#sympy#d9b18c518d64d0ebe8e35a98c2fb519938b9b151.graph.json"},"289":{"idx":289,"repo":"sympy\/sympy","instance_id":"sympy__sympy-22005","base_commit":"2c83657ff1c62fc2761b639469fdac7f7561a72a","problem_statement":"detection of infinite solution request\n```python\r\n>>> solve_poly_system((x - 1,), x, y)\r\nTraceback (most recent call last):\r\n...\r\nNotImplementedError:\r\nonly zero-dimensional systems supported (finite number of solutions)\r\n>>> solve_poly_system((y - 1,), x, y)  <--- this is not handled correctly\r\n[(1,)]\r\n```\r\n```diff\r\ndiff --git a\/sympy\/solvers\/polysys.py b\/sympy\/solvers\/polysys.py\r\nindex b9809fd4e9..674322d4eb 100644\r\n--- a\/sympy\/solvers\/polysys.py\r\n+++ b\/sympy\/solvers\/polysys.py\r\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\r\n \r\n         univariate = list(filter(_is_univariate, basis))\r\n \r\n-        if len(univariate) == 1:\r\n+        if len(univariate) == 1 and len(gens) == 1:\r\n             f = univariate.pop()\r\n         else:\r\n             raise NotImplementedError(filldedent('''\r\ndiff --git a\/sympy\/solvers\/tests\/test_polysys.py b\/sympy\/solvers\/tests\/test_polysys.py\r\nindex 58419f8762..9e674a6fe6 100644\r\n--- a\/sympy\/solvers\/tests\/test_polysys.py\r\n+++ b\/sympy\/solvers\/tests\/test_polysys.py\r\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\r\n     raises(NotImplementedError, lambda: solve_poly_system(\r\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\r\n     raises(PolynomialError, lambda: solve_poly_system([1\/x], x))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(x - 1, x, y), (x, y)))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(y - 1, x, y), (x, y)))\r\n \r\n \r\n def test_solve_biquadratic():\r\n```\n","graph_file":"sympy#sympy#2c83657ff1c62fc2761b639469fdac7f7561a72a.graph.json"},"290":{"idx":290,"repo":"sympy\/sympy","instance_id":"sympy__sympy-22714","base_commit":"3ff4717b6aef6086e78f01cdfa06f64ae23aed7e","problem_statement":"simpify gives `Imaginary coordinates are not permitted.` with evaluate(False)\n## Issue\r\n`with evaluate(False)` crashes unexpectedly with `Point2D`\r\n\r\n## Code\r\n```python\r\nimport sympy as sp\r\nwith sp.evaluate(False):\r\n  sp.S('Point2D(Integer(1),Integer(2))')\r\n```\r\n\r\n## Error\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/home\/avinash\/.local\/lib\/python3.8\/site-packages\/sympy\/core\/sympify.py\", line 472, in sympify\r\n    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\r\n  File \"\/home\/avinash\/.local\/lib\/python3.8\/site-packages\/sympy\/parsing\/sympy_parser.py\", line 1026, in parse_expr\r\n    raise e from ValueError(f\"Error from parse_expr with transformed code: {code!r}\")\r\n  File \"\/home\/avinash\/.local\/lib\/python3.8\/site-packages\/sympy\/parsing\/sympy_parser.py\", line 1017, in parse_expr\r\n    rv = eval_expr(code, local_dict, global_dict)\r\n  File \"\/home\/avinash\/.local\/lib\/python3.8\/site-packages\/sympy\/parsing\/sympy_parser.py\", line 911, in eval_expr\r\n    expr = eval(\r\n  File \"<string>\", line 1, in <module>\r\n  File \"\/home\/avinash\/.local\/lib\/python3.8\/site-packages\/sympy\/geometry\/point.py\", line 912, in __new__\r\n    args = Point(*args, **kwargs)\r\n  File \"\/home\/avinash\/.local\/lib\/python3.8\/site-packages\/sympy\/geometry\/point.py\", line 153, in __new__\r\n    raise ValueError('Imaginary coordinates are not permitted.')\r\nValueError: Imaginary coordinates are not permitted.\r\n```\r\n\r\nHowever, it works without `with evaluate(False)`. Both of following commands work\r\n```python\r\nsp.S('Point2D(Integer(1),Integer(2))')\r\nsp.S('Point2D(Integer(1),Integer(2))', evaluate=False)\r\n```\n","graph_file":"sympy#sympy#3ff4717b6aef6086e78f01cdfa06f64ae23aed7e.graph.json"},"291":{"idx":291,"repo":"sympy\/sympy","instance_id":"sympy__sympy-22840","base_commit":"d822fcba181155b85ff2b29fe525adbafb22b448","problem_statement":"cse() has strange behaviour for MatrixSymbol indexing\nExample: \r\n```python\r\nimport sympy as sp\r\nfrom pprint import pprint\r\n\r\n\r\ndef sub_in_matrixsymbols(exp, matrices):\r\n    for matrix in matrices:\r\n        for i in range(matrix.shape[0]):\r\n            for j in range(matrix.shape[1]):\r\n                name = \"%s_%d_%d\" % (matrix.name, i, j)\r\n                sym = sp.symbols(name)\r\n                exp = exp.subs(sym, matrix[i, j])\r\n    return exp\r\n\r\n\r\ndef t44(name):\r\n    return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))\r\n\r\n\r\n# Construct matrices of symbols that work with our\r\n# expressions. (MatrixSymbols does not.)\r\na = t44(\"a\")\r\nb = t44(\"b\")\r\n\r\n# Set up expression. This is a just a simple example.\r\ne = a * b\r\n\r\n# Put in matrixsymbols. (Gives array-input in codegen.)\r\ne2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol(\"a\", 4, 4), sp.MatrixSymbol(\"b\", 4, 4)])\r\ncse_subs, cse_reduced = sp.cse(e2)\r\npprint((cse_subs, cse_reduced))\r\n\r\n# Codegen, etc..\r\nprint \"\\nccode:\"\r\nfor sym, expr in cse_subs:\r\n    constants, not_c, c_expr = sympy.printing.ccode(\r\n        expr,\r\n        human=False,\r\n        assign_to=sympy.printing.ccode(sym),\r\n    )\r\n    assert not constants, constants\r\n    assert not not_c, not_c\r\n    print \"%s\\n\" % c_expr\r\n\r\n```\r\n\r\nThis gives the following output:\r\n\r\n```\r\n([(x0, a),\r\n  (x1, x0[0, 0]),\r\n  (x2, b),\r\n  (x3, x2[0, 0]),\r\n  (x4, x0[0, 1]),\r\n  (x5, x2[1, 0]),\r\n  (x6, x0[0, 2]),\r\n  (x7, x2[2, 0]),\r\n  (x8, x0[0, 3]),\r\n  (x9, x2[3, 0]),\r\n  (x10, x2[0, 1]),\r\n  (x11, x2[1, 1]),\r\n  (x12, x2[2, 1]),\r\n  (x13, x2[3, 1]),\r\n  (x14, x2[0, 2]),\r\n  (x15, x2[1, 2]),\r\n  (x16, x2[2, 2]),\r\n  (x17, x2[3, 2]),\r\n  (x18, x2[0, 3]),\r\n  (x19, x2[1, 3]),\r\n  (x20, x2[2, 3]),\r\n  (x21, x2[3, 3]),\r\n  (x22, x0[1, 0]),\r\n  (x23, x0[1, 1]),\r\n  (x24, x0[1, 2]),\r\n  (x25, x0[1, 3]),\r\n  (x26, x0[2, 0]),\r\n  (x27, x0[2, 1]),\r\n  (x28, x0[2, 2]),\r\n  (x29, x0[2, 3]),\r\n  (x30, x0[3, 0]),\r\n  (x31, x0[3, 1]),\r\n  (x32, x0[3, 2]),\r\n  (x33, x0[3, 3])],\r\n [Matrix([\r\n[    x1*x3 + x4*x5 + x6*x7 + x8*x9,     x1*x10 + x11*x4 + x12*x6 + x13*x8,     x1*x14 + x15*x4 + x16*x6 + x17*x8,     x1*x18 + x19*x4 + x20*x6 + x21*x8],\r\n[x22*x3 + x23*x5 + x24*x7 + x25*x9, x10*x22 + x11*x23 + x12*x24 + x13*x25, x14*x22 + x15*x23 + x16*x24 + x17*x25, x18*x22 + x19*x23 + x20*x24 + x21*x25],\r\n[x26*x3 + x27*x5 + x28*x7 + x29*x9, x10*x26 + x11*x27 + x12*x28 + x13*x29, x14*x26 + x15*x27 + x16*x28 + x17*x29, x18*x26 + x19*x27 + x20*x28 + x21*x29],\r\n[x3*x30 + x31*x5 + x32*x7 + x33*x9, x10*x30 + x11*x31 + x12*x32 + x13*x33, x14*x30 + x15*x31 + x16*x32 + x17*x33, x18*x30 + x19*x31 + x20*x32 + x21*x33]])])\r\n\r\nccode:\r\nx0[0] = a[0];\r\nx0[1] = a[1];\r\nx0[2] = a[2];\r\nx0[3] = a[3];\r\nx0[4] = a[4];\r\nx0[5] = a[5];\r\nx0[6] = a[6];\r\nx0[7] = a[7];\r\nx0[8] = a[8];\r\nx0[9] = a[9];\r\nx0[10] = a[10];\r\nx0[11] = a[11];\r\nx0[12] = a[12];\r\nx0[13] = a[13];\r\nx0[14] = a[14];\r\nx0[15] = a[15];\r\nx1 = x0[0];\r\nx2[0] = b[0];\r\nx2[1] = b[1];\r\nx2[2] = b[2];\r\nx2[3] = b[3];\r\nx2[4] = b[4];\r\nx2[5] = b[5];\r\nx2[6] = b[6];\r\nx2[7] = b[7];\r\nx2[8] = b[8];\r\nx2[9] = b[9];\r\nx2[10] = b[10];\r\nx2[11] = b[11];\r\nx2[12] = b[12];\r\nx2[13] = b[13];\r\nx2[14] = b[14];\r\nx2[15] = b[15];\r\nx3 = x2[0];\r\nx4 = x0[1];\r\nx5 = x2[4];\r\nx6 = x0[2];\r\nx7 = x2[8];\r\nx8 = x0[3];\r\nx9 = x2[12];\r\nx10 = x2[1];\r\nx11 = x2[5];\r\nx12 = x2[9];\r\nx13 = x2[13];\r\nx14 = x2[2];\r\nx15 = x2[6];\r\nx16 = x2[10];\r\nx17 = x2[14];\r\nx18 = x2[3];\r\nx19 = x2[7];\r\nx20 = x2[11];\r\nx21 = x2[15];\r\nx22 = x0[4];\r\nx23 = x0[5];\r\nx24 = x0[6];\r\nx25 = x0[7];\r\nx26 = x0[8];\r\nx27 = x0[9];\r\nx28 = x0[10];\r\nx29 = x0[11];\r\nx30 = x0[12];\r\nx31 = x0[13];\r\nx32 = x0[14];\r\nx33 = x0[15];\r\n```\r\n\r\n`x0` and `x2` are just copies of the matrices `a` and `b`, respectively.\n","graph_file":"sympy#sympy#d822fcba181155b85ff2b29fe525adbafb22b448.graph.json"},"292":{"idx":292,"repo":"sympy\/sympy","instance_id":"sympy__sympy-23117","base_commit":"c5cef2499d6eed024b0db5c792d6ec7c53baa470","problem_statement":"sympy.Array([]) fails, while sympy.Matrix([]) works\nSymPy 1.4 does not allow to construct empty Array (see code below). Is this the intended behavior?\r\n\r\n```\r\n>>> import sympy\r\nKeyboardInterrupt\r\n>>> import sympy\r\n>>> from sympy import Array\r\n>>> sympy.__version__\r\n'1.4'\r\n>>> a = Array([])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/Users\/hcui7\/miniconda3\/envs\/a\/lib\/python3.7\/site-packages\/sympy\/tensor\/array\/dense_ndim_array.py\", line 130, in __new__\r\n    return cls._new(iterable, shape, **kwargs)\r\n  File \"\/Users\/hcui7\/miniconda3\/envs\/a\/lib\/python3.7\/site-packages\/sympy\/tensor\/array\/dense_ndim_array.py\", line 136, in _new\r\n    shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)\r\n  File \"\/Users\/hcui7\/miniconda3\/envs\/a\/lib\/python3.7\/site-packages\/sympy\/tensor\/array\/ndim_array.py\", line 142, in _handle_ndarray_creation_inputs\r\n    iterable, shape = cls._scan_iterable_shape(iterable)\r\n  File \"\/Users\/hcui7\/miniconda3\/envs\/a\/lib\/python3.7\/site-packages\/sympy\/tensor\/array\/ndim_array.py\", line 127, in _scan_iterable_shape\r\n    return f(iterable)\r\n  File \"\/Users\/hcui7\/miniconda3\/envs\/a\/lib\/python3.7\/site-packages\/sympy\/tensor\/array\/ndim_array.py\", line 120, in f\r\n    elems, shapes = zip(*[f(i) for i in pointer])\r\nValueError: not enough values to unpack (expected 2, got 0)\r\n```\r\n\r\n@czgdp1807 \n","graph_file":"sympy#sympy#c5cef2499d6eed024b0db5c792d6ec7c53baa470.graph.json"},"293":{"idx":293,"repo":"sympy\/sympy","instance_id":"sympy__sympy-23191","base_commit":"fa9b4b140ec0eaf75a62c1111131626ef0f6f524","problem_statement":"display bug while using pretty_print with sympy.vector object in the terminal\nThe following code jumbles some of the outputs in the terminal, essentially by inserting the unit vector in the middle -\r\n```python\r\nfrom sympy import *\r\nfrom sympy.vector import CoordSys3D, Del\r\n\r\ninit_printing()\r\n\r\ndelop = Del()\r\nCC_ = CoordSys3D(\"C\")\r\nx,    y,    z    = CC_.x, CC_.y, CC_.z\r\nxhat, yhat, zhat = CC_.i, CC_.j, CC_.k\r\n\r\nt = symbols(\"t\")\r\nten = symbols(\"10\", positive=True)\r\neps, mu = 4*pi*ten**(-11), ten**(-5)\r\n\r\nBx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * y)\r\nvecB = Bx * xhat\r\nvecE = (1\/eps) * Integral(delop.cross(vecB\/mu).doit(), t)\r\n\r\npprint(vecB)\r\nprint()\r\npprint(vecE)\r\nprint()\r\npprint(vecE.doit())\r\n```\r\n\r\nOutput:\r\n```python\r\n\u239b     \u239by_C\u239e    \u239b  5  \u239e\u239e    \r\n\u239c2\u22c5sin\u239c\u2500\u2500\u2500\u239f i_C\u22c5cos\u239d10 \u22c5t\u23a0\u239f\r\n\u239c     \u239c  3\u239f           \u239f    \r\n\u239c     \u239d10 \u23a0           \u239f    \r\n\u239c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f    \r\n\u239c           4         \u239f    \r\n\u239d         10          \u23a0    \r\n\r\n\u239b     \u2320                           \u239e    \r\n\u239c     \u23ae       \u239by_C\u239e    \u239b  5  \u239e    \u239f k_C\r\n\u239c     \u23ae -2\u22c5cos\u239c\u2500\u2500\u2500\u239f\u22c5cos\u239d10 \u22c5t\u23a0    \u239f    \r\n\u239c     \u23ae       \u239c  3\u239f               \u239f    \r\n\u239c  11 \u23ae       \u239d10 \u23a0               \u239f    \r\n\u239c10  \u22c5\u23ae \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 dt\u239f    \r\n\u239c     \u23ae             2             \u239f    \r\n\u239c     \u23ae           10              \u239f    \r\n\u239c     \u2321                           \u239f    \r\n\u239c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f    \r\n\u239d               4\u22c5\u03c0               \u23a0    \r\n\r\n\u239b   4    \u239b  5  \u239e    \u239by_C\u239e \u239e    \r\n\u239c-10 \u22c5sin\u239d10 \u22c5t\u23a0\u22c5cos\u239c\u2500\u2500\u2500\u239f k_C \u239f\r\n\u239c                   \u239c  3\u239f \u239f    \r\n\u239c                   \u239d10 \u23a0 \u239f    \r\n\u239c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u239f    \r\n\u239d           2\u22c5\u03c0           \u23a0    ```\n","graph_file":"sympy#sympy#fa9b4b140ec0eaf75a62c1111131626ef0f6f524.graph.json"},"294":{"idx":294,"repo":"sympy\/sympy","instance_id":"sympy__sympy-23262","base_commit":"fdc707f73a65a429935c01532cd3970d3355eab6","problem_statement":"Python code printer not respecting tuple with one element\nHi,\r\n\r\nThanks for the recent updates in SymPy! I'm trying to update my code to use SymPy 1.10 but ran into an issue with the Python code printer. MWE:\r\n\r\n\r\n```python\r\nimport inspect\r\nfrom sympy import lambdify\r\n\r\ninspect.getsource(lambdify([], tuple([1])))\r\n```\r\nSymPy 1.9 and under outputs:\r\n```\r\n'def _lambdifygenerated():\\n    return (1,)\\n'\r\n```\r\n\r\nBut SymPy 1.10 gives\r\n\r\n```\r\n'def _lambdifygenerated():\\n    return (1)\\n'\r\n```\r\nNote the missing comma after `1` that causes an integer to be returned instead of a tuple. \r\n\r\nFor tuples with two or more elements, the generated code is correct:\r\n```python\r\ninspect.getsource(lambdify([], tuple([1, 2])))\r\n```\r\nIn SymPy  1.10 and under, outputs:\r\n\r\n```\r\n'def _lambdifygenerated():\\n    return (1, 2)\\n'\r\n```\r\nThis result is expected.\r\n\r\nNot sure if this is a regression. As this breaks my program which assumes the return type to always be a tuple, could you suggest a workaround from the code generation side? Thank you. \n","graph_file":"sympy#sympy#fdc707f73a65a429935c01532cd3970d3355eab6.graph.json"},"295":{"idx":295,"repo":"sympy\/sympy","instance_id":"sympy__sympy-24066","base_commit":"514579c655bf22e2af14f0743376ae1d7befe345","problem_statement":"SI._collect_factor_and_dimension() cannot properly detect that exponent is dimensionless\nHow to reproduce:\r\n\r\n```python\r\nfrom sympy import exp\r\nfrom sympy.physics import units\r\nfrom sympy.physics.units.systems.si import SI\r\n\r\nexpr = units.second \/ (units.ohm * units.farad)\r\ndim = SI._collect_factor_and_dimension(expr)[1]\r\n\r\nassert SI.get_dimension_system().is_dimensionless(dim)\r\n\r\nbuggy_expr = 100 + exp(expr)\r\nSI._collect_factor_and_dimension(buggy_expr)\r\n\r\n# results in ValueError: Dimension of \"exp(second\/(farad*ohm))\" is Dimension(time\/(capacitance*impedance)), but it should be Dimension(1)\r\n```\n","graph_file":"sympy#sympy#514579c655bf22e2af14f0743376ae1d7befe345.graph.json"},"296":{"idx":296,"repo":"sympy\/sympy","instance_id":"sympy__sympy-24102","base_commit":"58598660a3f6ab3d918781c4988c2e4b2bdd9297","problem_statement":"Cannot parse Greek characters (and possibly others) in parse_mathematica\nThe old Mathematica parser `mathematica` in the package `sympy.parsing.mathematica` was able to parse e.g. Greek characters. Hence the following example works fine:\r\n```\r\nfrom sympy.parsing.mathematica import mathematica\r\nmathematica('\u03bb')\r\nOut[]: \r\n\u03bb\r\n```\r\n\r\nAs of SymPy v. 1.11, the `mathematica` function is deprecated, and is replaced by `parse_mathematica`. This function, however, seems unable to handle the simple example above:\r\n```\r\nfrom sympy.parsing.mathematica import parse_mathematica\r\nparse_mathematica('\u03bb')\r\nTraceback (most recent call last):\r\n...\r\nFile \"<string>\", line unknown\r\nSyntaxError: unable to create a single AST for the expression\r\n```\r\n\r\nThis appears to be due to a bug in `parse_mathematica`, which is why I have opened this issue.\r\n\r\nThanks in advance!\nCannot parse Greek characters (and possibly others) in parse_mathematica\nThe old Mathematica parser `mathematica` in the package `sympy.parsing.mathematica` was able to parse e.g. Greek characters. Hence the following example works fine:\r\n```\r\nfrom sympy.parsing.mathematica import mathematica\r\nmathematica('\u03bb')\r\nOut[]: \r\n\u03bb\r\n```\r\n\r\nAs of SymPy v. 1.11, the `mathematica` function is deprecated, and is replaced by `parse_mathematica`. This function, however, seems unable to handle the simple example above:\r\n```\r\nfrom sympy.parsing.mathematica import parse_mathematica\r\nparse_mathematica('\u03bb')\r\nTraceback (most recent call last):\r\n...\r\nFile \"<string>\", line unknown\r\nSyntaxError: unable to create a single AST for the expression\r\n```\r\n\r\nThis appears to be due to a bug in `parse_mathematica`, which is why I have opened this issue.\r\n\r\nThanks in advance!\n","graph_file":"sympy#sympy#58598660a3f6ab3d918781c4988c2e4b2bdd9297.graph.json"},"297":{"idx":297,"repo":"sympy\/sympy","instance_id":"sympy__sympy-24152","base_commit":"b9af885473ad7e34b5b0826cb424dd26d8934670","problem_statement":"Bug in expand of TensorProduct + Workaround + Fix\n### Error description\r\nThe expansion of a TensorProduct object stops incomplete if summands in the tensor product factors have (scalar) factors, e.g.\r\n```\r\nfrom sympy import *\r\nfrom sympy.physics.quantum import *\r\nU = Operator('U')\r\nV = Operator('V')\r\nP = TensorProduct(2*U - V, U + V)\r\nprint(P) \r\n# (2*U - V)x(U + V)\r\nprint(P.expand(tensorproduct=True)) \r\n#result: 2*Ux(U + V) - Vx(U + V) #expansion has missed 2nd tensor factor and is incomplete\r\n```\r\nThis is clearly not the expected behaviour. It also effects other functions that rely on .expand(tensorproduct=True), as e.g. qapply() .\r\n\r\n### Work around\r\nRepeat .expand(tensorproduct=True) as may times as there are tensor factors, resp. until the expanded term does no longer change. This is however only reasonable in interactive session and not in algorithms.\r\n\r\n### Code Fix\r\n.expand relies on the method TensorProduct._eval_expand_tensorproduct(). The issue arises from an inprecise check in TensorProduct._eval_expand_tensorproduct() whether a recursive call is required; it fails when the creation of a TensorProduct object returns commutative (scalar) factors up front: in that case the constructor returns a Mul(c_factors, TensorProduct(..)).\r\nI thus propose the following  code fix in TensorProduct._eval_expand_tensorproduct() in quantum\/tensorproduct.py.  I have marked the four lines to be added \/ modified:\r\n```\r\n    def _eval_expand_tensorproduct(self, **hints):\r\n                ...\r\n                for aa in args[i].args:\r\n                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\r\n                    c_part, nc_part = tp.args_cnc() #added\r\n                    if len(nc_part)==1 and isinstance(nc_part[0], TensorProduct): #modified\r\n                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), ) #modified\r\n                    add_args.append(Mul(*c_part)*Mul(*nc_part)) #modified\r\n                break\r\n                ...\r\n```\r\nThe fix splits of commutative (scalar) factors from the tp returned. The TensorProduct object will be the one nc factor in nc_part (see TensorProduct.__new__ constructor), if any. Note that the constructor will return 0 if a tensor factor is 0, so there is no guarantee that tp contains a TensorProduct object (e.g. TensorProduct(U-U, U+V).\r\n\r\n\r\n\n","graph_file":"sympy#sympy#b9af885473ad7e34b5b0826cb424dd26d8934670.graph.json"},"298":{"idx":298,"repo":"sympy\/sympy","instance_id":"sympy__sympy-24213","base_commit":"e8c22f6eac7314be8d92590bfff92ced79ee03e2","problem_statement":"collect_factor_and_dimension does not detect equivalent dimensions in addition\nCode to reproduce:\r\n```python\r\nfrom sympy.physics import units\r\nfrom sympy.physics.units.systems.si import SI\r\n\r\nv1 = units.Quantity('v1')\r\nSI.set_quantity_dimension(v1, units.velocity)\r\nSI.set_quantity_scale_factor(v1, 2 * units.meter \/ units.second)\r\n\r\na1 = units.Quantity('a1')\r\nSI.set_quantity_dimension(a1, units.acceleration)\r\nSI.set_quantity_scale_factor(a1, -9.8 * units.meter \/ units.second**2)\r\n\r\nt1 = units.Quantity('t1')\r\nSI.set_quantity_dimension(t1, units.time)\r\nSI.set_quantity_scale_factor(t1, 5 * units.second)\r\n\r\nexpr1 = a1*t1 + v1\r\nSI._collect_factor_and_dimension(expr1)\r\n```\r\nResults in:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Python\\Python310\\lib\\site-packages\\sympy\\physics\\units\\unitsystem.py\", line 179, in _collect_factor_and_dimension\r\n    raise ValueError(\r\nValueError: Dimension of \"v1\" is Dimension(velocity), but it should be Dimension(acceleration*time)\r\n```\n","graph_file":"sympy#sympy#e8c22f6eac7314be8d92590bfff92ced79ee03e2.graph.json"},"299":{"idx":299,"repo":"sympy\/sympy","instance_id":"sympy__sympy-24909","base_commit":"d3b4158dea271485e3daa11bf82e69b8dab348ce","problem_statement":"Bug with milli prefix\nWhat happened:\r\n```\r\nIn [1]: from sympy.physics.units import milli, W\r\nIn [2]: milli*W == 1\r\nOut[2]: True\r\nIn [3]: W*milli\r\nOut[3]: watt*Prefix(milli, m, -3, 10)\r\n```\r\nWhat I expected to happen: milli*W should evaluate to milli watts \/ mW\r\n\r\n`milli*W` or more generally `milli` times some unit evaluates to the number 1. I have tried this with Watts and Volts, I'm not sure what other cases this happens. I'm using sympy version 1.11.1-1 on Arch Linux with Python 3.10.9. If you cannot reproduce I would be happy to be of any assitance.\n","graph_file":"sympy#sympy#d3b4158dea271485e3daa11bf82e69b8dab348ce.graph.json"}}